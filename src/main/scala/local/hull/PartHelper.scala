package local.hull

import local.hull.PartManager.PrdPart
import local.sql.ConnectionManager

import java.sql.{ResultSet, Statement}
import scala.collection.mutable.ListBuffer

trait PartHelper {

  //private def partsByDrawingNum(drNum: String): String = s"select\n(select OID from V_PRD_PART where BLOCK_NAME=PNL.BLOCK_CODE AND PART_NAME=PNL.PART_CODE) as OID,\nPNL.PART_CODE,\nPNL.PART_TYPE,\nPNL.BLOCK_CODE,\nB.DESCRIPTION,\nPNL.NUM_EQ_PART,\nPNL.PART_DESC,\nPNL.ELEM_TYPE,\nPNL.MATERIAL,\nPNL.LENGTH,\nPNL.WIDTH,\nPNL.THICKNESS,\nPNL.WEIGHT_UNIT,\nPNL.TOTAL_WEIGHT,\nPNL.NEST_ID,\nPNL.NUM_PART_NEST,\nPNL.NEST_LENGTH,\nPNL.NEST_WIDTH,\nPNL.NUM_EQ_NEST,\n(select KSE_KPL from V_PRD_PLPRF_MAT where NEST_ID=PNL.NEST_ID) as KSE_KPL,\n(select STOCK_CODE0 from STD_PROFILE where kse=(select KSE_KPL from V_PRD_PLPRF_MAT where NEST_ID=PNL.NEST_ID)) as STOCK1,\n(select STORAGE_CODE from STD_PLATE where kpl=(select KSE_KPL from V_PRD_PLPRF_MAT where NEST_ID=PNL.NEST_ID)) as STOCK2\nfrom V_PRD_PART_NEST_LIST PNL, BLOCK B\nwhere \nPNL.BLOCK_CODE=B.CODE AND\nB.DESCRIPTION like '%${drNum}%'"


  //private def partsByDrawingNumOld(drNum: String): String = s"select distinct\n(select OID from V_PRD_PART where BLOCK_NAME=PNL.BLOCK_CODE AND PART_NAME=PNL.PART_CODE) as PART_OID,\nPNL.PEOID as EXPL_OID,\nPNL.PART_CODE,\nPNL.SYMMETRY,\nPNL.PART_TYPE,\nPNL.BLOCK_CODE,\nB.DESCRIPTION,\nPNL.NUM_EQ_PART,\nPNL.PART_DESC,\nPNL.ELEM_TYPE,\nPNL.MATERIAL,\nPNL.LENGTH,\nPNL.WIDTH,\nPNL.THICKNESS,\nPNL.WEIGHT_UNIT,\nPNL.TOTAL_WEIGHT,\nPNL.NEST_ID,\nPNL.NEST_LENGTH,\nPNL.NEST_WIDTH,\nPNL.NUM_EQ_NEST,\n(select KSE_KPL from V_PRD_PLPRF_MAT where NEST_ID=PNL.NEST_ID) as KSE_KPL,\n(select STOCK_CODE0 from STD_PROFILE where kse=(select KSE_KPL from V_PRD_PLPRF_MAT where NEST_ID=PNL.NEST_ID)) as STOCK1,\n(select STORAGE_CODE from STD_PLATE where kpl=(select KSE_KPL from V_PRD_PLPRF_MAT where NEST_ID=PNL.NEST_ID)) as STOCK2\nfrom\n(\nselect   \n    PEOID,\n    PART_CODE,\n    SYMMETRY,\n    PART_TYPE,\n    BLOCK_CODE,\n    NUM_EQ_PART,\n    PART_DESC,\n    ELEM_TYPE,\n    MATERIAL,\n    LENGTH,\n    WIDTH,\n    THICKNESS,\n    WEIGHT_UNIT,\n    TOTAL_WEIGHT,\n    NEST_ID,\n    NUM_PART_NEST,\n    NEST_LENGTH,\n    NEST_WIDTH,\n    NUM_EQ_NEST\nfrom \n(\n select      \n PE.OID as PEOID,\n P.CODE as PART_CODE,\n           DECODE (PE.SYMMETRY,  0,'P', 1,'S', 2,'C', 3,'') as SYMMETRY,\n           P.PART_TYPE,\n           SUBSTR (GET_BLOCK_CODE (P.BLOCK_OID), 1, 12) as BLOCK_CODE,\n           RPT_COPY_COUNT (P.OID) as NUM_EQ_PART,\n           GET_PART_DESC (P.OID, 1) as PART_DESC,\n           'PL' as ELEM_TYPE,\n           SUBSTR (GET_MATERIAL_CODE (PA.MATERIAL_OID, 1), 1, 12) as MATERIAL,\n           RPT_GET_SD_PLATE_DIM (P.OID, 0) as LENGTH,\n           RPT_GET_SD_PLATE_DIM (P.OID, 1) as WIDTH,\n           PA.THICKNESS,\n           RPT_GET_PART_WEIGHT (P.OID) as WEIGHT_UNIT,\n           RPT_GET_PART_WEIGHT (P.OID) * RPT_COPY_COUNT (P.OID) as TOTAL_WEIGHT,\n           SUBSTR (GET_NEST_ID (NP.NESTING_OID, NP.NESTING_BLOCK), 1, 15) as NEST_ID ,\n           NP.NUM_PART_NEST,\n           NP.NEST_LENGTH,\n           NP.NEST_WIDTH,\n           NP.NUM_EQ_NEST\n      FROM PRD_EXPL_PART PE,  PRD_PART P, V_RPT_SHDK_PLATE_ATT PA, V_RPT_NEST_PART_GROUP NP, PRD_NEST_PART PNP\n     WHERE     PA.PRD_PART_OID = P.OID AND PE.PRD_PART_OID =PA.PRD_PART_OID\n           AND PNP.PART_OID=P.OID AND PNP.SYMM_CODE=PE.SYMMETRY AND NP.NESTING_OID = PNP.NESTING_OID\n           AND P.PART_TYPE IN (9, 10)\n    UNION ALL\n    select    PE.OID as PEOID, P.CODE  as PART_CODE,\n     DECODE (PE.SYMMETRY,  0,'P', 1,'S', 2,'C', 3,'') as SYMMETRY,\n           P.PART_TYPE,\n           SUBSTR (GET_BLOCK_CODE (P.BLOCK_OID), 1, 12) as BLOCK_CODE,\n           RPT_COPY_COUNT (P.OID) as NUM_EQ_PART,\n           GET_PART_DESC (P.OID, 1) as PART_DESC,\n           SUBSTR (GET_SECT_TP (prf.std_profile_oid), 1, 2) as ELEM_TYPE,\n           SUBSTR (GET_MATERIAL_CODE (PRF.STD_PROFILE_OID, 2), 1, 12) as MATERIAL,\n           PRF.LENGTH * 1000 as LENGTH,\n           GET_PRF_W_HEIGHT (PRF.STD_PROFILE_OID) as WIDTH,\n           GET_PRF_W_THICK (PRF.STD_PROFILE_OID),\n           RPT_GET_PART_WEIGHT (P.OID) as WEIGHT_UNIT,\n           RPT_GET_PART_WEIGHT (P.OID) * RPT_COPY_COUNT (P.OID)  as TOTAL_WEIGHT,\n           SUBSTR (GET_NEST_ID (NP.NESTING_OID, NP.NESTING_BLOCK), 1, 15) as NEST_ID,\n           NP.NUM_PART_NEST,\n           NP.NEST_LENGTH,\n           NP.NEST_WIDTH,\n           NP.NUM_EQ_NEST\n      FROM PRD_EXPL_PART PE, PRD_PART P, PRD_PROFILE PRF, V_RPT_NEST_PART_GROUP NP, PRD_NEST_PART PNP\n     WHERE     PRF.PRD_PART_OID = P.OID AND PE.PRD_PART_OID=PRF.PRD_PART_OID\n           AND PNP.PART_OID=P.OID AND PNP.SYMM_CODE=PE.SYMMETRY AND NP.NESTING_OID = PNP.NESTING_OID\n           AND P.PART_TYPE IN (0,\n                               1,\n                               2,\n                               3,\n                               6)\n    UNION ALL\n    select   PE.OID as PEOID, P.CODE  as PART_CODE,\n     DECODE (PE.SYMMETRY,  0,'P', 1,'S', 2,'C', 3,'') as SYMMETRY,\n           P.PART_TYPE,\n           SUBSTR (GET_BLOCK_CODE (P.BLOCK_OID), 1, 12) as BLOCK_CODE,\n           RPT_COPY_COUNT (P.OID) as NUM_EQ_PART,\n           SUBSTR (GET_PART_DESC (P.OID, 1), 1, 200) as PART_DESC,\n           'PL' as ELEM_TYPE,\n           SUBSTR (GET_MATERIAL_CODE (PA.MATERIAL_OID, 1), 1, 12) as MATERIAL,\n           RPT_INP_GET_PLT_DIMENSIONS (P.OID, 0) * 1000 as LENGTH,\n           RPT_INP_GET_PLT_DIMENSIONS (P.OID, 1) * 1000 as WIDTH,\n           PA.THICKNESS * 1000,\n           RPT_GET_PART_WEIGHT (P.OID) as WEIGHT_UNIT,\n           RPT_GET_PART_WEIGHT (P.OID) * RPT_COPY_COUNT (P.OID) as TOTAL_WEIGHT,\n           SUBSTR (GET_NEST_ID (NP.NESTING_OID, NP.NESTING_BLOCK), 1, 15) as NEST_ID,\n           NP.NUM_PART_NEST,\n           NP.NEST_LENGTH,\n           NP.NEST_WIDTH,\n           NP.NUM_EQ_NEST\n      FROM PRD_EXPL_PART PE, PRD_PART P, INP_PLATE_ATT_DB PA, V_RPT_NEST_PART_GROUP NP, PRD_NEST_PART PNP\n     WHERE     PA.INP_PART_OID = P.OID AND PE.PRD_PART_OID=P.OID\n           AND PNP.PART_OID=P.OID AND PNP.SYMM_CODE=PE.SYMMETRY AND NP.NESTING_OID = PNP.NESTING_OID\n           AND P.PART_TYPE IN (14,\n                               15,\n                               18,\n                               20,\n                               22,\n                               23,\n                               25,\n                               26)\n    UNION ALL\n    select   PE.OID as PEOID, P.CODE  as PART_CODE,\n     DECODE (PE.SYMMETRY,  0,'P', 1,'S', 2,'C', 3,'') as SYMMETRY,\n           P.PART_TYPE,\n           SUBSTR (GET_BLOCK_CODE (P.BLOCK_OID), 1, 12) as BLOCK_CODE,\n           RPT_COPY_COUNT (P.OID) as NUM_EQ_PART,\n           SUBSTR (GET_PART_DESC (P.OID, 1), 1, 200) as PART_DESC,\n           SUBSTR (GET_SECT_TP (prf.std_profile_oid), 1, 2) as ELEM_TYPE,\n           SUBSTR (GET_MATERIAL_CODE (PRF.STD_PROFILE_OID, 2), 1, 12) as MATERIAL,\n           RPT_GET_PART_LENGTH (P.OID) * 1000 as LENGTH,\n           GET_PRF_W_HEIGHT (PRF.STD_PROFILE_OID) as WIDTH,\n           GET_PRF_W_THICK (PRF.STD_PROFILE_OID),\n           RPT_GET_PART_WEIGHT (P.OID) as WEIGHT_UNIT,\n           RPT_GET_PART_WEIGHT (P.OID) * RPT_COPY_COUNT (P.OID) as TOTAL_WEIGHT,\n           SUBSTR (GET_NEST_ID (NP.NESTING_OID, NP.NESTING_BLOCK), 1, 15)  as NEST_ID,\n           NP.NUM_PART_NEST,\n           NP.NEST_LENGTH,\n           NP.NEST_WIDTH,\n           NP.NUM_EQ_NEST\n      FROM PRD_EXPL_PART PE, PRD_PART P, INP_PROFILE_ATT_DB PRF, V_RPT_NEST_PART_GROUP NP, PRD_NEST_PART PNP\n     WHERE     PRF.INP_PART_OID = P.OID AND PE.PRD_PART_OID= P.OID\n           AND PNP.PART_OID=P.OID AND PNP.SYMM_CODE=PE.SYMMETRY AND NP.NESTING_OID = PNP.NESTING_OID\n           AND P.PART_TYPE IN (16,\n                               19,\n                               21,\n                               24)\n    UNION ALL\n    select   PE.OID as PEOID,  P.CODE  as PART_CODE,\n     DECODE (PE.SYMMETRY,  0,'P', 1,'S', 2,'C', 3,'') as SYMMETRY,\n           P.PART_TYPE,\n           SUBSTR (GET_BLOCK_CODE (P.BLOCK_OID), 1, 12) as BLOCK_CODE,\n           RPT_COPY_COUNT (P.OID) as NUM_EQ_PART,\n           SUBSTR (GET_PART_DESC (P.OID, 1), 1, 200) as PART_DESC,\n           SUBSTR (GET_SECT_TP (PRF.STD_SECTION_OID), 1, 2) as ELEM_TYPE,\n           SUBSTR (GET_MATERIAL_CODE (PRF.STD_SECTION_OID, 2), 1, 12) as MATERIAL,\n           RPT_GET_PART_LENGTH (P.OID) * 1000 as LENGTH,\n           GET_PRF_W_HEIGHT (PRF.STD_SECTION_OID) as WIDTH,\n           GET_PRF_W_THICK (PRF.STD_SECTION_OID),\n           RPT_GET_PART_WEIGHT (P.OID) as WEIGHT_UNIT,\n           RPT_GET_PART_WEIGHT (P.OID) * RPT_COPY_COUNT (P.OID) as TOTAL_WEIGHT,\n           SUBSTR (GET_NEST_ID (NP.NESTING_OID, NP.NESTING_BLOCK), 1, 15)  as NEST_ID,\n           NP.NUM_PART_NEST,\n           NP.NEST_LENGTH,\n           NP.NEST_WIDTH,\n           NP.NUM_EQ_NEST\n      FROM PRD_EXPL_PART PE, PRD_PART P, INP_LC_ATT_DB PRF, V_RPT_NEST_PART_GROUP NP, PRD_NEST_PART PNP\n     WHERE     PRF.INP_PART_OID = P.OID AND PE.PRD_PART_OID=  P.OID\n           AND PNP.PART_OID=P.OID AND PNP.SYMM_CODE=PE.SYMMETRY AND NP.NESTING_OID = PNP.NESTING_OID\n           AND P.PART_TYPE = 17\n    UNION ALL\n    select   PE.OID as PEOID, P.CODE  as PART_CODE,\n     DECODE (PE.SYMMETRY,  0,'P', 1,'S', 2,'C', 3,'') as SYMMETRY,\n           P.PART_TYPE,\n           SUBSTR (GET_BLOCK_CODE (P.BLOCK_OID), 1, 12) as BLOCK_CODE,\n           1 as NUM_EQ_PART,\n           GET_PART_DESC (P.OID, 1) as PART_DESC,\n           'PL' as ELEM_TYPE,\n           PA.MATQ as MATERIAL,\n           RPT_AS_GET_PLT_DIMENSIONS (P.OID, 0) * 1000 as LENGTH,\n           RPT_AS_GET_PLT_DIMENSIONS (P.OID, 1) * 1000 as WIDTH,\n           PA.THICKNESS,\n           PE.WEIGHT as WEIGHT_UNIT,\n           PE.WEIGHT as TOTAL_WEIGHT,\n           SUBSTR (GET_NEST_ID (NP.NESTING_OID, NP.NESTING_BLOCK), 1, 15)  as NEST_ID,\n           NP.NUM_PART_NEST,\n           NP.NEST_LENGTH,\n           NP.NEST_WIDTH,\n           NP.NUM_EQ_NEST\n      FROM PRD_PART               P,\n           AS_STD_PART_PLATE      PA,\n           V_RPT_NEST_PART_GROUP  NP,\n           PRD_EXPL_PART          PE , PRD_NEST_PART PNP\n     WHERE     PA.OID = P.OID\n           AND PNP.PART_OID=P.OID AND PNP.SYMM_CODE=PE.SYMMETRY AND NP.NESTING_OID = PNP.NESTING_OID\n           AND PE.PRD_PART_OID = P.OID\n           AND P.PART_TYPE = 12\n    UNION ALL\n    select   PE.OID as PEOID,  P.CODE  as PART_CODE,\n     DECODE (PE.SYMMETRY,  0,'P', 1,'S', 2,'C', 3,'') as SYMMETRY,\n           P.PART_TYPE,\n           SUBSTR (GET_BLOCK_CODE (P.BLOCK_OID), 1, 12) as BLOCK_CODE,\n           1 as NUM_EQ_PART,\n           GET_PART_DESC (P.OID, 1) as PART_DESC,\n           'PL' as ELEM_TYPE,\n           PA.MATQ as MATERIAL,\n           RPT_AS_GET_PLT_DIMENSIONS (P.OID, 0) * 1000 as LENGTH,\n           RPT_AS_GET_PLT_DIMENSIONS (P.OID, 1) * 1000 as WIDTH,\n           PA.THICKNESS,\n           PE.WEIGHT as WEIGHT_UNIT,\n           PE.WEIGHT as TOTAL_WEIGHT,\n           SUBSTR (GET_NEST_ID (NP.NESTING_OID, NP.NESTING_BLOCK), 1, 15)  as NEST_ID,\n           NP.NUM_PART_NEST,\n           NP.NEST_LENGTH,\n           NP.NEST_WIDTH,\n           NP.NUM_EQ_NEST\n      FROM PRD_PART               P,\n           AS_PART_CONT_PLATE     PA,\n           V_RPT_NEST_PART_GROUP  NP,\n           PRD_EXPL_PART          PE, PRD_NEST_PART PNP\n     WHERE     PA.OID = P.OID\n           AND PNP.PART_OID=P.OID AND PNP.SYMM_CODE=PE.SYMMETRY AND NP.NESTING_OID = PNP.NESTING_OID\n           AND PE.PRD_PART_OID = P.OID\n           AND P.PART_TYPE = 12\n    UNION ALL\n    select   PE.OID as PEOID,  P.CODE  as PART_CODE,\n     DECODE (PE.SYMMETRY,  0,'P', 1,'S', 2,'C', 3,'') as SYMMETRY,\n           P.PART_TYPE,\n           SUBSTR (GET_BLOCK_CODE (P.BLOCK_OID), 1, 12) as BLOCK_CODE,\n           1 as NUM_EQ_PART,\n           GET_PART_DESC (P.OID, 1) as PART_DESC,\n           DECODE (STD.SECTION,\n                   -1, '',\n                   0, 'FS',\n                   1, 'AS',\n                   2, 'IS',\n                   3, 'TS',\n                   4, 'US',\n                   5, 'BS',\n                   6, 'ST',\n                   7, 'AT',\n                   8, 'OS',\n                   9, 'PS',\n                   10, 'RS',\n                   11, 'MC',\n                   12, 'DB',\n                   13, 'SR',\n                   14, 'HR',\n                   15, 'LI',\n                   16, 'ZL',\n                   17, 'TL',\n                   '') as ELEM_TYPE,\n           SUBSTR (GET_MATERIAL_CODE (STD.MATERIAL_OID, 1), 1, 12) as MATERIAL,\n           PRF.LENGTH as LENGTH,\n           STD.WEB_HEIGHT as WIDTH,\n           STD.WEB_THICKNESS,\n           PE.WEIGHT as WEIGHT_UNIT,\n           PE.WEIGHT as TOTAL_WEIGHT,\n           SUBSTR (GET_NEST_ID (NP.NESTING_OID, NP.NESTING_BLOCK), 1, 15)  as NEST_ID,\n           NP.NUM_PART_NEST,\n           NP.NEST_LENGTH,\n           NP.NEST_WIDTH,\n           NP.NUM_EQ_NEST\n      FROM PRD_PART               P,\n           AS_STD_PART_PROF       PRF,\n           V_RPT_NEST_PART_GROUP  NP,\n           STD_PROFILE            STD,\n           PRD_EXPL_PART          PE, PRD_NEST_PART PNP\n     WHERE     PRF.OID = P.OID\n           AND PE.PRD_PART_OID = P.OID\n           AND STD.KSE = PRF.KSE\n           AND PNP.PART_OID=P.OID AND PNP.SYMM_CODE=PE.SYMMETRY AND NP.NESTING_OID = PNP.NESTING_OID\n           AND P.PART_TYPE = 7\n    UNION ALL\n    select   PE.OID as PEOID,  P.CODE  as PART_CODE,\n     DECODE (PE.SYMMETRY,  0,'P', 1,'S', 2,'C', 3,'') as SYMMETRY,\n           P.PART_TYPE,\n           SUBSTR (GET_BLOCK_CODE (P.BLOCK_OID), 1, 12) as BLOCK_CODE,\n           RPT_COPY_COUNT (P.OID) as NUM_EQ_PART,\n           GET_PART_DESC (P.OID, 1) as PART_DESC,\n           'PL' as ELEM_TYPE,\n           SUBSTR (GET_MATERIAL_CODE (PA.MATERIAL_OID, 1), 1, 12) as MATERIAL,\n           RPT_GET_SD_PLATE_DIM (P.OID, 0) as LENGTH,\n           RPT_GET_SD_PLATE_DIM (P.OID, 1) as WIDTH,\n           PA.THICKNESS,\n           RPT_GET_PART_WEIGHT (P.OID) as WEIGHT_UNIT,\n           RPT_GET_PART_WEIGHT (P.OID) * RPT_COPY_COUNT (P.OID) as TOTAL_WEIGHT,\n           NULL  as NEST_ID,\n           0,\n           0,\n           0,\n           0\n      FROM V_RPT_PART_NO_NESTING_SD P, V_RPT_SHDK_PLATE_ATT PA,PRD_EXPL_PART          PE\n     WHERE PA.PRD_PART_OID = P.OID AND PE.PRD_PART_OID=  P.OID\n    UNION ALL\n    select   PE.OID as PEOID,  P.CODE  as PART_CODE,\n     DECODE (PE.SYMMETRY,  0,'P', 1,'S', 2,'C', 3,'') as SYMMETRY,\n           P.PART_TYPE,\n           SUBSTR (GET_BLOCK_CODE (P.BLOCK_OID), 1, 12) as BLOCK_CODE,\n           RPT_COPY_COUNT (P.OID) as NUM_EQ_PART,\n           GET_PART_DESC (P.OID, 1) as PART_DESC,\n           SUBSTR (GET_SECT_TP (prf.std_profile_oid), 1, 2) as ELEM_TYPE,\n           SUBSTR (GET_MATERIAL_CODE (PRF.STD_PROFILE_OID, 2), 1, 12) as MATERIAL,\n           PRF.LENGTH * 1000 as LENGTH,\n           GET_PRF_W_HEIGHT (PRF.STD_PROFILE_OID) as WIDTH,\n           GET_PRF_W_THICK (PRF.STD_PROFILE_OID),\n           RPT_GET_PART_WEIGHT (P.OID) as WEIGHT_UNIT,\n           RPT_GET_PART_WEIGHT (P.OID) * RPT_COPY_COUNT (P.OID) as TOTAL_WEIGHT,\n           NULL  as NEST_ID,\n           0,\n           0,\n           0,\n           0\n      FROM PRD_EXPL_PART PE, V_PRD_PART_NO_NESTING P, PRD_PROFILE PRF\n     WHERE     PRF.PRD_PART_OID = P.OID AND PE.PRD_PART_OID=  P.OID\n           AND P.PART_TYPE IN (0,\n                               1,\n                               2,\n                               3,\n                               6)\n    UNION ALL\n    select   PE.OID as PEOID,  P.CODE  as PART_CODE,\n     DECODE (PE.SYMMETRY,  0,'P', 1,'S', 2,'C', 3,'') as SYMMETRY,\n           P.PART_TYPE,\n           SUBSTR (GET_BLOCK_CODE (P.BLOCK_OID), 1, 12) as BLOCK_CODE,\n           RPT_COPY_COUNT (P.OID) as NUM_EQ_PART,\n           SUBSTR (GET_PART_DESC (P.OID, 1), 1, 200) as PART_DESC,\n           'PL' as ELEM_TYPE,\n           SUBSTR (GET_MATERIAL_CODE (PA.MATERIAL_OID, 1), 1, 12) as MATERIAL,\n           RPT_INP_GET_PLT_DIMENSIONS (INP_PART_OID, 0) * 1000 as LENGTH,\n           RPT_INP_GET_PLT_DIMENSIONS (INP_PART_OID, 1) * 1000 as WIDTH,\n           PA.THICKNESS * 1000,\n           RPT_GET_PART_WEIGHT (P.OID) as WEIGHT_UNIT,\n           RPT_GET_PART_WEIGHT (P.OID) * RPT_COPY_COUNT (P.OID) as TOTAL_WEIGHT,\n           NULL  as NEST_ID,\n           0,\n           0,\n           0,\n           0\n      FROM PRD_EXPL_PART PE,V_PRD_PART_NO_NESTING P, INP_PLATE_ATT_DB PA\n     WHERE     PA.INP_PART_OID = P.OID AND PE.PRD_PART_OID=  P.OID\n           AND P.PART_TYPE IN (14,\n                               15,\n                               18,\n                               20,\n                               22,\n                               23,\n                               25,\n                               26)\n    UNION ALL\n    select   PE.OID as PEOID,  P.CODE  as PART_CODE,\n     DECODE (PE.SYMMETRY,  0,'P', 1,'S', 2,'C', 3,'') as SYMMETRY,\n           P.PART_TYPE,\n           SUBSTR (GET_BLOCK_CODE (P.BLOCK_OID), 1, 12) as BLOCK_CODE,\n           RPT_COPY_COUNT (P.OID) as NUM_EQ_PART,\n           SUBSTR (GET_PART_DESC (P.OID, 1), 1, 200) as PART_DESC,\n           SUBSTR (GET_SECT_TP (prf.std_profile_oid), 1, 2) as ELEM_TYPE,\n           SUBSTR (GET_MATERIAL_CODE (PRF.STD_PROFILE_OID, 2), 1, 12) as MATERIAL,\n           RPT_GET_PART_LENGTH (P.OID) * 1000 as LENGTH,\n           GET_PRF_W_HEIGHT (PRF.STD_PROFILE_OID) as WIDTH,\n           GET_PRF_W_THICK (PRF.STD_PROFILE_OID),\n           RPT_GET_PART_WEIGHT (P.OID) as WEIGHT_UNIT,\n           RPT_GET_PART_WEIGHT (P.OID) * RPT_COPY_COUNT (P.OID) as TOTAL_WEIGHT,\n           NULL  as NEST_ID,\n           0,\n           0,\n           0,\n           0\n      FROM PRD_EXPL_PART PE,V_PRD_PART_NO_NESTING P, INP_PROFILE_ATT_DB PRF\n     WHERE     PRF.INP_PART_OID = P.OID AND PE.PRD_PART_OID=  P.OID\n           AND P.PART_TYPE IN (16,\n                               19,\n                               21,\n                               24)\n    UNION ALL\n    select   PE.OID as PEOID,  P.CODE  as PART_CODE,\n     DECODE (PE.SYMMETRY,  0,'P', 1,'S', 2,'C', 3,'') as SYMMETRY,\n           P.PART_TYPE,\n           SUBSTR (GET_BLOCK_CODE (P.BLOCK_OID), 1, 12) as BLOCK_CODE,\n           RPT_COPY_COUNT (P.OID) as NUM_EQ_PART,\n           SUBSTR (GET_PART_DESC (P.OID, 1), 1, 200) as PART_DESC,\n           SUBSTR (GET_SECT_TP (PRF.STD_SECTION_OID), 1, 2) as ELEM_TYPE,\n           SUBSTR (GET_MATERIAL_CODE (PRF.STD_SECTION_OID, 2), 1, 12) as MATERIAL,\n           RPT_GET_PART_LENGTH (P.OID) * 1000 as LENGTH,\n           GET_PRF_W_HEIGHT (PRF.STD_SECTION_OID) as WIDTH,\n           GET_PRF_W_THICK (PRF.STD_SECTION_OID),\n           RPT_GET_PART_WEIGHT (P.OID) as WEIGHT_UNIT,\n           RPT_GET_PART_WEIGHT (P.OID) * RPT_COPY_COUNT (P.OID) as TOTAL_WEIGHT,\n           NULL  as NEST_ID,\n           0,\n           0,\n           0,\n           0\n      FROM PRD_EXPL_PART PE,V_PRD_PART_NO_NESTING P, INP_LC_ATT_DB PRF\n     WHERE PRF.INP_PART_OID = P.OID AND P.PART_TYPE = 17 AND PE.PRD_PART_OID=  P.OID\n    UNION ALL\n    select   PE.OID as PEOID,  P.CODE,\n     DECODE (PE.SYMMETRY,  0,'P', 1,'S', 2,'C', 3,'') as SYMMETRY,\n           P.PART_TYPE,\n           SUBSTR (GET_BLOCK_CODE (P.BLOCK_OID), 1, 12) as BLOCK_CODE,\n           1 as NUM_EQ_PART,\n           GET_PART_DESC (P.OID, 1) as PART_DESC,\n           'PL' as ELEM_TYPE,\n           PA.MATQ as MATERIAL,\n           RPT_AS_GET_PLT_DIMENSIONS (P.OID, 0) * 1000 as LENGTH,\n           RPT_AS_GET_PLT_DIMENSIONS (P.OID, 1) * 1000 as WIDTH,\n           PA.THICKNESS,\n           PE.WEIGHT as WEIGHT_UNIT,\n           PE.WEIGHT as TOTAL_WEIGHT,\n           NULL  as NEST_ID,\n           0,\n           0,\n           0,\n           0\n      FROM V_PRD_PART_NO_NESTING P, AS_STD_PART_PLATE PA, PRD_EXPL_PART PE\n     WHERE PA.OID = P.OID AND PE.PRD_PART_OID = P.OID AND P.PART_TYPE = 12\n    UNION ALL\n    select   PE.OID as PEOID,  P.CODE as PART_CODE,\n     DECODE (PE.SYMMETRY,  0,'P', 1,'S', 2,'C', 3,'') as SYMMETRY,\n           P.PART_TYPE,\n           SUBSTR (GET_BLOCK_CODE (P.BLOCK_OID), 1, 12),\n           1 as NUM_EQ_PART,\n           GET_PART_DESC (P.OID, 1) as PART_DESC,\n           'PL' as ELEM_TYPE,\n           PA.MATQ as MATERIAL,\n           RPT_AS_GET_PLT_DIMENSIONS (P.OID, 0) * 1000 as LENGTH,\n           RPT_AS_GET_PLT_DIMENSIONS (P.OID, 1) * 1000 as WIDTH,\n           PA.THICKNESS,\n           PE.WEIGHT as WEIGHT_UNIT,\n           PE.WEIGHT as TOTAL_WEIGHT,\n           NULL  as NEST_ID,\n           0,\n           0,\n           0,\n           0\n      FROM V_PRD_PART_NO_NESTING P, AS_PART_CONT_PLATE PA, PRD_EXPL_PART PE\n     WHERE PA.OID = P.OID AND PE.PRD_PART_OID = P.OID AND P.PART_TYPE = 12\n    UNION ALL\n    select   PE.OID as PEOID, P.CODE as PART_CODE,\n     DECODE (PE.SYMMETRY,  0,'P', 1,'S', 2,'C', 3,'') as SYMMETRY,\n           P.PART_TYPE,\n           SUBSTR (GET_BLOCK_CODE (P.BLOCK_OID), 1, 12) as BLOCK_CODE,\n           1 as NUM_EQ_PART,\n           GET_PART_DESC (P.OID, 1) as PART_DESC,\n           DECODE (STD.SECTION,\n                   -1, '',\n                   0, 'FS',\n                   1, 'AS',\n                   2, 'IS',\n                   3, 'TS',\n                   4, 'US',\n                   5, 'BS',\n                   6, 'ST',\n                   7, 'AT',\n                   8, 'OS',\n                   9, 'PS',\n                   10, 'RS',\n                   11, 'MC',\n                   12, 'DB',\n                   13, 'SR',\n                   14, 'HR',\n                   15, 'LI',\n                   16, 'ZL',\n                   17, 'TL',\n                   '') as ELEM_TYPE,\n           SUBSTR (GET_MATERIAL_CODE (STD.MATERIAL_OID, 1), 1, 12) as MATERIAL,\n           PRF.LENGTH as LENGTH,\n           STD.WEB_HEIGHT as WIDTH,\n           STD.WEB_THICKNESS,\n           PE.WEIGHT as WEIGHT_UNIT,\n           PE.WEIGHT as TOTAL_WEIGHT,\n           NULL  as NEST_ID,\n           0,\n           0,\n           0,\n           0\n      FROM V_PRD_PART_NO_NESTING  P,\n           AS_STD_PART_PROF       PRF,\n           STD_PROFILE            STD,\n           PRD_EXPL_PART          PE\n     WHERE     PRF.OID = P.OID\n           AND PE.PRD_PART_OID = P.OID\n           AND STD.KSE = PRF.KSE\n           AND P.PART_TYPE = 7\n\n)\n) PNL, BLOCK B\nwhere \nPNL.BLOCK_CODE=B.CODE AND\nB.DESCRIPTION like '%${drNum}%' \norder by PNL.PART_CODE,PNL.SYMMETRY"

  //private def partsByDrawingNum(drNum: String): String = s"select distinct\n(select OID from V_PRD_PART where BLOCK_NAME=P.BLOCK_CODE AND PART_NAME=P.PART_CODE) as PART_OID,\nP.PEOID as EXPL_OID,\nP.PART_CODE,\nP.SYMMETRY,\nP.PART_TYPE,\nP.BLOCK_CODE,\nP.BLOCK_CODE as DESCRIPTION,\nP.NUM_EQ_PART,\nP.PART_DESC,\nP.ELEM_TYPE,\nP.MATERIAL,\nP.LENGTH,\nP.WIDTH,\nP.THICKNESS,\nP.WEIGHT_UNIT,\nP.TOTAL_WEIGHT,\nP.NEST_ID,\nP.NEST_LENGTH,\nP.NEST_WIDTH,\nP.NUM_EQ_NEST,\n(select KSE_KPL from V_PRD_PLPRF_MAT where NEST_ID=P.NEST_ID) as KSE_KPL,\n(select STOCK_CODE0 from STD_PROFILE where kse=(select KSE_KPL from V_PRD_PLPRF_MAT where NEST_ID=P.NEST_ID)) as STOCK1,\n(select STORAGE_CODE from STD_PLATE where kpl=(select KSE_KPL from V_PRD_PLPRF_MAT where NEST_ID=P.NEST_ID)) as STOCK2\nfrom\n(\n select      \n PE.OID as PEOID,\n P.CODE as PART_CODE,\n           DECODE (PE.SYMMETRY,  0,'P', 1,'S', 2,'C', 3,'') as SYMMETRY,\n           P.PART_TYPE,\n           B.CODE as BLOCK_CODE,\n           RPT_COPY_COUNT (P.OID) as NUM_EQ_PART,\n           GET_PART_DESC (P.OID, 1) as PART_DESC,\n           'PL' as ELEM_TYPE,\n           SUBSTR (GET_MATERIAL_CODE (PA.MATERIAL_OID, 1), 1, 12) as MATERIAL,\n           RPT_GET_SD_PLATE_DIM (P.OID, 0) as LENGTH,\n           RPT_GET_SD_PLATE_DIM (P.OID, 1) as WIDTH,\n           PA.THICKNESS,\n           RPT_GET_PART_WEIGHT (P.OID) as WEIGHT_UNIT,\n           RPT_GET_PART_WEIGHT (P.OID) * RPT_COPY_COUNT (P.OID) as TOTAL_WEIGHT,\n           SUBSTR (GET_NEST_ID (NP.NESTING_OID, NP.NESTING_BLOCK), 1, 15) as NEST_ID ,\n           NP.NUM_PART_NEST,\n           NP.NEST_LENGTH,\n           NP.NEST_WIDTH,\n           NP.NUM_EQ_NEST\n      FROM PRD_EXPL_PART PE,  PRD_PART P, V_RPT_SHDK_PLATE_ATT PA, V_RPT_NEST_PART_GROUP NP, PRD_NEST_PART PNP, BLOCK B\n     WHERE     PA.PRD_PART_OID = P.OID AND PE.PRD_PART_OID =PA.PRD_PART_OID\n           AND PNP.PART_OID=P.OID AND PNP.SYMM_CODE=PE.SYMMETRY AND NP.NESTING_OID = PNP.NESTING_OID\n           AND P.PART_TYPE IN (9, 10)\n           AND P.BLOCK_OID=B.OID\n           and B.DESCRIPTION like '%${drNum}%' \n           \nUNION ALL\n    select    PE.OID as PEOID, P.CODE  as PART_CODE,\n     DECODE (PE.SYMMETRY,  0,'P', 1,'S', 2,'C', 3,'') as SYMMETRY,\n           P.PART_TYPE,\n           B.CODE as BLOCK_CODE,\n           RPT_COPY_COUNT (P.OID) as NUM_EQ_PART,\n           GET_PART_DESC (P.OID, 1) as PART_DESC,\n           SUBSTR (GET_SECT_TP (prf.std_profile_oid), 1, 2) as ELEM_TYPE,\n           SUBSTR (GET_MATERIAL_CODE (PRF.STD_PROFILE_OID, 2), 1, 12) as MATERIAL,\n           PRF.LENGTH * 1000 as LENGTH,\n           GET_PRF_W_HEIGHT (PRF.STD_PROFILE_OID) as WIDTH,\n           GET_PRF_W_THICK (PRF.STD_PROFILE_OID),\n           RPT_GET_PART_WEIGHT (P.OID) as WEIGHT_UNIT,\n           RPT_GET_PART_WEIGHT (P.OID) * RPT_COPY_COUNT (P.OID)  as TOTAL_WEIGHT,\n           SUBSTR (GET_NEST_ID (NP.NESTING_OID, NP.NESTING_BLOCK), 1, 15) as NEST_ID,\n           NP.NUM_PART_NEST,\n           NP.NEST_LENGTH,\n           NP.NEST_WIDTH,\n           NP.NUM_EQ_NEST\n      FROM PRD_EXPL_PART PE, PRD_PART P, PRD_PROFILE PRF, V_RPT_NEST_PART_GROUP NP, PRD_NEST_PART PNP, BLOCK B\n     WHERE     PRF.PRD_PART_OID = P.OID AND PE.PRD_PART_OID=PRF.PRD_PART_OID\n           AND PNP.PART_OID=P.OID AND PNP.SYMM_CODE=PE.SYMMETRY AND NP.NESTING_OID = PNP.NESTING_OID\n           AND P.PART_TYPE IN (0,\n                               1,\n                               2,\n                               3,\n                               6)\n                               AND P.BLOCK_OID=B.OID\n          and B.DESCRIPTION like '%${drNum}%' \nUNION ALL\nselect   PE.OID as PEOID, P.CODE  as PART_CODE,\n     DECODE (PE.SYMMETRY,  0,'P', 1,'S', 2,'C', 3,'') as SYMMETRY,\n           P.PART_TYPE,\n            B.CODE as BLOCK_CODE,\n           RPT_COPY_COUNT (P.OID) as NUM_EQ_PART,\n           SUBSTR (GET_PART_DESC (P.OID, 1), 1, 200) as PART_DESC,\n           'PL' as ELEM_TYPE,\n           SUBSTR (GET_MATERIAL_CODE (PA.MATERIAL_OID, 1), 1, 12) as MATERIAL,\n           RPT_INP_GET_PLT_DIMENSIONS (P.OID, 0) * 1000 as LENGTH,\n           RPT_INP_GET_PLT_DIMENSIONS (P.OID, 1) * 1000 as WIDTH,\n           PA.THICKNESS * 1000,\n           RPT_GET_PART_WEIGHT (P.OID) as WEIGHT_UNIT,\n           RPT_GET_PART_WEIGHT (P.OID) * RPT_COPY_COUNT (P.OID) as TOTAL_WEIGHT,\n           SUBSTR (GET_NEST_ID (NP.NESTING_OID, NP.NESTING_BLOCK), 1, 15) as NEST_ID,\n           NP.NUM_PART_NEST,\n           NP.NEST_LENGTH,\n           NP.NEST_WIDTH,\n           NP.NUM_EQ_NEST\n      FROM PRD_EXPL_PART PE, PRD_PART P, INP_PLATE_ATT_DB PA, V_RPT_NEST_PART_GROUP NP, PRD_NEST_PART PNP, BLOCK B\n     WHERE     PA.INP_PART_OID = P.OID AND PE.PRD_PART_OID=P.OID\n           AND PNP.PART_OID=P.OID AND PNP.SYMM_CODE=PE.SYMMETRY AND NP.NESTING_OID = PNP.NESTING_OID\n           AND P.PART_TYPE IN (14,\n                               15,\n                               18,\n                               20,\n                               22,\n                               23,\n                               25,\n                               26)\n                               AND P.BLOCK_OID=B.OID\n          and B.DESCRIPTION like '%${drNum}%' \nUNION ALL\nselect   PE.OID as PEOID, P.CODE  as PART_CODE,\n     DECODE (PE.SYMMETRY,  0,'P', 1,'S', 2,'C', 3,'') as SYMMETRY,\n           P.PART_TYPE,\n            B.CODE as BLOCK_CODE,\n           RPT_COPY_COUNT (P.OID) as NUM_EQ_PART,\n           SUBSTR (GET_PART_DESC (P.OID, 1), 1, 200) as PART_DESC,\n           'PL' as ELEM_TYPE,\n           SUBSTR (GET_MATERIAL_CODE (PA.MATERIAL_OID, 1), 1, 12) as MATERIAL,\n           RPT_INP_GET_PLT_DIMENSIONS (P.OID, 0) * 1000 as LENGTH,\n           RPT_INP_GET_PLT_DIMENSIONS (P.OID, 1) * 1000 as WIDTH,\n           PA.THICKNESS * 1000,\n           RPT_GET_PART_WEIGHT (P.OID) as WEIGHT_UNIT,\n           RPT_GET_PART_WEIGHT (P.OID) * RPT_COPY_COUNT (P.OID) as TOTAL_WEIGHT,\n           SUBSTR (GET_NEST_ID (NP.NESTING_OID, NP.NESTING_BLOCK), 1, 15) as NEST_ID,\n           NP.NUM_PART_NEST,\n           NP.NEST_LENGTH,\n           NP.NEST_WIDTH,\n           NP.NUM_EQ_NEST\n      FROM PRD_EXPL_PART PE, PRD_PART P, INP_PLATE_ATT_DB PA, V_RPT_NEST_PART_GROUP NP, PRD_NEST_PART PNP, BLOCK B\n     WHERE     PA.INP_PART_OID = P.OID AND PE.PRD_PART_OID=P.OID\n           AND PNP.PART_OID=P.OID AND PNP.SYMM_CODE=PE.SYMMETRY AND NP.NESTING_OID = PNP.NESTING_OID\n           AND P.PART_TYPE IN (14,\n                               15,\n                               18,\n                               20,\n                               22,\n                               23,\n                               25,\n                               26)\n                               AND P.BLOCK_OID=B.OID\n          and B.DESCRIPTION like '%${drNum}%' \nUNION ALL\nselect   PE.OID as PEOID,  P.CODE  as PART_CODE,\n     DECODE (PE.SYMMETRY,  0,'P', 1,'S', 2,'C', 3,'') as SYMMETRY,\n           P.PART_TYPE,\n           B.CODE as BLOCK_CODE,\n           RPT_COPY_COUNT (P.OID) as NUM_EQ_PART,\n           SUBSTR (GET_PART_DESC (P.OID, 1), 1, 200) as PART_DESC,\n           SUBSTR (GET_SECT_TP (PRF.STD_SECTION_OID), 1, 2) as ELEM_TYPE,\n           SUBSTR (GET_MATERIAL_CODE (PRF.STD_SECTION_OID, 2), 1, 12) as MATERIAL,\n           RPT_GET_PART_LENGTH (P.OID) * 1000 as LENGTH,\n           GET_PRF_W_HEIGHT (PRF.STD_SECTION_OID) as WIDTH,\n           GET_PRF_W_THICK (PRF.STD_SECTION_OID),\n           RPT_GET_PART_WEIGHT (P.OID) as WEIGHT_UNIT,\n           RPT_GET_PART_WEIGHT (P.OID) * RPT_COPY_COUNT (P.OID) as TOTAL_WEIGHT,\n           SUBSTR (GET_NEST_ID (NP.NESTING_OID, NP.NESTING_BLOCK), 1, 15)  as NEST_ID,\n           NP.NUM_PART_NEST,\n           NP.NEST_LENGTH,\n           NP.NEST_WIDTH,\n           NP.NUM_EQ_NEST\n      FROM PRD_EXPL_PART PE, PRD_PART P, INP_LC_ATT_DB PRF, V_RPT_NEST_PART_GROUP NP, PRD_NEST_PART PNP, BLOCK B\n     WHERE     PRF.INP_PART_OID = P.OID AND PE.PRD_PART_OID=  P.OID\n           AND PNP.PART_OID=P.OID AND PNP.SYMM_CODE=PE.SYMMETRY AND NP.NESTING_OID = PNP.NESTING_OID\n           AND P.PART_TYPE = 17 AND P.BLOCK_OID=B.OID\n          and B.DESCRIPTION like '%${drNum}%' \nUNION ALL\n select   PE.OID as PEOID, P.CODE  as PART_CODE,\n     DECODE (PE.SYMMETRY,  0,'P', 1,'S', 2,'C', 3,'') as SYMMETRY,\n           P.PART_TYPE,\n            B.CODE as BLOCK_CODE,\n           1 as NUM_EQ_PART,\n           GET_PART_DESC (P.OID, 1) as PART_DESC,\n           'PL' as ELEM_TYPE,\n           PA.MATQ as MATERIAL,\n           RPT_AS_GET_PLT_DIMENSIONS (P.OID, 0) * 1000 as LENGTH,\n           RPT_AS_GET_PLT_DIMENSIONS (P.OID, 1) * 1000 as WIDTH,\n           PA.THICKNESS,\n           PE.WEIGHT as WEIGHT_UNIT,\n           PE.WEIGHT as TOTAL_WEIGHT,\n           SUBSTR (GET_NEST_ID (NP.NESTING_OID, NP.NESTING_BLOCK), 1, 15)  as NEST_ID,\n           NP.NUM_PART_NEST,\n           NP.NEST_LENGTH,\n           NP.NEST_WIDTH,\n           NP.NUM_EQ_NEST\n      FROM PRD_PART               P,\n           AS_STD_PART_PLATE      PA,\n           V_RPT_NEST_PART_GROUP  NP,\n           PRD_EXPL_PART          PE , PRD_NEST_PART PNP , BLOCK B\n     WHERE     PA.OID = P.OID\n           AND PNP.PART_OID=P.OID AND PNP.SYMM_CODE=PE.SYMMETRY AND NP.NESTING_OID = PNP.NESTING_OID\n           AND PE.PRD_PART_OID = P.OID\n           AND P.PART_TYPE = 12 AND P.BLOCK_OID=B.OID\n          and B.DESCRIPTION like '%${drNum}%' \nUNION ALL\nselect   PE.OID as PEOID,  P.CODE  as PART_CODE,\n     DECODE (PE.SYMMETRY,  0,'P', 1,'S', 2,'C', 3,'') as SYMMETRY,\n           P.PART_TYPE,\n            B.CODE as BLOCK_CODE,\n           1 as NUM_EQ_PART,\n           GET_PART_DESC (P.OID, 1) as PART_DESC,\n           DECODE (STD.SECTION,\n                   -1, '',\n                   0, 'FS',\n                   1, 'AS',\n                   2, 'IS',\n                   3, 'TS',\n                   4, 'US',\n                   5, 'BS',\n                   6, 'ST',\n                   7, 'AT',\n                   8, 'OS',\n                   9, 'PS',\n                   10, 'RS',\n                   11, 'MC',\n                   12, 'DB',\n                   13, 'SR',\n                   14, 'HR',\n                   15, 'LI',\n                   16, 'ZL',\n                   17, 'TL',\n                   '') as ELEM_TYPE,\n           SUBSTR (GET_MATERIAL_CODE (STD.MATERIAL_OID, 1), 1, 12) as MATERIAL,\n           PRF.LENGTH as LENGTH,\n           STD.WEB_HEIGHT as WIDTH,\n           STD.WEB_THICKNESS,\n           PE.WEIGHT as WEIGHT_UNIT,\n           PE.WEIGHT as TOTAL_WEIGHT,\n           SUBSTR (GET_NEST_ID (NP.NESTING_OID, NP.NESTING_BLOCK), 1, 15)  as NEST_ID,\n           NP.NUM_PART_NEST,\n           NP.NEST_LENGTH,\n           NP.NEST_WIDTH,\n           NP.NUM_EQ_NEST\n      FROM PRD_PART               P,\n           AS_STD_PART_PROF       PRF,\n           V_RPT_NEST_PART_GROUP  NP,\n           STD_PROFILE            STD,\n           PRD_EXPL_PART          PE, PRD_NEST_PART PNP, BLOCK B\n     WHERE     PRF.OID = P.OID\n           AND PE.PRD_PART_OID = P.OID\n           AND STD.KSE = PRF.KSE\n           AND PNP.PART_OID=P.OID AND PNP.SYMM_CODE=PE.SYMMETRY AND NP.NESTING_OID = PNP.NESTING_OID\n           AND P.PART_TYPE = 7 AND P.BLOCK_OID=B.OID\n          and B.DESCRIPTION like '%${drNum}%' \nUNION ALL\n select   PE.OID as PEOID,  P.CODE  as PART_CODE,\n     DECODE (PE.SYMMETRY,  0,'P', 1,'S', 2,'C', 3,'') as SYMMETRY,\n           P.PART_TYPE,\n            B.CODE as BLOCK_CODE,\n           RPT_COPY_COUNT (P.OID) as NUM_EQ_PART,\n           GET_PART_DESC (P.OID, 1) as PART_DESC,\n           'PL' as ELEM_TYPE,\n           SUBSTR (GET_MATERIAL_CODE (PA.MATERIAL_OID, 1), 1, 12) as MATERIAL,\n           RPT_GET_SD_PLATE_DIM (P.OID, 0) as LENGTH,\n           RPT_GET_SD_PLATE_DIM (P.OID, 1) as WIDTH,\n           PA.THICKNESS,\n           RPT_GET_PART_WEIGHT (P.OID) as WEIGHT_UNIT,\n           RPT_GET_PART_WEIGHT (P.OID) * RPT_COPY_COUNT (P.OID) as TOTAL_WEIGHT,\n           NULL  as NEST_ID,\n           0,\n           0,\n           0,\n           0\n      FROM V_RPT_PART_NO_NESTING_SD P, V_RPT_SHDK_PLATE_ATT PA,PRD_EXPL_PART PE, BLOCK B\n     WHERE PA.PRD_PART_OID = P.OID AND PE.PRD_PART_OID=  P.OID AND P.BLOCK_OID=B.OID\n          and B.DESCRIPTION like '%${drNum}%' \nUNION ALL\n    select   PE.OID as PEOID,  P.CODE  as PART_CODE,\n     DECODE (PE.SYMMETRY,  0,'P', 1,'S', 2,'C', 3,'') as SYMMETRY,\n           P.PART_TYPE,\n          B.CODE as BLOCK_CODE,\n           RPT_COPY_COUNT (P.OID) as NUM_EQ_PART,\n           GET_PART_DESC (P.OID, 1) as PART_DESC,\n           SUBSTR (GET_SECT_TP (prf.std_profile_oid), 1, 2) as ELEM_TYPE,\n           SUBSTR (GET_MATERIAL_CODE (PRF.STD_PROFILE_OID, 2), 1, 12) as MATERIAL,\n           PRF.LENGTH * 1000 as LENGTH,\n           GET_PRF_W_HEIGHT (PRF.STD_PROFILE_OID) as WIDTH,\n           GET_PRF_W_THICK (PRF.STD_PROFILE_OID),\n           RPT_GET_PART_WEIGHT (P.OID) as WEIGHT_UNIT,\n           RPT_GET_PART_WEIGHT (P.OID) * RPT_COPY_COUNT (P.OID) as TOTAL_WEIGHT,\n           NULL  as NEST_ID,\n           0,\n           0,\n           0,\n           0\n      FROM PRD_EXPL_PART PE, V_PRD_PART_NO_NESTING P, PRD_PROFILE PRF, BLOCK B\n     WHERE     PRF.PRD_PART_OID = P.OID AND PE.PRD_PART_OID=  P.OID\n           AND P.PART_TYPE IN (0,\n                               1,\n                               2,\n                               3,\n                               6)AND P.BLOCK_OID=B.OID\n          and B.DESCRIPTION like '%${drNum}%' \nUNION ALL\n    select   PE.OID as PEOID,  P.CODE  as PART_CODE,\n     DECODE (PE.SYMMETRY,  0,'P', 1,'S', 2,'C', 3,'') as SYMMETRY,\n           P.PART_TYPE,\n            B.CODE as BLOCK_CODE,\n           RPT_COPY_COUNT (P.OID) as NUM_EQ_PART,\n           SUBSTR (GET_PART_DESC (P.OID, 1), 1, 200) as PART_DESC,\n           'PL' as ELEM_TYPE,\n           SUBSTR (GET_MATERIAL_CODE (PA.MATERIAL_OID, 1), 1, 12) as MATERIAL,\n           RPT_INP_GET_PLT_DIMENSIONS (INP_PART_OID, 0) * 1000 as LENGTH,\n           RPT_INP_GET_PLT_DIMENSIONS (INP_PART_OID, 1) * 1000 as WIDTH,\n           PA.THICKNESS * 1000,\n           RPT_GET_PART_WEIGHT (P.OID) as WEIGHT_UNIT,\n           RPT_GET_PART_WEIGHT (P.OID) * RPT_COPY_COUNT (P.OID) as TOTAL_WEIGHT,\n           NULL  as NEST_ID,\n           0,\n           0,\n           0,\n           0\n      FROM PRD_EXPL_PART PE,V_PRD_PART_NO_NESTING P, INP_PLATE_ATT_DB PA, BLOCK B\n     WHERE     PA.INP_PART_OID = P.OID AND PE.PRD_PART_OID=  P.OID\n           AND P.PART_TYPE IN (14,\n                               15,\n                               18,\n                               20,\n                               22,\n                               23,\n                               25,\n                               26)AND P.BLOCK_OID=B.OID\n          and B.DESCRIPTION like '%${drNum}%' \nUNION ALL\nselect   PE.OID as PEOID,  P.CODE  as PART_CODE,\n     DECODE (PE.SYMMETRY,  0,'P', 1,'S', 2,'C', 3,'') as SYMMETRY,\n           P.PART_TYPE,\n           B.CODE as BLOCK_CODE,\n           RPT_COPY_COUNT (P.OID) as NUM_EQ_PART,\n           SUBSTR (GET_PART_DESC (P.OID, 1), 1, 200) as PART_DESC,\n           SUBSTR (GET_SECT_TP (prf.std_profile_oid), 1, 2) as ELEM_TYPE,\n           SUBSTR (GET_MATERIAL_CODE (PRF.STD_PROFILE_OID, 2), 1, 12) as MATERIAL,\n           RPT_GET_PART_LENGTH (P.OID) * 1000 as LENGTH,\n           GET_PRF_W_HEIGHT (PRF.STD_PROFILE_OID) as WIDTH,\n           GET_PRF_W_THICK (PRF.STD_PROFILE_OID),\n           RPT_GET_PART_WEIGHT (P.OID) as WEIGHT_UNIT,\n           RPT_GET_PART_WEIGHT (P.OID) * RPT_COPY_COUNT (P.OID) as TOTAL_WEIGHT,\n           NULL  as NEST_ID,\n           0,\n           0,\n           0,\n           0\n      FROM PRD_EXPL_PART PE,V_PRD_PART_NO_NESTING P, INP_PROFILE_ATT_DB PRF, BLOCK B\n     WHERE     PRF.INP_PART_OID = P.OID AND PE.PRD_PART_OID=  P.OID\n           AND P.PART_TYPE IN (16,\n                               19,\n                               21,\n                               24)AND P.BLOCK_OID=B.OID\n          and B.DESCRIPTION like '%${drNum}%' \nUNION ALL\n select   PE.OID as PEOID,  P.CODE  as PART_CODE,\n     DECODE (PE.SYMMETRY,  0,'P', 1,'S', 2,'C', 3,'') as SYMMETRY,\n           P.PART_TYPE,\n           B.CODE as BLOCK_CODE,\n           RPT_COPY_COUNT (P.OID) as NUM_EQ_PART,\n           SUBSTR (GET_PART_DESC (P.OID, 1), 1, 200) as PART_DESC,\n           SUBSTR (GET_SECT_TP (PRF.STD_SECTION_OID), 1, 2) as ELEM_TYPE,\n           SUBSTR (GET_MATERIAL_CODE (PRF.STD_SECTION_OID, 2), 1, 12) as MATERIAL,\n           RPT_GET_PART_LENGTH (P.OID) * 1000 as LENGTH,\n           GET_PRF_W_HEIGHT (PRF.STD_SECTION_OID) as WIDTH,\n           GET_PRF_W_THICK (PRF.STD_SECTION_OID),\n           RPT_GET_PART_WEIGHT (P.OID) as WEIGHT_UNIT,\n           RPT_GET_PART_WEIGHT (P.OID) * RPT_COPY_COUNT (P.OID) as TOTAL_WEIGHT,\n           NULL  as NEST_ID,\n           0,\n           0,\n           0,\n           0\n      FROM PRD_EXPL_PART PE,V_PRD_PART_NO_NESTING P, INP_LC_ATT_DB PRF, BLOCK B\n     WHERE PRF.INP_PART_OID = P.OID AND P.PART_TYPE = 17 AND PE.PRD_PART_OID=  P.OID AND P.BLOCK_OID=B.OID\n          and B.DESCRIPTION like '%${drNum}%' \nUNION ALL\n select   PE.OID as PEOID,  P.CODE,\n     DECODE (PE.SYMMETRY,  0,'P', 1,'S', 2,'C', 3,'') as SYMMETRY,\n           P.PART_TYPE,\n            B.CODE as BLOCK_CODE,\n           1 as NUM_EQ_PART,\n           GET_PART_DESC (P.OID, 1) as PART_DESC,\n           'PL' as ELEM_TYPE,\n           PA.MATQ as MATERIAL,\n           RPT_AS_GET_PLT_DIMENSIONS (P.OID, 0) * 1000 as LENGTH,\n           RPT_AS_GET_PLT_DIMENSIONS (P.OID, 1) * 1000 as WIDTH,\n           PA.THICKNESS,\n           PE.WEIGHT as WEIGHT_UNIT,\n           PE.WEIGHT as TOTAL_WEIGHT,\n           NULL  as NEST_ID,\n           0,\n           0,\n           0,\n           0\n      FROM V_PRD_PART_NO_NESTING P, AS_STD_PART_PLATE PA, PRD_EXPL_PART PE, BLOCK B\n     WHERE PA.OID = P.OID AND PE.PRD_PART_OID = P.OID AND P.PART_TYPE = 12  AND P.BLOCK_OID=B.OID\n          and B.DESCRIPTION like '%${drNum}%' \nUNION ALL\nselect   PE.OID as PEOID,  P.CODE as PART_CODE,\n     DECODE (PE.SYMMETRY,  0,'P', 1,'S', 2,'C', 3,'') as SYMMETRY,\n           P.PART_TYPE,\n         B.CODE as BLOCK_CODE,\n           1 as NUM_EQ_PART,\n           GET_PART_DESC (P.OID, 1) as PART_DESC,\n           'PL' as ELEM_TYPE,\n           PA.MATQ as MATERIAL,\n           RPT_AS_GET_PLT_DIMENSIONS (P.OID, 0) * 1000 as LENGTH,\n           RPT_AS_GET_PLT_DIMENSIONS (P.OID, 1) * 1000 as WIDTH,\n           PA.THICKNESS,\n           PE.WEIGHT as WEIGHT_UNIT,\n           PE.WEIGHT as TOTAL_WEIGHT,\n           NULL  as NEST_ID,\n           0,\n           0,\n           0,\n           0\n      FROM V_PRD_PART_NO_NESTING P, AS_PART_CONT_PLATE PA, PRD_EXPL_PART PE, BLOCK B\n     WHERE PA.OID = P.OID AND PE.PRD_PART_OID = P.OID AND P.PART_TYPE = 12  AND P.BLOCK_OID=B.OID\n          and B.DESCRIPTION like '%${drNum}%' \nUNION ALL\nselect   PE.OID as PEOID, P.CODE as PART_CODE,\n     DECODE (PE.SYMMETRY,  0,'P', 1,'S', 2,'C', 3,'') as SYMMETRY,\n           P.PART_TYPE,\n           B.CODE as BLOCK_CODE,\n           1 as NUM_EQ_PART,\n           GET_PART_DESC (P.OID, 1) as PART_DESC,\n           DECODE (STD.SECTION,\n                   -1, '',\n                   0, 'FS',\n                   1, 'AS',\n                   2, 'IS',\n                   3, 'TS',\n                   4, 'US',\n                   5, 'BS',\n                   6, 'ST',\n                   7, 'AT',\n                   8, 'OS',\n                   9, 'PS',\n                   10, 'RS',\n                   11, 'MC',\n                   12, 'DB',\n                   13, 'SR',\n                   14, 'HR',\n                   15, 'LI',\n                   16, 'ZL',\n                   17, 'TL',\n                   '') as ELEM_TYPE,\n           SUBSTR (GET_MATERIAL_CODE (STD.MATERIAL_OID, 1), 1, 12) as MATERIAL,\n           PRF.LENGTH as LENGTH,\n           STD.WEB_HEIGHT as WIDTH,\n           STD.WEB_THICKNESS,\n           PE.WEIGHT as WEIGHT_UNIT,\n           PE.WEIGHT as TOTAL_WEIGHT,\n           NULL  as NEST_ID,\n           0,\n           0,\n           0,\n           0\n      FROM V_PRD_PART_NO_NESTING  P,\n           AS_STD_PART_PROF       PRF,\n           STD_PROFILE            STD,\n           PRD_EXPL_PART          PE, BLOCK B\n     WHERE     PRF.OID = P.OID\n           AND PE.PRD_PART_OID = P.OID\n           AND STD.KSE = PRF.KSE\n           AND P.PART_TYPE = 7\n             AND P.BLOCK_OID=B.OID\n          and B.DESCRIPTION like '%${drNum}%' \n          \n) P\norder by P.PART_CODE,P.SYMMETRY"

  //private def partsByDrawingNum(drNum: String): String = s"select distinct\n(select OID from V_PRD_PART where BLOCK_NAME=P.BLOCK_CODE AND PART_NAME=P.PART_CODE) as PART_OID,\nP.PEOID as EXPL_OID,\nP.PART_CODE,\nP.SYMMETRY,\nP.PART_TYPE,\nP.BLOCK_CODE,\nP.BLOCK_CODE as DESCRIPTION,\nP.NUM_EQ_PART,\nP.PART_DESC,\nP.ELEM_TYPE,\nP.MATERIAL,\nP.LENGTH,\nP.WIDTH,\nP.THICKNESS,\nP.WEIGHT_UNIT,\nP.TOTAL_WEIGHT,\nP.NEST_ID,\nP.NEST_LENGTH,\nP.NEST_WIDTH,\nP.NUM_EQ_NEST,\n(select KSE_KPL from V_PRD_PLPRF_MAT where NEST_ID=P.NEST_ID) as KSE_KPL,\n(select STOCK_CODE0 from STD_PROFILE where kse=(select KSE_KPL from V_PRD_PLPRF_MAT where NEST_ID=P.NEST_ID)) as STOCK1,\n(select STORAGE_CODE from STD_PLATE where kpl=(select KSE_KPL from V_PRD_PLPRF_MAT where NEST_ID=P.NEST_ID)) as STOCK2\nfrom\n(\nselect   \nPE.OID as PEOID, \nP.CODE  as PART_CODE,      \nDECODE (PE.SYMMETRY,  0,'P', 1,'S', 2,'C', 3,'') as SYMMETRY,            \nP.PART_TYPE,\n B.CODE as BLOCK_CODE,\nRPT_COPY_COUNT (P.OID) as NUM_EQ_PART,\nSUBSTR (GET_PART_DESC (P.OID, 1), 1, 200) as PART_DESC,            \nSUBSTR (GET_SECT_TP (prf.std_profile_oid), 1, 2) as ELEM_TYPE,\nSUBSTR (GET_MATERIAL_CODE (PRF.STD_PROFILE_OID, 2), 1, 12) as MATERIAL,\nRPT_GET_PART_LENGTH (P.OID) * 1000 as LENGTH,            \nGET_PRF_W_HEIGHT (PRF.STD_PROFILE_OID) as WIDTH,\nGET_PRF_W_THICK (PRF.STD_PROFILE_OID) as THICKNESS,\nRPT_GET_PART_WEIGHT (P.OID) as WEIGHT_UNIT,            \nRPT_GET_PART_WEIGHT (P.OID) * RPT_COPY_COUNT (P.OID) as TOTAL_WEIGHT,\nSUBSTR (GET_NEST_ID (NP.NESTING_OID, NP.NESTING_BLOCK), 1, 15)  as NEST_ID,            \nNP.NUM_PART_NEST,\nNP.NEST_LENGTH,\nNP.NEST_WIDTH,\nNP.NUM_EQ_NEST\nFROM \nPRD_EXPL_PART PE, PRD_PART P, INP_PROFILE_ATT_DB PRF, PRD_NEST_PART PNP, BLOCK B,\n(\n      SELECT PART_OID,\n             NESTING_OID,\n             NESTING_BLOCK,\n             COUNT (*) * GET_NUM_EQ_NEST (NESTING_OID) as NUM_PART_NEST,\n             GET_NEST_HEIGHT (NESTING_OID) as NEST_LENGTH,\n             GET_NEST_WIDTH (NESTING_OID) as NEST_WIDTH,\n             GET_NUM_EQ_NEST (NESTING_OID) as NUM_EQ_NEST\n        FROM V_RPT_BASE_NESTING\n    GROUP BY PART_OID, NESTING_OID, NESTING_BLOCK\n)   NP   \n\nWHERE  \nNP.part_oid=P.OID AND\nPRF.INP_PART_OID = P.OID \nAND PE.PRD_PART_OID= P.OID \nAND PNP.PART_OID=P.OID \nAND PNP.SYMM_CODE=PE.SYMMETRY           \nAND P.PART_TYPE IN (16,19,21,24)  \nAND P.BLOCK_OID=B.OID\nand B.DESCRIPTION like '%${drNum}%'\nUNION ALL\n select      \n PE.OID as PEOID,\n P.CODE as PART_CODE,\n           DECODE (PE.SYMMETRY,  0,'P', 1,'S', 2,'C', 3,'') as SYMMETRY,\n           P.PART_TYPE,\n           B.CODE as BLOCK_CODE,\n           RPT_COPY_COUNT (P.OID) as NUM_EQ_PART,\n           GET_PART_DESC (P.OID, 1) as PART_DESC,\n           'PL' as ELEM_TYPE,\n           SUBSTR (GET_MATERIAL_CODE (PA.MATERIAL_OID, 1), 1, 12) as MATERIAL,\n           RPT_GET_SD_PLATE_DIM (P.OID, 0) as LENGTH,\n           RPT_GET_SD_PLATE_DIM (P.OID, 1) as WIDTH,\n           PA.THICKNESS,\n           RPT_GET_PART_WEIGHT (P.OID) as WEIGHT_UNIT,\n           RPT_GET_PART_WEIGHT (P.OID) * RPT_COPY_COUNT (P.OID) as TOTAL_WEIGHT,\n           SUBSTR (GET_NEST_ID (NP.NESTING_OID, NP.NESTING_BLOCK), 1, 15) as NEST_ID ,\n           NP.NUM_PART_NEST,\n           NP.NEST_LENGTH,\n           NP.NEST_WIDTH,\n           NP.NUM_EQ_NEST\n      FROM PRD_EXPL_PART PE,  PRD_PART P, V_RPT_SHDK_PLATE_ATT PA, PRD_NEST_PART PNP, BLOCK B,\n      (\n      SELECT PART_OID,\n             NESTING_OID,\n             NESTING_BLOCK,\n             COUNT (*) * GET_NUM_EQ_NEST (NESTING_OID) as NUM_PART_NEST,\n             GET_NEST_HEIGHT (NESTING_OID) as NEST_LENGTH,\n             GET_NEST_WIDTH (NESTING_OID) as NEST_WIDTH,\n             GET_NUM_EQ_NEST (NESTING_OID) as NUM_EQ_NEST\n        FROM V_RPT_BASE_NESTING\n    GROUP BY PART_OID, NESTING_OID, NESTING_BLOCK\n)   NP  \n     WHERE \n         NP.part_oid=P.OID AND\n     PA.PRD_PART_OID = P.OID AND PE.PRD_PART_OID =PA.PRD_PART_OID\n           AND PNP.PART_OID=P.OID AND PNP.SYMM_CODE=PE.SYMMETRY\n           AND P.PART_TYPE IN (9, 10)\n           AND P.BLOCK_OID=B.OID\n           and B.DESCRIPTION like '%${drNum}%' \n           \n           UNION ALL\n    select    PE.OID as PEOID, P.CODE  as PART_CODE,\n     DECODE (PE.SYMMETRY,  0,'P', 1,'S', 2,'C', 3,'') as SYMMETRY,\n           P.PART_TYPE,\n           B.CODE as BLOCK_CODE,\n           RPT_COPY_COUNT (P.OID) as NUM_EQ_PART,\n           GET_PART_DESC (P.OID, 1) as PART_DESC,\n           SUBSTR (GET_SECT_TP (prf.std_profile_oid), 1, 2) as ELEM_TYPE,\n           SUBSTR (GET_MATERIAL_CODE (PRF.STD_PROFILE_OID, 2), 1, 12) as MATERIAL,\n           PRF.LENGTH * 1000 as LENGTH,\n           GET_PRF_W_HEIGHT (PRF.STD_PROFILE_OID) as WIDTH,\n           GET_PRF_W_THICK (PRF.STD_PROFILE_OID),\n           RPT_GET_PART_WEIGHT (P.OID) as WEIGHT_UNIT,\n           RPT_GET_PART_WEIGHT (P.OID) * RPT_COPY_COUNT (P.OID)  as TOTAL_WEIGHT,\n           SUBSTR (GET_NEST_ID (NP.NESTING_OID, NP.NESTING_BLOCK), 1, 15) as NEST_ID,\n           NP.NUM_PART_NEST,\n           NP.NEST_LENGTH,\n           NP.NEST_WIDTH,\n           NP.NUM_EQ_NEST\n      FROM PRD_EXPL_PART PE, PRD_PART P, PRD_PROFILE PRF,  PRD_NEST_PART PNP, BLOCK B,\n      (\n      SELECT PART_OID,\n             NESTING_OID,\n             NESTING_BLOCK,\n             COUNT (*) * GET_NUM_EQ_NEST (NESTING_OID) as NUM_PART_NEST,\n             GET_NEST_HEIGHT (NESTING_OID) as NEST_LENGTH,\n             GET_NEST_WIDTH (NESTING_OID) as NEST_WIDTH,\n             GET_NUM_EQ_NEST (NESTING_OID) as NUM_EQ_NEST\n        FROM V_RPT_BASE_NESTING\n    GROUP BY PART_OID, NESTING_OID, NESTING_BLOCK\n)   NP  \n     WHERE     \n     NP.part_oid=P.OID AND\n     PRF.PRD_PART_OID = P.OID AND PE.PRD_PART_OID=PRF.PRD_PART_OID\n           AND PNP.PART_OID=P.OID AND PNP.SYMM_CODE=PE.SYMMETRY\n           AND P.PART_TYPE IN (0,\n                               1,\n                               2,\n                               3,\n                               6)\n                               AND P.BLOCK_OID=B.OID\n          and B.DESCRIPTION like '%${drNum}%' \n          \n          UNION ALL\nselect   PE.OID as PEOID, P.CODE  as PART_CODE,\n     DECODE (PE.SYMMETRY,  0,'P', 1,'S', 2,'C', 3,'') as SYMMETRY,\n           P.PART_TYPE,\n            B.CODE as BLOCK_CODE,\n           RPT_COPY_COUNT (P.OID) as NUM_EQ_PART,\n           SUBSTR (GET_PART_DESC (P.OID, 1), 1, 200) as PART_DESC,\n           'PL' as ELEM_TYPE,\n           SUBSTR (GET_MATERIAL_CODE (PA.MATERIAL_OID, 1), 1, 12) as MATERIAL,\n           RPT_INP_GET_PLT_DIMENSIONS (P.OID, 0) * 1000 as LENGTH,\n           RPT_INP_GET_PLT_DIMENSIONS (P.OID, 1) * 1000 as WIDTH,\n           PA.THICKNESS * 1000,\n           RPT_GET_PART_WEIGHT (P.OID) as WEIGHT_UNIT,\n           RPT_GET_PART_WEIGHT (P.OID) * RPT_COPY_COUNT (P.OID) as TOTAL_WEIGHT,\n           SUBSTR (GET_NEST_ID (NP.NESTING_OID, NP.NESTING_BLOCK), 1, 15) as NEST_ID,\n           NP.NUM_PART_NEST,\n           NP.NEST_LENGTH,\n           NP.NEST_WIDTH,\n           NP.NUM_EQ_NEST\n      FROM PRD_EXPL_PART PE, PRD_PART P, INP_PLATE_ATT_DB PA,  PRD_NEST_PART PNP, BLOCK B,\n            (\n      SELECT PART_OID,\n             NESTING_OID,\n             NESTING_BLOCK,\n             COUNT (*) * GET_NUM_EQ_NEST (NESTING_OID) as NUM_PART_NEST,\n             GET_NEST_HEIGHT (NESTING_OID) as NEST_LENGTH,\n             GET_NEST_WIDTH (NESTING_OID) as NEST_WIDTH,\n             GET_NUM_EQ_NEST (NESTING_OID) as NUM_EQ_NEST\n        FROM V_RPT_BASE_NESTING\n    GROUP BY PART_OID, NESTING_OID, NESTING_BLOCK\n)   NP \n     WHERE  NP.part_oid=P.OID AND   PA.INP_PART_OID = P.OID AND PE.PRD_PART_OID=P.OID\n           AND PNP.PART_OID=P.OID AND PNP.SYMM_CODE=PE.SYMMETRY \n           AND P.PART_TYPE IN (14,\n                               15,\n                               18,\n                               20,\n                               22,\n                               23,\n                               25,\n                               26)\n                               AND P.BLOCK_OID=B.OID\n          and B.DESCRIPTION like '%${drNum}%' \n          \n          UNION ALL\nselect   PE.OID as PEOID, P.CODE  as PART_CODE,\n     DECODE (PE.SYMMETRY,  0,'P', 1,'S', 2,'C', 3,'') as SYMMETRY,\n           P.PART_TYPE,\n            B.CODE as BLOCK_CODE,\n           RPT_COPY_COUNT (P.OID) as NUM_EQ_PART,\n           SUBSTR (GET_PART_DESC (P.OID, 1), 1, 200) as PART_DESC,\n           'PL' as ELEM_TYPE,\n           SUBSTR (GET_MATERIAL_CODE (PA.MATERIAL_OID, 1), 1, 12) as MATERIAL,\n           RPT_INP_GET_PLT_DIMENSIONS (P.OID, 0) * 1000 as LENGTH,\n           RPT_INP_GET_PLT_DIMENSIONS (P.OID, 1) * 1000 as WIDTH,\n           PA.THICKNESS * 1000,\n           RPT_GET_PART_WEIGHT (P.OID) as WEIGHT_UNIT,\n           RPT_GET_PART_WEIGHT (P.OID) * RPT_COPY_COUNT (P.OID) as TOTAL_WEIGHT,\n           SUBSTR (GET_NEST_ID (NP.NESTING_OID, NP.NESTING_BLOCK), 1, 15) as NEST_ID,\n           NP.NUM_PART_NEST,\n           NP.NEST_LENGTH,\n           NP.NEST_WIDTH,\n           NP.NUM_EQ_NEST\n      FROM PRD_EXPL_PART PE, PRD_PART P, INP_PLATE_ATT_DB PA, PRD_NEST_PART PNP, BLOCK B,\n       ( SELECT PART_OID,\n             NESTING_OID,\n             NESTING_BLOCK,\n             COUNT (*) * GET_NUM_EQ_NEST (NESTING_OID) as NUM_PART_NEST,\n             GET_NEST_HEIGHT (NESTING_OID) as NEST_LENGTH,\n             GET_NEST_WIDTH (NESTING_OID) as NEST_WIDTH,\n             GET_NUM_EQ_NEST (NESTING_OID) as NUM_EQ_NEST\n        FROM V_RPT_BASE_NESTING\n    GROUP BY PART_OID, NESTING_OID, NESTING_BLOCK\n)   NP \n     WHERE    NP.part_oid=P.OID AND  PA.INP_PART_OID = P.OID AND PE.PRD_PART_OID=P.OID\n           AND PNP.PART_OID=P.OID AND PNP.SYMM_CODE=PE.SYMMETRY \n           AND P.PART_TYPE IN (14,\n                               15,\n                               18,\n                               20,\n                               22,\n                               23,\n                               25,\n                               26)\n                               AND P.BLOCK_OID=B.OID\n          and B.DESCRIPTION like '%${drNum}%' \n          \n          UNION ALL\nselect   PE.OID as PEOID,  P.CODE  as PART_CODE,\n     DECODE (PE.SYMMETRY,  0,'P', 1,'S', 2,'C', 3,'') as SYMMETRY,\n           P.PART_TYPE,\n           B.CODE as BLOCK_CODE,\n           RPT_COPY_COUNT (P.OID) as NUM_EQ_PART,\n           SUBSTR (GET_PART_DESC (P.OID, 1), 1, 200) as PART_DESC,\n           SUBSTR (GET_SECT_TP (PRF.STD_SECTION_OID), 1, 2) as ELEM_TYPE,\n           SUBSTR (GET_MATERIAL_CODE (PRF.STD_SECTION_OID, 2), 1, 12) as MATERIAL,\n           RPT_GET_PART_LENGTH (P.OID) * 1000 as LENGTH,\n           GET_PRF_W_HEIGHT (PRF.STD_SECTION_OID) as WIDTH,\n           GET_PRF_W_THICK (PRF.STD_SECTION_OID),\n           RPT_GET_PART_WEIGHT (P.OID) as WEIGHT_UNIT,\n           RPT_GET_PART_WEIGHT (P.OID) * RPT_COPY_COUNT (P.OID) as TOTAL_WEIGHT,\n           SUBSTR (GET_NEST_ID (NP.NESTING_OID, NP.NESTING_BLOCK), 1, 15)  as NEST_ID,\n           NP.NUM_PART_NEST,\n           NP.NEST_LENGTH,\n           NP.NEST_WIDTH,\n           NP.NUM_EQ_NEST\n      FROM PRD_EXPL_PART PE, PRD_PART P, INP_LC_ATT_DB PRF,  PRD_NEST_PART PNP, BLOCK B,\n           ( SELECT PART_OID,\n             NESTING_OID,\n             NESTING_BLOCK,\n             COUNT (*) * GET_NUM_EQ_NEST (NESTING_OID) as NUM_PART_NEST,\n             GET_NEST_HEIGHT (NESTING_OID) as NEST_LENGTH,\n             GET_NEST_WIDTH (NESTING_OID) as NEST_WIDTH,\n             GET_NUM_EQ_NEST (NESTING_OID) as NUM_EQ_NEST\n        FROM V_RPT_BASE_NESTING\n    GROUP BY PART_OID, NESTING_OID, NESTING_BLOCK\n)   NP \n     WHERE  NP.part_oid=P.OID AND  PRF.INP_PART_OID = P.OID AND PE.PRD_PART_OID=  P.OID\n           AND PNP.PART_OID=P.OID AND PNP.SYMM_CODE=PE.SYMMETRY \n           AND P.PART_TYPE in (17) AND P.BLOCK_OID=B.OID\n          and B.DESCRIPTION like '%${drNum}%' \n          UNION ALL\n select   PE.OID as PEOID, P.CODE  as PART_CODE,\n     DECODE (PE.SYMMETRY,  0,'P', 1,'S', 2,'C', 3,'') as SYMMETRY,\n           P.PART_TYPE,\n            B.CODE as BLOCK_CODE,\n           1 as NUM_EQ_PART,\n           GET_PART_DESC (P.OID, 1) as PART_DESC,\n           'PL' as ELEM_TYPE,\n           PA.MATQ as MATERIAL,\n           RPT_AS_GET_PLT_DIMENSIONS (P.OID, 0) * 1000 as LENGTH,\n           RPT_AS_GET_PLT_DIMENSIONS (P.OID, 1) * 1000 as WIDTH,\n           PA.THICKNESS,\n           PE.WEIGHT as WEIGHT_UNIT,\n           PE.WEIGHT as TOTAL_WEIGHT,\n           SUBSTR (GET_NEST_ID (NP.NESTING_OID, NP.NESTING_BLOCK), 1, 15)  as NEST_ID,\n           NP.NUM_PART_NEST,\n           NP.NEST_LENGTH,\n           NP.NEST_WIDTH,\n           NP.NUM_EQ_NEST\n      FROM PRD_PART               P,\n           AS_STD_PART_PLATE      PA,\n           PRD_EXPL_PART          PE , PRD_NEST_PART PNP , BLOCK B,\n             ( SELECT PART_OID,\n             NESTING_OID,\n             NESTING_BLOCK,\n             COUNT (*) * GET_NUM_EQ_NEST (NESTING_OID) as NUM_PART_NEST,\n             GET_NEST_HEIGHT (NESTING_OID) as NEST_LENGTH,\n             GET_NEST_WIDTH (NESTING_OID) as NEST_WIDTH,\n             GET_NUM_EQ_NEST (NESTING_OID) as NUM_EQ_NEST\n        FROM V_RPT_BASE_NESTING\n    GROUP BY PART_OID, NESTING_OID, NESTING_BLOCK\n)   NP \n     WHERE   NP.part_oid=P.OID AND     PA.OID = P.OID\n           AND PNP.PART_OID=P.OID AND PNP.SYMM_CODE=PE.SYMMETRY \n           AND PE.PRD_PART_OID = P.OID\n           AND P.PART_TYPE = 12 AND P.BLOCK_OID=B.OID\n          and B.DESCRIPTION like '%${drNum}%' \n          UNION ALL\nselect   PE.OID as PEOID,  P.CODE  as PART_CODE,\n     DECODE (PE.SYMMETRY,  0,'P', 1,'S', 2,'C', 3,'') as SYMMETRY,\n           P.PART_TYPE,\n            B.CODE as BLOCK_CODE,\n           1 as NUM_EQ_PART,\n           GET_PART_DESC (P.OID, 1) as PART_DESC,\n           DECODE (STD.SECTION,\n                   -1, '',\n                   0, 'FS',\n                   1, 'AS',\n                   2, 'IS',\n                   3, 'TS',\n                   4, 'US',\n                   5, 'BS',\n                   6, 'ST',\n                   7, 'AT',\n                   8, 'OS',\n                   9, 'PS',\n                   10, 'RS',\n                   11, 'MC',\n                   12, 'DB',\n                   13, 'SR',\n                   14, 'HR',\n                   15, 'LI',\n                   16, 'ZL',\n                   17, 'TL',\n                   '') as ELEM_TYPE,\n           SUBSTR (GET_MATERIAL_CODE (STD.MATERIAL_OID, 1), 1, 12) as MATERIAL,\n           PRF.LENGTH as LENGTH,\n           STD.WEB_HEIGHT as WIDTH,\n           STD.WEB_THICKNESS,\n           PE.WEIGHT as WEIGHT_UNIT,\n           PE.WEIGHT as TOTAL_WEIGHT,\n           SUBSTR (GET_NEST_ID (NP.NESTING_OID, NP.NESTING_BLOCK), 1, 15)  as NEST_ID,\n           NP.NUM_PART_NEST,\n           NP.NEST_LENGTH,\n           NP.NEST_WIDTH,\n           NP.NUM_EQ_NEST\n      FROM PRD_PART               P,\n           AS_STD_PART_PROF       PRF,\n           STD_PROFILE            STD,\n           PRD_EXPL_PART          PE, PRD_NEST_PART PNP, BLOCK B,\n            ( SELECT PART_OID,\n             NESTING_OID,\n             NESTING_BLOCK,\n             COUNT (*) * GET_NUM_EQ_NEST (NESTING_OID) as NUM_PART_NEST,\n             GET_NEST_HEIGHT (NESTING_OID) as NEST_LENGTH,\n             GET_NEST_WIDTH (NESTING_OID) as NEST_WIDTH,\n             GET_NUM_EQ_NEST (NESTING_OID) as NUM_EQ_NEST\n        FROM V_RPT_BASE_NESTING\n    GROUP BY PART_OID, NESTING_OID, NESTING_BLOCK\n)   NP \n     WHERE  NP.part_oid=P.OID AND     PRF.OID = P.OID\n           AND PE.PRD_PART_OID = P.OID\n           AND STD.KSE = PRF.KSE\n           AND PNP.PART_OID=P.OID AND PNP.SYMM_CODE=PE.SYMMETRY\n           AND P.PART_TYPE = 7 AND P.BLOCK_OID=B.OID\n          and B.DESCRIPTION like '%${drNum}%' \n          \nUNION ALL\n select   PE.OID as PEOID,  P.CODE  as PART_CODE,\n     DECODE (PE.SYMMETRY,  0,'P', 1,'S', 2,'C', 3,'') as SYMMETRY,\n           P.PART_TYPE,\n            B.CODE as BLOCK_CODE,\n           RPT_COPY_COUNT (P.OID) as NUM_EQ_PART,\n           GET_PART_DESC (P.OID, 1) as PART_DESC,\n           'PL' as ELEM_TYPE,\n           SUBSTR (GET_MATERIAL_CODE (PA.MATERIAL_OID, 1), 1, 12) as MATERIAL,\n           RPT_GET_SD_PLATE_DIM (P.OID, 0) as LENGTH,\n           RPT_GET_SD_PLATE_DIM (P.OID, 1) as WIDTH,\n           PA.THICKNESS,\n           RPT_GET_PART_WEIGHT (P.OID) as WEIGHT_UNIT,\n           RPT_GET_PART_WEIGHT (P.OID) * RPT_COPY_COUNT (P.OID) as TOTAL_WEIGHT,\n           NULL  as NEST_ID,\n           0,\n           0,\n           0,\n           0\n      FROM V_RPT_PART_NO_NESTING_SD P, V_RPT_SHDK_PLATE_ATT PA,PRD_EXPL_PART PE, BLOCK B\n     WHERE PA.PRD_PART_OID = P.OID AND PE.PRD_PART_OID=  P.OID AND P.BLOCK_OID=B.OID\n          and B.DESCRIPTION like '%${drNum}%' \nUNION ALL\n    select   PE.OID as PEOID,  P.CODE  as PART_CODE,\n     DECODE (PE.SYMMETRY,  0,'P', 1,'S', 2,'C', 3,'') as SYMMETRY,\n           P.PART_TYPE,\n          B.CODE as BLOCK_CODE,\n           RPT_COPY_COUNT (P.OID) as NUM_EQ_PART,\n           GET_PART_DESC (P.OID, 1) as PART_DESC,\n           SUBSTR (GET_SECT_TP (prf.std_profile_oid), 1, 2) as ELEM_TYPE,\n           SUBSTR (GET_MATERIAL_CODE (PRF.STD_PROFILE_OID, 2), 1, 12) as MATERIAL,\n           PRF.LENGTH * 1000 as LENGTH,\n           GET_PRF_W_HEIGHT (PRF.STD_PROFILE_OID) as WIDTH,\n           GET_PRF_W_THICK (PRF.STD_PROFILE_OID),\n           RPT_GET_PART_WEIGHT (P.OID) as WEIGHT_UNIT,\n           RPT_GET_PART_WEIGHT (P.OID) * RPT_COPY_COUNT (P.OID) as TOTAL_WEIGHT,\n           NULL  as NEST_ID,\n           0,\n           0,\n           0,\n           0\n      FROM PRD_EXPL_PART PE, V_PRD_PART_NO_NESTING P, PRD_PROFILE PRF, BLOCK B\n     WHERE     PRF.PRD_PART_OID = P.OID AND PE.PRD_PART_OID=  P.OID\n           AND P.PART_TYPE IN (0,\n                               1,\n                               2,\n                               3,\n                               6)AND P.BLOCK_OID=B.OID\n          and B.DESCRIPTION like '%${drNum}%' \nUNION ALL\n    select   PE.OID as PEOID,  P.CODE  as PART_CODE,\n     DECODE (PE.SYMMETRY,  0,'P', 1,'S', 2,'C', 3,'') as SYMMETRY,\n           P.PART_TYPE,\n            B.CODE as BLOCK_CODE,\n           RPT_COPY_COUNT (P.OID) as NUM_EQ_PART,\n           SUBSTR (GET_PART_DESC (P.OID, 1), 1, 200) as PART_DESC,\n           'PL' as ELEM_TYPE,\n           SUBSTR (GET_MATERIAL_CODE (PA.MATERIAL_OID, 1), 1, 12) as MATERIAL,\n           RPT_INP_GET_PLT_DIMENSIONS (INP_PART_OID, 0) * 1000 as LENGTH,\n           RPT_INP_GET_PLT_DIMENSIONS (INP_PART_OID, 1) * 1000 as WIDTH,\n           PA.THICKNESS * 1000,\n           RPT_GET_PART_WEIGHT (P.OID) as WEIGHT_UNIT,\n           RPT_GET_PART_WEIGHT (P.OID) * RPT_COPY_COUNT (P.OID) as TOTAL_WEIGHT,\n           NULL  as NEST_ID,\n           0,\n           0,\n           0,\n           0\n      FROM PRD_EXPL_PART PE,V_PRD_PART_NO_NESTING P, INP_PLATE_ATT_DB PA, BLOCK B\n     WHERE     PA.INP_PART_OID = P.OID AND PE.PRD_PART_OID=  P.OID\n           AND P.PART_TYPE IN (14,\n                               15,\n                               18,\n                               20,\n                               22,\n                               23,\n                               25,\n                               26)AND P.BLOCK_OID=B.OID\n          and B.DESCRIPTION like '%${drNum}%' \nUNION ALL\nselect   PE.OID as PEOID,  P.CODE  as PART_CODE,\n     DECODE (PE.SYMMETRY,  0,'P', 1,'S', 2,'C', 3,'') as SYMMETRY,\n           P.PART_TYPE,\n           B.CODE as BLOCK_CODE,\n           RPT_COPY_COUNT (P.OID) as NUM_EQ_PART,\n           SUBSTR (GET_PART_DESC (P.OID, 1), 1, 200) as PART_DESC,\n           SUBSTR (GET_SECT_TP (prf.std_profile_oid), 1, 2) as ELEM_TYPE,\n           SUBSTR (GET_MATERIAL_CODE (PRF.STD_PROFILE_OID, 2), 1, 12) as MATERIAL,\n           RPT_GET_PART_LENGTH (P.OID) * 1000 as LENGTH,\n           GET_PRF_W_HEIGHT (PRF.STD_PROFILE_OID) as WIDTH,\n           GET_PRF_W_THICK (PRF.STD_PROFILE_OID),\n           RPT_GET_PART_WEIGHT (P.OID) as WEIGHT_UNIT,\n           RPT_GET_PART_WEIGHT (P.OID) * RPT_COPY_COUNT (P.OID) as TOTAL_WEIGHT,\n           NULL  as NEST_ID,\n           0,\n           0,\n           0,\n           0\n      FROM PRD_EXPL_PART PE,V_PRD_PART_NO_NESTING P, INP_PROFILE_ATT_DB PRF, BLOCK B\n     WHERE     PRF.INP_PART_OID = P.OID AND PE.PRD_PART_OID=  P.OID\n           AND P.PART_TYPE IN (16,\n                               19,\n                               21,\n                               24)AND P.BLOCK_OID=B.OID\n          and B.DESCRIPTION like '%${drNum}%' \nUNION ALL\n select   PE.OID as PEOID,  P.CODE  as PART_CODE,\n     DECODE (PE.SYMMETRY,  0,'P', 1,'S', 2,'C', 3,'') as SYMMETRY,\n           P.PART_TYPE,\n           B.CODE as BLOCK_CODE,\n           RPT_COPY_COUNT (P.OID) as NUM_EQ_PART,\n           SUBSTR (GET_PART_DESC (P.OID, 1), 1, 200) as PART_DESC,\n           SUBSTR (GET_SECT_TP (PRF.STD_SECTION_OID), 1, 2) as ELEM_TYPE,\n           SUBSTR (GET_MATERIAL_CODE (PRF.STD_SECTION_OID, 2), 1, 12) as MATERIAL,\n           RPT_GET_PART_LENGTH (P.OID) * 1000 as LENGTH,\n           GET_PRF_W_HEIGHT (PRF.STD_SECTION_OID) as WIDTH,\n           GET_PRF_W_THICK (PRF.STD_SECTION_OID),\n           RPT_GET_PART_WEIGHT (P.OID) as WEIGHT_UNIT,\n           RPT_GET_PART_WEIGHT (P.OID) * RPT_COPY_COUNT (P.OID) as TOTAL_WEIGHT,\n           NULL  as NEST_ID,\n           0,\n           0,\n           0,\n           0\n      FROM PRD_EXPL_PART PE,V_PRD_PART_NO_NESTING P, INP_LC_ATT_DB PRF, BLOCK B\n     WHERE PRF.INP_PART_OID = P.OID AND P.PART_TYPE = 17 AND PE.PRD_PART_OID=  P.OID AND P.BLOCK_OID=B.OID\n          and B.DESCRIPTION like '%${drNum}%' \nUNION ALL\n select   PE.OID as PEOID,  P.CODE,\n     DECODE (PE.SYMMETRY,  0,'P', 1,'S', 2,'C', 3,'') as SYMMETRY,\n           P.PART_TYPE,\n            B.CODE as BLOCK_CODE,\n           1 as NUM_EQ_PART,\n           GET_PART_DESC (P.OID, 1) as PART_DESC,\n           'PL' as ELEM_TYPE,\n           PA.MATQ as MATERIAL,\n           RPT_AS_GET_PLT_DIMENSIONS (P.OID, 0) * 1000 as LENGTH,\n           RPT_AS_GET_PLT_DIMENSIONS (P.OID, 1) * 1000 as WIDTH,\n           PA.THICKNESS,\n           PE.WEIGHT as WEIGHT_UNIT,\n           PE.WEIGHT as TOTAL_WEIGHT,\n           NULL  as NEST_ID,\n           0,\n           0,\n           0,\n           0\n      FROM V_PRD_PART_NO_NESTING P, AS_STD_PART_PLATE PA, PRD_EXPL_PART PE, BLOCK B\n     WHERE PA.OID = P.OID AND PE.PRD_PART_OID = P.OID AND P.PART_TYPE = 12  AND P.BLOCK_OID=B.OID\n          and B.DESCRIPTION like '%${drNum}%' \nUNION ALL\nselect   PE.OID as PEOID,  P.CODE as PART_CODE,\n     DECODE (PE.SYMMETRY,  0,'P', 1,'S', 2,'C', 3,'') as SYMMETRY,\n           P.PART_TYPE,\n         B.CODE as BLOCK_CODE,\n           1 as NUM_EQ_PART,\n           GET_PART_DESC (P.OID, 1) as PART_DESC,\n           'PL' as ELEM_TYPE,\n           PA.MATQ as MATERIAL,\n           RPT_AS_GET_PLT_DIMENSIONS (P.OID, 0) * 1000 as LENGTH,\n           RPT_AS_GET_PLT_DIMENSIONS (P.OID, 1) * 1000 as WIDTH,\n           PA.THICKNESS,\n           PE.WEIGHT as WEIGHT_UNIT,\n           PE.WEIGHT as TOTAL_WEIGHT,\n           NULL  as NEST_ID,\n           0,\n           0,\n           0,\n           0\n      FROM V_PRD_PART_NO_NESTING P, AS_PART_CONT_PLATE PA, PRD_EXPL_PART PE, BLOCK B\n     WHERE PA.OID = P.OID AND PE.PRD_PART_OID = P.OID AND P.PART_TYPE = 12  AND P.BLOCK_OID=B.OID\n          and B.DESCRIPTION like '%${drNum}%' \nUNION ALL\nselect   PE.OID as PEOID, P.CODE as PART_CODE,\n     DECODE (PE.SYMMETRY,  0,'P', 1,'S', 2,'C', 3,'') as SYMMETRY,\n           P.PART_TYPE,\n           B.CODE as BLOCK_CODE,\n           1 as NUM_EQ_PART,\n           GET_PART_DESC (P.OID, 1) as PART_DESC,\n           DECODE (STD.SECTION,\n                   -1, '',\n                   0, 'FS',\n                   1, 'AS',\n                   2, 'IS',\n                   3, 'TS',\n                   4, 'US',\n                   5, 'BS',\n                   6, 'ST',\n                   7, 'AT',\n                   8, 'OS',\n                   9, 'PS',\n                   10, 'RS',\n                   11, 'MC',\n                   12, 'DB',\n                   13, 'SR',\n                   14, 'HR',\n                   15, 'LI',\n                   16, 'ZL',\n                   17, 'TL',\n                   '') as ELEM_TYPE,\n           SUBSTR (GET_MATERIAL_CODE (STD.MATERIAL_OID, 1), 1, 12) as MATERIAL,\n           PRF.LENGTH as LENGTH,\n           STD.WEB_HEIGHT as WIDTH,\n           STD.WEB_THICKNESS,\n           PE.WEIGHT as WEIGHT_UNIT,\n           PE.WEIGHT as TOTAL_WEIGHT,\n           NULL  as NEST_ID,\n           0,\n           0,\n           0,\n           0\n      FROM V_PRD_PART_NO_NESTING  P,\n           AS_STD_PART_PROF       PRF,\n           STD_PROFILE            STD,\n           PRD_EXPL_PART          PE, BLOCK B\n     WHERE     PRF.OID = P.OID\n           AND PE.PRD_PART_OID = P.OID\n           AND STD.KSE = PRF.KSE\n           AND P.PART_TYPE = 7\n             AND P.BLOCK_OID=B.OID\n          and B.DESCRIPTION like '%${drNum}%' \n         ) P\norder by P.PART_CODE,P.SYMMETRY"
  //private def partsByDrawingNum(drNum: String): String =s"select distinct\nP.PART_OID as PART_OID,\nP.PEOID as EXPL_OID,\nP.PART_CODE,\nP.SYMMETRY,\nP.PART_TYPE,\nP.BLOCK_CODE,\nP.BLOCK_CODE as DESCRIPTION,\nP.NUM_EQ_PART,\nP.PART_DESC,\nP.ELEM_TYPE,\nP.MATERIAL,\nP.LENGTH,\nP.WIDTH,\nP.THICKNESS,\nP.WEIGHT_UNIT,\nP.TOTAL_WEIGHT,\nP.NEST_ID,\nP.NEST_LENGTH,\nP.NEST_WIDTH,\nP.NUM_EQ_NEST,\nP.WH,\nP.WT,\nP.FH,\nP.FT , RPT_GET_STR_GROUP(P.PART_OID) as STRGROUP \nfrom\n(\nselect \nP.OID as PART_OID,  \nPE.OID as PEOID, \nP.CODE  as PART_CODE,      \nDECODE (PE.SYMMETRY,  0,'P', 1,'S', 2,'C', 3,'') as SYMMETRY,            \nP.PART_TYPE,\n B.CODE as BLOCK_CODE,\nRPT_COPY_COUNT (P.OID) as NUM_EQ_PART,\nSUBSTR (GET_PART_DESC (P.OID, 1), 1, 200) as PART_DESC,            \nSUBSTR (GET_SECT_TP (prf.std_profile_oid), 1, 2) as ELEM_TYPE,\nSUBSTR (GET_MATERIAL_CODE (PRF.STD_PROFILE_OID, 2), 1, 12) as MATERIAL,\nRPT_GET_PART_LENGTH (P.OID) * 1000 as LENGTH,            \nSTD.WEB_HEIGHT as WIDTH,\nSTD.WEB_THICKNESS as THICKNESS,\nRPT_GET_PART_WEIGHT (P.OID) as WEIGHT_UNIT,            \nRPT_GET_PART_WEIGHT (P.OID) * RPT_COPY_COUNT (P.OID) as TOTAL_WEIGHT,\nSUBSTR (GET_NEST_ID (NP.NESTING_OID, NP.NESTING_BLOCK), 1, 15)  as NEST_ID,            \nNP.NUM_PART_NEST,\nNP.NEST_LENGTH,\nNP.NEST_WIDTH,\nNP.NUM_EQ_NEST,\nSTD.WEB_HEIGHT as WH,\nSTD.WEB_THICKNESS as WT,\nSTD.FLANGE_HEIGHT as FH,\nSTD.FLANGE_THICKNESS as FT    FROM \nPRD_EXPL_PART PE, PRD_PART P, INP_PROFILE_ATT_DB PRF, PRD_NEST_PART PNP, BLOCK B,STD_PROFILE STD, \n        (\n              select \n                     N.PART_OID,\n                     N.NESTING_OID,\n                     N.SYMM_CODE,\n                     NG.ID_SEQ_BLOCK as NESTING_BLOCK,\n                     COUNT (*) * GET_NUM_EQ_NEST (NESTING_OID) as NUM_PART_NEST,\n                     GET_NEST_HEIGHT (NESTING_OID) as NEST_LENGTH,\n                     GET_NEST_WIDTH (NESTING_OID) as NEST_WIDTH,\n                     GET_NUM_EQ_NEST (NESTING_OID) as NUM_EQ_NEST\n                        from\n                        PRD_NEST_PART N, PRD_NEST_GEN NG\n                        where \n                         NG.OID = N.NESTING_OID\n                         GROUP BY PART_OID, NESTING_OID, SYMM_CODE,  NG.ID_SEQ_BLOCK\n        )   NP  \nWHERE  \nNP.part_oid=P.OID AND\nNP.SYMM_CODE=PE.SYMMETRY AND\nPRF.INP_PART_OID = P.OID \nAND PE.PRD_PART_OID= P.OID \nAND PNP.PART_OID=P.OID \nAND PNP.SYMM_CODE=PE.SYMMETRY           \nAND P.PART_TYPE IN (16,19,21,24)  \nAND P.BLOCK_OID=B.OID\nAND PRF.STD_PROFILE_OID=STD.OID\nand B.DESCRIPTION like '%${drNum}%'\n\nUNION ALL\n select\n P.OID as PART_OID,       \n PE.OID as PEOID,\n P.CODE as PART_CODE,\n           DECODE (PE.SYMMETRY,  0,'P', 1,'S', 2,'C', 3,'') as SYMMETRY,\n           P.PART_TYPE,\n           B.CODE as BLOCK_CODE,\n           RPT_COPY_COUNT (P.OID) as NUM_EQ_PART,\n           GET_PART_DESC (P.OID, 1) as PART_DESC,\n           'PL' as ELEM_TYPE,\n           SUBSTR (GET_MATERIAL_CODE (PA.MATERIAL_OID, 1), 1, 12) as MATERIAL,\n           RPT_GET_SD_PLATE_DIM (P.OID, 0) as LENGTH,\n           RPT_GET_SD_PLATE_DIM (P.OID, 1) as WIDTH,\n           PA.THICKNESS,\n           RPT_GET_PART_WEIGHT (P.OID) as WEIGHT_UNIT,\n           RPT_GET_PART_WEIGHT (P.OID) * RPT_COPY_COUNT (P.OID) as TOTAL_WEIGHT,\n           SUBSTR (GET_NEST_ID (NP.NESTING_OID, NP.NESTING_BLOCK), 1, 15) as NEST_ID ,\n           NP.NUM_PART_NEST,\n           NP.NEST_LENGTH,\n           NP.NEST_WIDTH,\n           NP.NUM_EQ_NEST,\n           0 as WH,\n            PA.THICKNESS as WT,\n            0 as FH,\n            0 as FT\n      FROM PRD_EXPL_PART PE,  PRD_PART P, V_RPT_SHDK_PLATE_ATT PA, PRD_NEST_PART PNP, BLOCK B,\n        (\n              select \n                     N.PART_OID,\n                     N.NESTING_OID,\n                     N.SYMM_CODE,\n                     NG.ID_SEQ_BLOCK as NESTING_BLOCK,\n                     COUNT (*) * GET_NUM_EQ_NEST (NESTING_OID) as NUM_PART_NEST,\n                     GET_NEST_HEIGHT (NESTING_OID) as NEST_LENGTH,\n                     GET_NEST_WIDTH (NESTING_OID) as NEST_WIDTH,\n                     GET_NUM_EQ_NEST (NESTING_OID) as NUM_EQ_NEST\n                        from\n                        PRD_NEST_PART N, PRD_NEST_GEN NG\n                        where \n                         NG.OID = N.NESTING_OID\n                         GROUP BY PART_OID, NESTING_OID, SYMM_CODE,  NG.ID_SEQ_BLOCK\n        )   NP  \n     WHERE \n         NP.part_oid=P.OID AND NP.SYMM_CODE=PE.SYMMETRY AND\n     PA.PRD_PART_OID = P.OID AND PE.PRD_PART_OID =PA.PRD_PART_OID\n           AND PNP.PART_OID=P.OID AND PNP.SYMM_CODE=PE.SYMMETRY\n           AND P.PART_TYPE IN (9, 10)\n           AND P.BLOCK_OID=B.OID\n           and B.DESCRIPTION like '%${drNum}%' \n           \n                      UNION ALL\n    select  P.OID as PART_OID,   PE.OID as PEOID, P.CODE  as PART_CODE,\n     DECODE (PE.SYMMETRY,  0,'P', 1,'S', 2,'C', 3,'') as SYMMETRY,\n           P.PART_TYPE,\n           B.CODE as BLOCK_CODE,\n           RPT_COPY_COUNT (P.OID) as NUM_EQ_PART,\n           GET_PART_DESC (P.OID, 1) as PART_DESC,\n           SUBSTR (GET_SECT_TP (prf.std_profile_oid), 1, 2) as ELEM_TYPE,\n           SUBSTR (GET_MATERIAL_CODE (PRF.STD_PROFILE_OID, 2), 1, 12) as MATERIAL,\n           PRF.LENGTH * 1000 as LENGTH,\n           STD.WEB_HEIGHT as WIDTH,\n           STD.WEB_THICKNESS  as THICKNESS,\n           RPT_GET_PART_WEIGHT (P.OID) as WEIGHT_UNIT,\n           RPT_GET_PART_WEIGHT (P.OID) * RPT_COPY_COUNT (P.OID)  as TOTAL_WEIGHT,\n           SUBSTR (GET_NEST_ID (NP.NESTING_OID, NP.NESTING_BLOCK), 1, 15) as NEST_ID,\n           NP.NUM_PART_NEST,\n           NP.NEST_LENGTH,\n           NP.NEST_WIDTH,\n           NP.NUM_EQ_NEST,\n            STD.WEB_HEIGHT as WH,\n            STD.WEB_THICKNESS as WT,\n            STD.FLANGE_HEIGHT as FH,\n            STD.FLANGE_THICKNESS as FT\n      FROM PRD_EXPL_PART PE, PRD_PART P, PRD_PROFILE PRF,  PRD_NEST_PART PNP, BLOCK B,STD_PROFILE STD, \n        (\n              select \n                     N.PART_OID,\n                     N.NESTING_OID,\n                     N.SYMM_CODE,\n                     NG.ID_SEQ_BLOCK as NESTING_BLOCK,\n                     COUNT (*) * GET_NUM_EQ_NEST (NESTING_OID) as NUM_PART_NEST,\n                     GET_NEST_HEIGHT (NESTING_OID) as NEST_LENGTH,\n                     GET_NEST_WIDTH (NESTING_OID) as NEST_WIDTH,\n                     GET_NUM_EQ_NEST (NESTING_OID) as NUM_EQ_NEST\n                        from\n                        PRD_NEST_PART N, PRD_NEST_GEN NG\n                        where \n                         NG.OID = N.NESTING_OID\n                         GROUP BY PART_OID, NESTING_OID, SYMM_CODE,  NG.ID_SEQ_BLOCK\n        )   NP \n     WHERE     \n     NP.part_oid=P.OID AND NP.SYMM_CODE=PE.SYMMETRY AND\n     PRF.PRD_PART_OID = P.OID AND PE.PRD_PART_OID=PRF.PRD_PART_OID\n           AND PNP.PART_OID=P.OID AND PNP.SYMM_CODE=PE.SYMMETRY\n           AND P.PART_TYPE IN (0, 1,2,3,6)\n                               AND P.BLOCK_OID=B.OID\n                               AND PRF.STD_PROFILE_OID=STD.OID\n          and B.DESCRIPTION like '%${drNum}%' \n                    UNION ALL\nselect P.OID as PART_OID,   PE.OID as PEOID, P.CODE  as PART_CODE,\n     DECODE (PE.SYMMETRY,  0,'P', 1,'S', 2,'C', 3,'') as SYMMETRY,\n           P.PART_TYPE,\n            B.CODE as BLOCK_CODE,\n           RPT_COPY_COUNT (P.OID) as NUM_EQ_PART,\n           SUBSTR (GET_PART_DESC (P.OID, 1), 1, 200) as PART_DESC,\n           'PL' as ELEM_TYPE,\n           SUBSTR (GET_MATERIAL_CODE (PA.MATERIAL_OID, 1), 1, 12) as MATERIAL,\n           RPT_INP_GET_PLT_DIMENSIONS (P.OID, 0) * 1000 as LENGTH,\n           RPT_INP_GET_PLT_DIMENSIONS (P.OID, 1) * 1000 as WIDTH,\n           PA.THICKNESS * 1000,\n           RPT_GET_PART_WEIGHT (P.OID) as WEIGHT_UNIT,\n           RPT_GET_PART_WEIGHT (P.OID) * RPT_COPY_COUNT (P.OID) as TOTAL_WEIGHT,\n           SUBSTR (GET_NEST_ID (NP.NESTING_OID, NP.NESTING_BLOCK), 1, 15) as NEST_ID,\n           NP.NUM_PART_NEST,\n           NP.NEST_LENGTH,\n           NP.NEST_WIDTH,\n           NP.NUM_EQ_NEST,\n           0 as WH,\n            PA.THICKNESS * 1000 as WT,\n            0 as FH,\n            0 as FT\n      FROM PRD_EXPL_PART PE, PRD_PART P, INP_PLATE_ATT_DB PA,  PRD_NEST_PART PNP, BLOCK B,\n (\n              select \n                     N.PART_OID,\n                     N.NESTING_OID,\n                     N.SYMM_CODE,\n                     NG.ID_SEQ_BLOCK as NESTING_BLOCK,\n                     COUNT (*) * GET_NUM_EQ_NEST (NESTING_OID) as NUM_PART_NEST,\n                     GET_NEST_HEIGHT (NESTING_OID) as NEST_LENGTH,\n                     GET_NEST_WIDTH (NESTING_OID) as NEST_WIDTH,\n                     GET_NUM_EQ_NEST (NESTING_OID) as NUM_EQ_NEST\n                        from\n                        PRD_NEST_PART N, PRD_NEST_GEN NG\n                        where \n                         NG.OID = N.NESTING_OID\n                         GROUP BY PART_OID, NESTING_OID, SYMM_CODE,  NG.ID_SEQ_BLOCK\n        )   NP  \n     WHERE  NP.part_oid=P.OID AND NP.SYMM_CODE=PE.SYMMETRY AND   PA.INP_PART_OID = P.OID AND PE.PRD_PART_OID=P.OID\n           AND PNP.PART_OID=P.OID AND PNP.SYMM_CODE=PE.SYMMETRY \n           AND P.PART_TYPE IN (14,\n                               15,\n                               18,\n                               20,\n                               22,\n                               23,\n                               25,\n                               26)\n                               AND P.BLOCK_OID=B.OID\n          and B.DESCRIPTION like '%${drNum}%' \n                   UNION ALL\nselect P.OID as PART_OID,   PE.OID as PEOID,  P.CODE  as PART_CODE,\n     DECODE (PE.SYMMETRY,  0,'P', 1,'S', 2,'C', 3,'') as SYMMETRY,\n           P.PART_TYPE,\n           B.CODE as BLOCK_CODE,\n           RPT_COPY_COUNT (P.OID) as NUM_EQ_PART,\n           SUBSTR (GET_PART_DESC (P.OID, 1), 1, 200) as PART_DESC,\n           SUBSTR (GET_SECT_TP (PRF.STD_SECTION_OID), 1, 2) as ELEM_TYPE,\n           SUBSTR (GET_MATERIAL_CODE (PRF.STD_SECTION_OID, 2), 1, 12) as MATERIAL,\n           RPT_GET_PART_LENGTH (P.OID) * 1000 as LENGTH,\n           GET_PRF_W_HEIGHT (PRF.STD_SECTION_OID) as WIDTH,\n           GET_PRF_W_THICK (PRF.STD_SECTION_OID),\n           RPT_GET_PART_WEIGHT (P.OID) as WEIGHT_UNIT,\n           RPT_GET_PART_WEIGHT (P.OID) * RPT_COPY_COUNT (P.OID) as TOTAL_WEIGHT,\n           SUBSTR (GET_NEST_ID (NP.NESTING_OID, NP.NESTING_BLOCK), 1, 15)  as NEST_ID,\n           NP.NUM_PART_NEST,\n           NP.NEST_LENGTH,\n           NP.NEST_WIDTH,\n           NP.NUM_EQ_NEST,\n            0 as WH,\n            GET_PRF_W_THICK (PRF.STD_SECTION_OID) as WT,\n            0 as FH,\n            0 as FT\n      FROM PRD_EXPL_PART PE, PRD_PART P, INP_LC_ATT_DB PRF,  PRD_NEST_PART PNP, BLOCK B,\n        (\n              select \n                     N.PART_OID,\n                     N.NESTING_OID,\n                     N.SYMM_CODE,\n                     NG.ID_SEQ_BLOCK as NESTING_BLOCK,\n                     COUNT (*) * GET_NUM_EQ_NEST (NESTING_OID) as NUM_PART_NEST,\n                     GET_NEST_HEIGHT (NESTING_OID) as NEST_LENGTH,\n                     GET_NEST_WIDTH (NESTING_OID) as NEST_WIDTH,\n                     GET_NUM_EQ_NEST (NESTING_OID) as NUM_EQ_NEST\n                        from\n                        PRD_NEST_PART N, PRD_NEST_GEN NG\n                        where \n                         NG.OID = N.NESTING_OID\n                         GROUP BY PART_OID, NESTING_OID, SYMM_CODE,  NG.ID_SEQ_BLOCK\n        )   NP \n     WHERE  NP.part_oid=P.OID AND NP.SYMM_CODE=PE.SYMMETRY AND PRF.INP_PART_OID = P.OID AND PE.PRD_PART_OID=  P.OID\n           AND PNP.PART_OID=P.OID AND PNP.SYMM_CODE=PE.SYMMETRY \n           AND P.PART_TYPE in (17) AND P.BLOCK_OID=B.OID\n          and B.DESCRIPTION like '%${drNum}%' \n          \n                    UNION ALL\n select P.OID as PART_OID,   PE.OID as PEOID, P.CODE  as PART_CODE,\n     DECODE (PE.SYMMETRY,  0,'P', 1,'S', 2,'C', 3,'') as SYMMETRY,\n           P.PART_TYPE,\n            B.CODE as BLOCK_CODE,\n           1 as NUM_EQ_PART,\n           GET_PART_DESC (P.OID, 1) as PART_DESC,\n           'PL' as ELEM_TYPE,\n           PA.MATQ as MATERIAL,\n           RPT_AS_GET_PLT_DIMENSIONS (P.OID, 0) * 1000 as LENGTH,\n           RPT_AS_GET_PLT_DIMENSIONS (P.OID, 1) * 1000 as WIDTH,\n           PA.THICKNESS,\n           PE.WEIGHT as WEIGHT_UNIT,\n           PE.WEIGHT as TOTAL_WEIGHT,\n           SUBSTR (GET_NEST_ID (NP.NESTING_OID, NP.NESTING_BLOCK), 1, 15)  as NEST_ID,\n           NP.NUM_PART_NEST,\n           NP.NEST_LENGTH,\n           NP.NEST_WIDTH,\n           NP.NUM_EQ_NEST,\n            0 as WH,\n            PA.THICKNESS as WT,\n            0 as FH,\n            0 as FT\n      FROM PRD_PART               P,\n           AS_STD_PART_PLATE      PA,\n           PRD_EXPL_PART          PE , PRD_NEST_PART PNP , BLOCK B,\n        (\n              select \n                     N.PART_OID,\n                     N.NESTING_OID,\n                     N.SYMM_CODE,\n                     NG.ID_SEQ_BLOCK as NESTING_BLOCK,\n                     COUNT (*) * GET_NUM_EQ_NEST (NESTING_OID) as NUM_PART_NEST,\n                     GET_NEST_HEIGHT (NESTING_OID) as NEST_LENGTH,\n                     GET_NEST_WIDTH (NESTING_OID) as NEST_WIDTH,\n                     GET_NUM_EQ_NEST (NESTING_OID) as NUM_EQ_NEST\n                        from\n                        PRD_NEST_PART N, PRD_NEST_GEN NG\n                        where \n                         NG.OID = N.NESTING_OID\n                         GROUP BY PART_OID, NESTING_OID, SYMM_CODE,  NG.ID_SEQ_BLOCK\n        )   NP \n     WHERE   NP.part_oid=P.OID AND   NP.SYMM_CODE=PE.SYMMETRY AND  PA.OID = P.OID\n           AND PNP.PART_OID=P.OID AND PNP.SYMM_CODE=PE.SYMMETRY \n           AND PE.PRD_PART_OID = P.OID\n           AND P.PART_TYPE = 12 AND P.BLOCK_OID=B.OID\n          and B.DESCRIPTION like '%${drNum}%' \n          \n                    UNION ALL\nselect P.OID as PART_OID,   PE.OID as PEOID,  P.CODE  as PART_CODE,\n     DECODE (PE.SYMMETRY,  0,'P', 1,'S', 2,'C', 3,'') as SYMMETRY,\n           P.PART_TYPE,\n            B.CODE as BLOCK_CODE,\n           1 as NUM_EQ_PART,\n           GET_PART_DESC (P.OID, 1) as PART_DESC,\n           DECODE (STD.SECTION,\n                   -1, '',\n                   0, 'FS',\n                   1, 'AS',\n                   2, 'IS',\n                   3, 'TS',\n                   4, 'US',\n                   5, 'BS',\n                   6, 'ST',\n                   7, 'AT',\n                   8, 'OS',\n                   9, 'PS',\n                   10, 'RS',\n                   11, 'MC',\n                   12, 'DB',\n                   13, 'SR',\n                   14, 'HR',\n                   15, 'LI',\n                   16, 'ZL',\n                   17, 'TL',\n                   '') as ELEM_TYPE,\n           SUBSTR (GET_MATERIAL_CODE (STD.MATERIAL_OID, 1), 1, 12) as MATERIAL,\n           PRF.LENGTH as LENGTH,\n           STD.WEB_HEIGHT as WIDTH,\n           STD.WEB_THICKNESS,\n           PE.WEIGHT as WEIGHT_UNIT,\n           PE.WEIGHT as TOTAL_WEIGHT,\n           SUBSTR (GET_NEST_ID (NP.NESTING_OID, NP.NESTING_BLOCK), 1, 15)  as NEST_ID,\n           NP.NUM_PART_NEST,\n           NP.NEST_LENGTH,\n           NP.NEST_WIDTH,\n           NP.NUM_EQ_NEST,\n            STD.WEB_HEIGHT as WH,\n            STD.WEB_THICKNESS as WT,\n            STD.FLANGE_HEIGHT as FH,\n            STD.FLANGE_THICKNESS as FT\n      FROM PRD_PART               P,\n           AS_STD_PART_PROF       PRF,\n           STD_PROFILE            STD,\n           PRD_EXPL_PART          PE, PRD_NEST_PART PNP, BLOCK B,\n        (\n              select \n                     N.PART_OID,\n                     N.NESTING_OID,\n                     N.SYMM_CODE,\n                     NG.ID_SEQ_BLOCK as NESTING_BLOCK,\n                     COUNT (*) * GET_NUM_EQ_NEST (NESTING_OID) as NUM_PART_NEST,\n                     GET_NEST_HEIGHT (NESTING_OID) as NEST_LENGTH,\n                     GET_NEST_WIDTH (NESTING_OID) as NEST_WIDTH,\n                     GET_NUM_EQ_NEST (NESTING_OID) as NUM_EQ_NEST\n                        from\n                        PRD_NEST_PART N, PRD_NEST_GEN NG\n                        where \n                         NG.OID = N.NESTING_OID\n                         GROUP BY PART_OID, NESTING_OID, SYMM_CODE,  NG.ID_SEQ_BLOCK\n        )   NP \n     WHERE  NP.part_oid=P.OID AND  NP.SYMM_CODE=PE.SYMMETRY AND   PRF.OID = P.OID\n           AND PE.PRD_PART_OID = P.OID\n           AND STD.KSE = PRF.KSE\n           AND PNP.PART_OID=P.OID AND PNP.SYMM_CODE=PE.SYMMETRY\n           AND P.PART_TYPE = 7 AND P.BLOCK_OID=B.OID\n          and B.DESCRIPTION like '%${drNum}%' \n          \n          \n          UNION ALL\n select P.OID as PART_OID,   PE.OID as PEOID,  P.CODE  as PART_CODE,\n     DECODE (PE.SYMMETRY,  0,'P', 1,'S', 2,'C', 3,'') as SYMMETRY,\n           P.PART_TYPE,\n            B.CODE as BLOCK_CODE,\n           RPT_COPY_COUNT (P.OID) as NUM_EQ_PART,\n           GET_PART_DESC (P.OID, 1) as PART_DESC,\n           'PL' as ELEM_TYPE,\n           SUBSTR (GET_MATERIAL_CODE (PA.MATERIAL_OID, 1), 1, 12) as MATERIAL,\n           RPT_GET_SD_PLATE_DIM (P.OID, 0) as LENGTH,\n           RPT_GET_SD_PLATE_DIM (P.OID, 1) as WIDTH,\n           PA.THICKNESS,\n           RPT_GET_PART_WEIGHT (P.OID) as WEIGHT_UNIT,\n           RPT_GET_PART_WEIGHT (P.OID) * RPT_COPY_COUNT (P.OID) as TOTAL_WEIGHT,\n           NULL  as NEST_ID,\n           0,\n           0,\n           0,\n           0,\n            0 as WH,\n            PA.THICKNESS as WT,\n            0 as FH,\n            0 as FT\n      FROM V_RPT_PART_NO_NESTING_SD P, V_RPT_SHDK_PLATE_ATT PA,PRD_EXPL_PART PE, BLOCK B\n     WHERE PA.PRD_PART_OID = P.OID AND PE.PRD_PART_OID=  P.OID AND P.BLOCK_OID=B.OID\n          and B.DESCRIPTION like '%${drNum}%' \n          \n          UNION ALL\n    select P.OID as PART_OID,   PE.OID as PEOID,  P.CODE  as PART_CODE,\n     DECODE (PE.SYMMETRY,  0,'P', 1,'S', 2,'C', 3,'') as SYMMETRY,\n           P.PART_TYPE,\n          B.CODE as BLOCK_CODE,\n           RPT_COPY_COUNT (P.OID) as NUM_EQ_PART,\n           GET_PART_DESC (P.OID, 1) as PART_DESC,\n           SUBSTR (GET_SECT_TP (prf.std_profile_oid), 1, 2) as ELEM_TYPE,\n           SUBSTR (GET_MATERIAL_CODE (PRF.STD_PROFILE_OID, 2), 1, 12) as MATERIAL,\n           PRF.LENGTH * 1000 as LENGTH,\n           STD.WEB_HEIGHT as WIDTH,\n           STD.WEB_THICKNESS as THICKNESS,\n           RPT_GET_PART_WEIGHT (P.OID) as WEIGHT_UNIT,\n           RPT_GET_PART_WEIGHT (P.OID) * RPT_COPY_COUNT (P.OID) as TOTAL_WEIGHT,\n           NULL  as NEST_ID,\n           0,\n           0,\n           0,\n           0,\n            STD.WEB_HEIGHT as WH,\n            STD.WEB_THICKNESS as WT,\n            STD.FLANGE_HEIGHT as FH,\n            STD.FLANGE_THICKNESS as FT\n      FROM PRD_EXPL_PART PE, V_PRD_PART_NO_NESTING P, PRD_PROFILE PRF, BLOCK B,STD_PROFILE STD\n     WHERE     PRF.PRD_PART_OID = P.OID AND PE.PRD_PART_OID=  P.OID\n           AND P.PART_TYPE IN (0,\n                               1,\n                               2,\n                               3,\n                               6)\n                               AND PRF.STD_PROFILE_OID=STD.OID\n                               AND P.BLOCK_OID=B.OID\n          and B.DESCRIPTION like '%${drNum}%' \n          \n          UNION ALL\n    select P.OID as PART_OID,   PE.OID as PEOID,  P.CODE  as PART_CODE,\n     DECODE (PE.SYMMETRY,  0,'P', 1,'S', 2,'C', 3,'') as SYMMETRY,\n           P.PART_TYPE,\n            B.CODE as BLOCK_CODE,\n           RPT_COPY_COUNT (P.OID) as NUM_EQ_PART,\n           SUBSTR (GET_PART_DESC (P.OID, 1), 1, 200) as PART_DESC,\n           'PL' as ELEM_TYPE,\n           SUBSTR (GET_MATERIAL_CODE (PA.MATERIAL_OID, 1), 1, 12) as MATERIAL,\n           RPT_INP_GET_PLT_DIMENSIONS (INP_PART_OID, 0) * 1000 as LENGTH,\n           RPT_INP_GET_PLT_DIMENSIONS (INP_PART_OID, 1) * 1000 as WIDTH,\n           PA.THICKNESS * 1000,\n           RPT_GET_PART_WEIGHT (P.OID) as WEIGHT_UNIT,\n           RPT_GET_PART_WEIGHT (P.OID) * RPT_COPY_COUNT (P.OID) as TOTAL_WEIGHT,\n           NULL  as NEST_ID,\n           0,\n           0,\n           0,\n           0,\n            0 as WH,\n            PA.THICKNESS as WT,\n            0 as FH,\n            0 as FT\n      FROM PRD_EXPL_PART PE,V_PRD_PART_NO_NESTING P, INP_PLATE_ATT_DB PA, BLOCK B\n     WHERE     PA.INP_PART_OID = P.OID AND PE.PRD_PART_OID=  P.OID\n           AND P.PART_TYPE IN (14,\n                               15,\n                               18,\n                               20,\n                               22,\n                               23,\n                               25,\n                               26)AND P.BLOCK_OID=B.OID\n          and B.DESCRIPTION like '%${drNum}%' \n          \n          UNION ALL\nselect P.OID as PART_OID,   PE.OID as PEOID,  P.CODE  as PART_CODE,\n     DECODE (PE.SYMMETRY,  0,'P', 1,'S', 2,'C', 3,'') as SYMMETRY,\n           P.PART_TYPE,\n           B.CODE as BLOCK_CODE,\n           RPT_COPY_COUNT (P.OID) as NUM_EQ_PART,\n           SUBSTR (GET_PART_DESC (P.OID, 1), 1, 200) as PART_DESC,\n           SUBSTR (GET_SECT_TP (prf.std_profile_oid), 1, 2) as ELEM_TYPE,\n           SUBSTR (GET_MATERIAL_CODE (PRF.STD_PROFILE_OID, 2), 1, 12) as MATERIAL,\n           RPT_GET_PART_LENGTH (P.OID) * 1000 as LENGTH,\n           STD.WEB_HEIGHT as WIDTH,\n           STD.WEB_THICKNESS,\n           RPT_GET_PART_WEIGHT (P.OID) as WEIGHT_UNIT,\n           RPT_GET_PART_WEIGHT (P.OID) * RPT_COPY_COUNT (P.OID) as TOTAL_WEIGHT,\n           NULL  as NEST_ID,\n           0,\n           0,\n           0,\n           0,\n            STD.WEB_HEIGHT as WH,\n            STD.WEB_THICKNESS as WT,\n            STD.FLANGE_HEIGHT as FH,\n            STD.FLANGE_THICKNESS as FT\n      FROM PRD_EXPL_PART PE,V_PRD_PART_NO_NESTING P, INP_PROFILE_ATT_DB PRF, BLOCK B,STD_PROFILE STD\n     WHERE     PRF.INP_PART_OID = P.OID AND PE.PRD_PART_OID=  P.OID AND PRF.STD_PROFILE_OID=STD.OID\n           AND P.PART_TYPE IN (16,\n                               19,\n                               21,\n                               24)AND P.BLOCK_OID=B.OID\n          and B.DESCRIPTION like '%${drNum}%' \n          UNION ALL\n select P.OID as PART_OID,   PE.OID as PEOID,  P.CODE  as PART_CODE,\n     DECODE (PE.SYMMETRY,  0,'P', 1,'S', 2,'C', 3,'') as SYMMETRY,\n           P.PART_TYPE,\n           B.CODE as BLOCK_CODE,\n           RPT_COPY_COUNT (P.OID) as NUM_EQ_PART,\n           SUBSTR (GET_PART_DESC (P.OID, 1), 1, 200) as PART_DESC,\n           SUBSTR (GET_SECT_TP (PRF.STD_SECTION_OID), 1, 2) as ELEM_TYPE,\n           SUBSTR (GET_MATERIAL_CODE (PRF.STD_SECTION_OID, 2), 1, 12) as MATERIAL,\n           RPT_GET_PART_LENGTH (P.OID) * 1000 as LENGTH,\n           GET_PRF_W_HEIGHT (PRF.STD_SECTION_OID) as WIDTH,\n           GET_PRF_W_THICK (PRF.STD_SECTION_OID),\n           RPT_GET_PART_WEIGHT (P.OID) as WEIGHT_UNIT,\n           RPT_GET_PART_WEIGHT (P.OID) * RPT_COPY_COUNT (P.OID) as TOTAL_WEIGHT,\n           NULL  as NEST_ID,\n           0,\n           0,\n           0,\n           0,\n            0 as WH,\n            GET_PRF_W_THICK (PRF.STD_SECTION_OID) as WT,\n            0 as FH,\n            0 as FT\n      FROM PRD_EXPL_PART PE,V_PRD_PART_NO_NESTING P, INP_LC_ATT_DB PRF, BLOCK B\n     WHERE PRF.INP_PART_OID = P.OID AND P.PART_TYPE = 17 AND PE.PRD_PART_OID=  P.OID AND P.BLOCK_OID=B.OID\n          and B.DESCRIPTION like '%${drNum}%' \n          \n          UNION ALL\n select P.OID as PART_OID,   PE.OID as PEOID,  P.CODE,\n     DECODE (PE.SYMMETRY,  0,'P', 1,'S', 2,'C', 3,'') as SYMMETRY,\n           P.PART_TYPE,\n            B.CODE as BLOCK_CODE,\n           1 as NUM_EQ_PART,\n           GET_PART_DESC (P.OID, 1) as PART_DESC,\n           'PL' as ELEM_TYPE,\n           PA.MATQ as MATERIAL,\n           RPT_AS_GET_PLT_DIMENSIONS (P.OID, 0) * 1000 as LENGTH,\n           RPT_AS_GET_PLT_DIMENSIONS (P.OID, 1) * 1000 as WIDTH,\n           PA.THICKNESS,\n           PE.WEIGHT as WEIGHT_UNIT,\n           PE.WEIGHT as TOTAL_WEIGHT,\n           NULL  as NEST_ID,\n           0,\n           0,\n           0,\n           0,\n            0 as WH,\n            PA.THICKNESS as WT,\n            0 as FH,\n            0 as FT\n      FROM V_PRD_PART_NO_NESTING P, AS_STD_PART_PLATE PA, PRD_EXPL_PART PE, BLOCK B\n     WHERE PA.OID = P.OID AND PE.PRD_PART_OID = P.OID AND P.PART_TYPE = 12  AND P.BLOCK_OID=B.OID\n          and B.DESCRIPTION like '%${drNum}%' \n          UNION ALL\nselect  PE.PRD_PART_OID as PART_OID,  PE.OID as PEOID,  P.CODE as PART_CODE,\n     DECODE (PE.SYMMETRY,  0,'P', 1,'S', 2,'C', 3,'') as SYMMETRY,\n           P.PART_TYPE,\n         B.CODE as BLOCK_CODE,\n           1 as NUM_EQ_PART,\n           GET_PART_DESC (P.OID, 1) as PART_DESC,\n           'PL' as ELEM_TYPE,\n           PA.MATQ as MATERIAL,\n           RPT_AS_GET_PLT_DIMENSIONS (P.OID, 0) * 1000 as LENGTH,\n           RPT_AS_GET_PLT_DIMENSIONS (P.OID, 1) * 1000 as WIDTH,\n           PA.THICKNESS,\n           PE.WEIGHT as WEIGHT_UNIT,\n           PE.WEIGHT as TOTAL_WEIGHT,\n           NULL  as NEST_ID,\n           0,\n           0,\n           0,\n           0,\n            0 as WH,\n            PA.THICKNESS as WT,\n            0 as FH,\n            0 as FT\n      FROM V_PRD_PART_NO_NESTING P, AS_PART_CONT_PLATE PA, PRD_EXPL_PART PE, BLOCK B\n     WHERE PA.OID = P.OID AND PE.PRD_PART_OID = P.OID AND P.PART_TYPE = 12  AND P.BLOCK_OID=B.OID\n          and B.DESCRIPTION like '%${drNum}%' \n          UNION ALL\nselect P.OID as PART_OID,   PE.OID as PEOID, P.CODE as PART_CODE,\n     DECODE (PE.SYMMETRY,  0,'P', 1,'S', 2,'C', 3,'') as SYMMETRY,\n           P.PART_TYPE,\n           B.CODE as BLOCK_CODE,\n           1 as NUM_EQ_PART,\n           GET_PART_DESC (P.OID, 1) as PART_DESC,\n           DECODE (STD.SECTION,\n                   -1, '',\n                   0, 'FS',\n                   1, 'AS',\n                   2, 'IS',\n                   3, 'TS',\n                   4, 'US',\n                   5, 'BS',\n                   6, 'ST',\n                   7, 'AT',\n                   8, 'OS',\n                   9, 'PS',\n                   10, 'RS',\n                   11, 'MC',\n                   12, 'DB',\n                   13, 'SR',\n                   14, 'HR',\n                   15, 'LI',\n                   16, 'ZL',\n                   17, 'TL',\n                   '') as ELEM_TYPE,\n           SUBSTR (GET_MATERIAL_CODE (STD.MATERIAL_OID, 1), 1, 12) as MATERIAL,\n           PRF.LENGTH as LENGTH,\n           STD.WEB_HEIGHT as WIDTH,\n           STD.WEB_THICKNESS,\n           PE.WEIGHT as WEIGHT_UNIT,\n           PE.WEIGHT as TOTAL_WEIGHT,\n           NULL  as NEST_ID,\n           0,\n           0,\n           0,\n           0,\n            STD.WEB_HEIGHT as WH,\n            STD.WEB_THICKNESS as WT,\n            STD.FLANGE_HEIGHT as FH,\n            STD.FLANGE_THICKNESS as FT\n      FROM V_PRD_PART_NO_NESTING  P,\n           AS_STD_PART_PROF       PRF,\n           STD_PROFILE            STD,\n           PRD_EXPL_PART          PE, BLOCK B\n     WHERE     PRF.OID = P.OID\n           AND PE.PRD_PART_OID = P.OID\n           AND STD.KSE = PRF.KSE\n           AND P.PART_TYPE = 7\n             AND P.BLOCK_OID=B.OID\n          and B.DESCRIPTION like '%${drNum}%' \n                  ) P\norder by P.PART_CODE,P.SYMMETRY"
  //private def partsByDrawingNum(drNum: String): String =s"select distinct\nP.PART_OID as PART_OID,\nP.PEOID as EXPL_OID,\nP.PART_CODE,\nP.SYMMETRY,\nP.PART_TYPE,\nP.BLOCK_CODE,\nP.BLOCK_CODE as DESCRIPTION,\nP.NUM_EQ_PART,\nP.PART_DESC,\nP.ELEM_TYPE,\nP.MATERIAL,\nP.LENGTH,\nP.WIDTH,\nP.THICKNESS,\nP.WEIGHT_UNIT,\nP.TOTAL_WEIGHT,\nP.NEST_ID,\nP.NEST_LENGTH,\nP.NEST_WIDTH,\nP.NUM_EQ_NEST,\nP.WH,\nP.WT,\nP.FH,\nP.FT , RPT_GET_STR_GROUP(P.PART_OID) as STRGROUP \nfrom\n(\nselect \nP.OID as PART_OID,  \nPE.OID as PEOID, \nP.CODE  as PART_CODE,      \nDECODE (PE.SYMMETRY,  0,'P', 1,'S', 2,'C', 3,'') as SYMMETRY,            \nP.PART_TYPE,\n B.CODE as BLOCK_CODE,\nRPT_COPY_COUNT (P.OID) as NUM_EQ_PART,\nSUBSTR (GET_PART_DESC (P.OID, 1), 1, 200) as PART_DESC,            \nSUBSTR (GET_SECT_TP (prf.std_profile_oid), 1, 2) as ELEM_TYPE,\nSUBSTR (GET_MATERIAL_CODE (PRF.STD_PROFILE_OID, 2), 1, 12) as MATERIAL,\nRPT_GET_PART_LENGTH (P.OID) * 1000 as LENGTH,            \nSTD.WEB_HEIGHT as WIDTH,\nSTD.WEB_THICKNESS as THICKNESS,\nRPT_GET_PART_WEIGHT (P.OID) as WEIGHT_UNIT,            \nRPT_GET_PART_WEIGHT (P.OID) * RPT_COPY_COUNT (P.OID) as TOTAL_WEIGHT,\nSUBSTR (GET_NEST_ID (NP.NESTING_OID, NP.NESTING_BLOCK), 1, 15)  as NEST_ID,            \nNP.NUM_PART_NEST,\nNP.NEST_LENGTH,\nNP.NEST_WIDTH,\nNP.NUM_EQ_NEST,\nSTD.WEB_HEIGHT as WH,\nSTD.WEB_THICKNESS as WT,\nSTD.FLANGE_HEIGHT as FH,\nSTD.FLANGE_THICKNESS as FT    \nFROM \nPRD_EXPL_PART PE, PRD_PART P, INP_PROFILE_ATT_DB PRF, PRD_NEST_PART PNP, BLOCK B,STD_PROFILE STD, \n        (\n              select \n                     N.PART_OID,\n                     N.NESTING_OID,\n                     N.SYMM_CODE,\n                     NG.ID_SEQ_BLOCK as NESTING_BLOCK,\n                     COUNT (*) * GET_NUM_EQ_NEST (NESTING_OID) as NUM_PART_NEST,\n                     GET_NEST_HEIGHT (NESTING_OID) as NEST_LENGTH,\n                     GET_NEST_WIDTH (NESTING_OID) as NEST_WIDTH,\n                     GET_NUM_EQ_NEST (NESTING_OID) as NUM_EQ_NEST\n                        from\n                        PRD_NEST_PART N, PRD_NEST_GEN NG\n                        where \n                         NG.OID = N.NESTING_OID\n                         GROUP BY PART_OID, NESTING_OID, SYMM_CODE,  NG.ID_SEQ_BLOCK\n        )   NP  \nWHERE  \nNP.part_oid=P.OID AND\n(NP.SYMM_CODE=PE.SYMMETRY or NP.SYMM_CODE=2) AND\nPRF.INP_PART_OID = P.OID \nAND PE.PRD_PART_OID= P.OID \nAND PNP.PART_OID=P.OID \nAND (PNP.SYMM_CODE=PE.SYMMETRY or PNP.SYMM_CODE=2)          \nAND P.PART_TYPE IN (16,19,21,24)  \nAND P.BLOCK_OID=B.OID\nAND PRF.STD_PROFILE_OID=STD.OID\nand B.DESCRIPTION like '%${drNum}%'\n\nUNION ALL\n select\n P.OID as PART_OID,       \n PE.OID as PEOID,\n P.CODE as PART_CODE,\n           DECODE (PE.SYMMETRY,  0,'P', 1,'S', 2,'C', 3,'') as SYMMETRY,\n           P.PART_TYPE,\n           B.CODE as BLOCK_CODE,\n           RPT_COPY_COUNT (P.OID) as NUM_EQ_PART,\n           GET_PART_DESC (P.OID, 1) as PART_DESC,\n           'PL' as ELEM_TYPE,\n           SUBSTR (GET_MATERIAL_CODE (PA.MATERIAL_OID, 1), 1, 12) as MATERIAL,\n           RPT_GET_SD_PLATE_DIM (P.OID, 0) as LENGTH,\n           RPT_GET_SD_PLATE_DIM (P.OID, 1) as WIDTH,\n           PA.THICKNESS,\n           RPT_GET_PART_WEIGHT (P.OID) as WEIGHT_UNIT,\n           RPT_GET_PART_WEIGHT (P.OID) * RPT_COPY_COUNT (P.OID) as TOTAL_WEIGHT,\n           SUBSTR (GET_NEST_ID (NP.NESTING_OID, NP.NESTING_BLOCK), 1, 15) as NEST_ID ,\n           NP.NUM_PART_NEST,\n           NP.NEST_LENGTH,\n           NP.NEST_WIDTH,\n           NP.NUM_EQ_NEST,\n           0 as WH,\n            PA.THICKNESS as WT,\n            0 as FH,\n            0 as FT\n      FROM PRD_EXPL_PART PE,  PRD_PART P, V_RPT_SHDK_PLATE_ATT PA, PRD_NEST_PART PNP, BLOCK B,\n        (\n              select \n                     N.PART_OID,\n                     N.NESTING_OID,\n                     N.SYMM_CODE,\n                     NG.ID_SEQ_BLOCK as NESTING_BLOCK,\n                     COUNT (*) * GET_NUM_EQ_NEST (NESTING_OID) as NUM_PART_NEST,\n                     GET_NEST_HEIGHT (NESTING_OID) as NEST_LENGTH,\n                     GET_NEST_WIDTH (NESTING_OID) as NEST_WIDTH,\n                     GET_NUM_EQ_NEST (NESTING_OID) as NUM_EQ_NEST\n                        from\n                        PRD_NEST_PART N, PRD_NEST_GEN NG\n                        where \n                         NG.OID = N.NESTING_OID\n                         GROUP BY PART_OID, NESTING_OID, SYMM_CODE,  NG.ID_SEQ_BLOCK\n        )   NP  \n     WHERE \n         NP.part_oid=P.OID AND (NP.SYMM_CODE=PE.SYMMETRY or NP.SYMM_CODE=2) AND\n     PA.PRD_PART_OID = P.OID AND PE.PRD_PART_OID =PA.PRD_PART_OID\n           AND PNP.PART_OID=P.OID AND (PNP.SYMM_CODE=PE.SYMMETRY or PNP.SYMM_CODE=2)\n           AND P.PART_TYPE IN (9, 10)\n           AND P.BLOCK_OID=B.OID\n           and B.DESCRIPTION like '%${drNum}%' \n           \n                      UNION ALL\n    select  P.OID as PART_OID,   PE.OID as PEOID, P.CODE  as PART_CODE,\n     DECODE (PE.SYMMETRY,  0,'P', 1,'S', 2,'C', 3,'') as SYMMETRY,\n           P.PART_TYPE,\n           B.CODE as BLOCK_CODE,\n           RPT_COPY_COUNT (P.OID) as NUM_EQ_PART,\n           GET_PART_DESC (P.OID, 1) as PART_DESC,\n           SUBSTR (GET_SECT_TP (prf.std_profile_oid), 1, 2) as ELEM_TYPE,\n           SUBSTR (GET_MATERIAL_CODE (PRF.STD_PROFILE_OID, 2), 1, 12) as MATERIAL,\n           PRF.LENGTH * 1000 as LENGTH,\n           STD.WEB_HEIGHT as WIDTH,\n           STD.WEB_THICKNESS  as THICKNESS,\n           RPT_GET_PART_WEIGHT (P.OID) as WEIGHT_UNIT,\n           RPT_GET_PART_WEIGHT (P.OID) * RPT_COPY_COUNT (P.OID)  as TOTAL_WEIGHT,\n           SUBSTR (GET_NEST_ID (NP.NESTING_OID, NP.NESTING_BLOCK), 1, 15) as NEST_ID,\n           NP.NUM_PART_NEST,\n           NP.NEST_LENGTH,\n           NP.NEST_WIDTH,\n           NP.NUM_EQ_NEST,\n            STD.WEB_HEIGHT as WH,\n            STD.WEB_THICKNESS as WT,\n            STD.FLANGE_HEIGHT as FH,\n            STD.FLANGE_THICKNESS as FT\n      FROM PRD_EXPL_PART PE, PRD_PART P, PRD_PROFILE PRF,  PRD_NEST_PART PNP, BLOCK B,STD_PROFILE STD, \n        (\n              select \n                     N.PART_OID,\n                     N.NESTING_OID,\n                     N.SYMM_CODE,\n                     NG.ID_SEQ_BLOCK as NESTING_BLOCK,\n                     COUNT (*) * GET_NUM_EQ_NEST (NESTING_OID) as NUM_PART_NEST,\n                     GET_NEST_HEIGHT (NESTING_OID) as NEST_LENGTH,\n                     GET_NEST_WIDTH (NESTING_OID) as NEST_WIDTH,\n                     GET_NUM_EQ_NEST (NESTING_OID) as NUM_EQ_NEST\n                        from\n                        PRD_NEST_PART N, PRD_NEST_GEN NG\n                        where \n                         NG.OID = N.NESTING_OID\n                         GROUP BY PART_OID, NESTING_OID, SYMM_CODE,  NG.ID_SEQ_BLOCK\n        )   NP \n     WHERE     \n     NP.part_oid=P.OID AND (NP.SYMM_CODE=PE.SYMMETRY or NP.SYMM_CODE=2) AND\n     PRF.PRD_PART_OID = P.OID AND PE.PRD_PART_OID=PRF.PRD_PART_OID\n           AND PNP.PART_OID=P.OID AND (PNP.SYMM_CODE=PE.SYMMETRY or PNP.SYMM_CODE=2)\n           AND P.PART_TYPE IN (0, 1,2,3,6)\n                               AND P.BLOCK_OID=B.OID\n                               AND PRF.STD_PROFILE_OID=STD.OID\n          and B.DESCRIPTION like '%${drNum}%' \n                    UNION ALL\nselect P.OID as PART_OID,   PE.OID as PEOID, P.CODE  as PART_CODE,\n     DECODE (PE.SYMMETRY,  0,'P', 1,'S', 2,'C', 3,'') as SYMMETRY,\n           P.PART_TYPE,\n            B.CODE as BLOCK_CODE,\n           RPT_COPY_COUNT (P.OID) as NUM_EQ_PART,\n           SUBSTR (GET_PART_DESC (P.OID, 1), 1, 200) as PART_DESC,\n           'PL' as ELEM_TYPE,\n           SUBSTR (GET_MATERIAL_CODE (PA.MATERIAL_OID, 1), 1, 12) as MATERIAL,\n           RPT_INP_GET_PLT_DIMENSIONS (P.OID, 0) * 1000 as LENGTH,\n           RPT_INP_GET_PLT_DIMENSIONS (P.OID, 1) * 1000 as WIDTH,\n           PA.THICKNESS * 1000,\n           RPT_GET_PART_WEIGHT (P.OID) as WEIGHT_UNIT,\n           RPT_GET_PART_WEIGHT (P.OID) * RPT_COPY_COUNT (P.OID) as TOTAL_WEIGHT,\n           SUBSTR (GET_NEST_ID (NP.NESTING_OID, NP.NESTING_BLOCK), 1, 15) as NEST_ID,\n           NP.NUM_PART_NEST,\n           NP.NEST_LENGTH,\n           NP.NEST_WIDTH,\n           NP.NUM_EQ_NEST,\n           0 as WH,\n            PA.THICKNESS * 1000 as WT,\n            0 as FH,\n            0 as FT\n      FROM PRD_EXPL_PART PE, PRD_PART P, INP_PLATE_ATT_DB PA,  PRD_NEST_PART PNP, BLOCK B,\n (\n              select \n                     N.PART_OID,\n                     N.NESTING_OID,\n                     N.SYMM_CODE,\n                     NG.ID_SEQ_BLOCK as NESTING_BLOCK,\n                     COUNT (*) * GET_NUM_EQ_NEST (NESTING_OID) as NUM_PART_NEST,\n                     GET_NEST_HEIGHT (NESTING_OID) as NEST_LENGTH,\n                     GET_NEST_WIDTH (NESTING_OID) as NEST_WIDTH,\n                     GET_NUM_EQ_NEST (NESTING_OID) as NUM_EQ_NEST\n                        from\n                        PRD_NEST_PART N, PRD_NEST_GEN NG\n                        where \n                         NG.OID = N.NESTING_OID\n                         GROUP BY PART_OID, NESTING_OID, SYMM_CODE,  NG.ID_SEQ_BLOCK\n        )   NP  \n     WHERE  NP.part_oid=P.OID \n     AND (NP.SYMM_CODE=PE.SYMMETRY OR NP.SYMM_CODE=2) \n     AND   PA.INP_PART_OID = P.OID AND PE.PRD_PART_OID=P.OID\n           AND PNP.PART_OID=P.OID AND (PNP.SYMM_CODE=PE.SYMMETRY  or PNP.SYMM_CODE=2)\n           AND P.PART_TYPE IN (14,\n                               15,\n                               18,\n                               20,\n                               22,\n                               23,\n                               25,\n                               26)\n                               AND P.BLOCK_OID=B.OID\n          and B.DESCRIPTION like '%${drNum}%' \n                   UNION ALL\nselect P.OID as PART_OID,   PE.OID as PEOID,  P.CODE  as PART_CODE,\n     DECODE (PE.SYMMETRY,  0,'P', 1,'S', 2,'C', 3,'') as SYMMETRY,\n           P.PART_TYPE,\n           B.CODE as BLOCK_CODE,\n           RPT_COPY_COUNT (P.OID) as NUM_EQ_PART,\n           SUBSTR (GET_PART_DESC (P.OID, 1), 1, 200) as PART_DESC,\n           SUBSTR (GET_SECT_TP (PRF.STD_SECTION_OID), 1, 2) as ELEM_TYPE,\n           SUBSTR (GET_MATERIAL_CODE (PRF.STD_SECTION_OID, 2), 1, 12) as MATERIAL,\n           RPT_GET_PART_LENGTH (P.OID) * 1000 as LENGTH,\n           GET_PRF_W_HEIGHT (PRF.STD_SECTION_OID) as WIDTH,\n           GET_PRF_W_THICK (PRF.STD_SECTION_OID),\n           RPT_GET_PART_WEIGHT (P.OID) as WEIGHT_UNIT,\n           RPT_GET_PART_WEIGHT (P.OID) * RPT_COPY_COUNT (P.OID) as TOTAL_WEIGHT,\n           SUBSTR (GET_NEST_ID (NP.NESTING_OID, NP.NESTING_BLOCK), 1, 15)  as NEST_ID,\n           NP.NUM_PART_NEST,\n           NP.NEST_LENGTH,\n           NP.NEST_WIDTH,\n           NP.NUM_EQ_NEST,\n            0 as WH,\n            GET_PRF_W_THICK (PRF.STD_SECTION_OID) as WT,\n            0 as FH,\n            0 as FT\n      FROM PRD_EXPL_PART PE, PRD_PART P, INP_LC_ATT_DB PRF,  PRD_NEST_PART PNP, BLOCK B,\n        (\n              select \n                     N.PART_OID,\n                     N.NESTING_OID,\n                     N.SYMM_CODE,\n                     NG.ID_SEQ_BLOCK as NESTING_BLOCK,\n                     COUNT (*) * GET_NUM_EQ_NEST (NESTING_OID) as NUM_PART_NEST,\n                     GET_NEST_HEIGHT (NESTING_OID) as NEST_LENGTH,\n                     GET_NEST_WIDTH (NESTING_OID) as NEST_WIDTH,\n                     GET_NUM_EQ_NEST (NESTING_OID) as NUM_EQ_NEST\n                        from\n                        PRD_NEST_PART N, PRD_NEST_GEN NG\n                        where \n                         NG.OID = N.NESTING_OID\n                         GROUP BY PART_OID, NESTING_OID, SYMM_CODE,  NG.ID_SEQ_BLOCK\n        )   NP \n     WHERE  NP.part_oid=P.OID AND (NP.SYMM_CODE=PE.SYMMETRY or NP.SYMM_CODE=2) AND PRF.INP_PART_OID = P.OID AND PE.PRD_PART_OID=  P.OID\n           AND PNP.PART_OID=P.OID AND (PNP.SYMM_CODE=PE.SYMMETRY  or PNP.SYMM_CODE=2)\n           AND P.PART_TYPE in (17) AND P.BLOCK_OID=B.OID\n          and B.DESCRIPTION like '%${drNum}%' \n          \n                    UNION ALL\n select P.OID as PART_OID,   PE.OID as PEOID, P.CODE  as PART_CODE,\n     DECODE (PE.SYMMETRY,  0,'P', 1,'S', 2,'C', 3,'') as SYMMETRY,\n           P.PART_TYPE,\n            B.CODE as BLOCK_CODE,\n           1 as NUM_EQ_PART,\n           GET_PART_DESC (P.OID, 1) as PART_DESC,\n           'PL' as ELEM_TYPE,\n           PA.MATQ as MATERIAL,\n           RPT_AS_GET_PLT_DIMENSIONS (P.OID, 0) * 1000 as LENGTH,\n           RPT_AS_GET_PLT_DIMENSIONS (P.OID, 1) * 1000 as WIDTH,\n           PA.THICKNESS,\n           PE.WEIGHT as WEIGHT_UNIT,\n           PE.WEIGHT as TOTAL_WEIGHT,\n           SUBSTR (GET_NEST_ID (NP.NESTING_OID, NP.NESTING_BLOCK), 1, 15)  as NEST_ID,\n           NP.NUM_PART_NEST,\n           NP.NEST_LENGTH,\n           NP.NEST_WIDTH,\n           NP.NUM_EQ_NEST,\n            0 as WH,\n            PA.THICKNESS as WT,\n            0 as FH,\n            0 as FT\n      FROM PRD_PART               P,\n           AS_STD_PART_PLATE      PA,\n           PRD_EXPL_PART          PE , PRD_NEST_PART PNP , BLOCK B,\n        (\n              select \n                     N.PART_OID,\n                     N.NESTING_OID,\n                     N.SYMM_CODE,\n                     NG.ID_SEQ_BLOCK as NESTING_BLOCK,\n                     COUNT (*) * GET_NUM_EQ_NEST (NESTING_OID) as NUM_PART_NEST,\n                     GET_NEST_HEIGHT (NESTING_OID) as NEST_LENGTH,\n                     GET_NEST_WIDTH (NESTING_OID) as NEST_WIDTH,\n                     GET_NUM_EQ_NEST (NESTING_OID) as NUM_EQ_NEST\n                        from\n                        PRD_NEST_PART N, PRD_NEST_GEN NG\n                        where \n                         NG.OID = N.NESTING_OID\n                         GROUP BY PART_OID, NESTING_OID, SYMM_CODE,  NG.ID_SEQ_BLOCK\n        )   NP \n     WHERE   NP.part_oid=P.OID AND   (NP.SYMM_CODE=PE.SYMMETRY or NP.SYMM_CODE=2) AND  PA.OID = P.OID\n           AND PNP.PART_OID=P.OID AND (PNP.SYMM_CODE=PE.SYMMETRY  or PNP.SYMM_CODE=2)\n           AND PE.PRD_PART_OID = P.OID\n           AND P.PART_TYPE = 12 AND P.BLOCK_OID=B.OID\n          and B.DESCRIPTION like '%${drNum}%' \n          \n                    UNION ALL\nselect P.OID as PART_OID,   PE.OID as PEOID,  P.CODE  as PART_CODE,\n     DECODE (PE.SYMMETRY,  0,'P', 1,'S', 2,'C', 3,'') as SYMMETRY,\n           P.PART_TYPE,\n            B.CODE as BLOCK_CODE,\n           1 as NUM_EQ_PART,\n           GET_PART_DESC (P.OID, 1) as PART_DESC,\n           DECODE (STD.SECTION,\n                   -1, '',\n                   0, 'FS',\n                   1, 'AS',\n                   2, 'IS',\n                   3, 'TS',\n                   4, 'US',\n                   5, 'BS',\n                   6, 'ST',\n                   7, 'AT',\n                   8, 'OS',\n                   9, 'PS',\n                   10, 'RS',\n                   11, 'MC',\n                   12, 'DB',\n                   13, 'SR',\n                   14, 'HR',\n                   15, 'LI',\n                   16, 'ZL',\n                   17, 'TL',\n                   '') as ELEM_TYPE,\n           SUBSTR (GET_MATERIAL_CODE (STD.MATERIAL_OID, 1), 1, 12) as MATERIAL,\n           PRF.LENGTH as LENGTH,\n           STD.WEB_HEIGHT as WIDTH,\n           STD.WEB_THICKNESS,\n           PE.WEIGHT as WEIGHT_UNIT,\n           PE.WEIGHT as TOTAL_WEIGHT,\n           SUBSTR (GET_NEST_ID (NP.NESTING_OID, NP.NESTING_BLOCK), 1, 15)  as NEST_ID,\n           NP.NUM_PART_NEST,\n           NP.NEST_LENGTH,\n           NP.NEST_WIDTH,\n           NP.NUM_EQ_NEST,\n            STD.WEB_HEIGHT as WH,\n            STD.WEB_THICKNESS as WT,\n            STD.FLANGE_HEIGHT as FH,\n            STD.FLANGE_THICKNESS as FT\n      FROM PRD_PART               P,\n           AS_STD_PART_PROF       PRF,\n           STD_PROFILE            STD,\n           PRD_EXPL_PART          PE, PRD_NEST_PART PNP, BLOCK B,\n        (\n              select \n                     N.PART_OID,\n                     N.NESTING_OID,\n                     N.SYMM_CODE,\n                     NG.ID_SEQ_BLOCK as NESTING_BLOCK,\n                     COUNT (*) * GET_NUM_EQ_NEST (NESTING_OID) as NUM_PART_NEST,\n                     GET_NEST_HEIGHT (NESTING_OID) as NEST_LENGTH,\n                     GET_NEST_WIDTH (NESTING_OID) as NEST_WIDTH,\n                     GET_NUM_EQ_NEST (NESTING_OID) as NUM_EQ_NEST\n                        from\n                        PRD_NEST_PART N, PRD_NEST_GEN NG\n                        where \n                         NG.OID = N.NESTING_OID\n                         GROUP BY PART_OID, NESTING_OID, SYMM_CODE,  NG.ID_SEQ_BLOCK\n        )   NP \n     WHERE  NP.part_oid=P.OID AND  (NP.SYMM_CODE=PE.SYMMETRY or NP.SYMM_CODE=2) AND   PRF.OID = P.OID\n           AND PE.PRD_PART_OID = P.OID\n           AND STD.KSE = PRF.KSE\n           AND PNP.PART_OID=P.OID AND (PNP.SYMM_CODE=PE.SYMMETRY or PNP.SYMM_CODE=2)\n           AND P.PART_TYPE = 7 AND P.BLOCK_OID=B.OID\n          and B.DESCRIPTION like '%${drNum}%' \n          \n          \n          UNION ALL\n select P.OID as PART_OID,   PE.OID as PEOID,  P.CODE  as PART_CODE,\n     DECODE (PE.SYMMETRY,  0,'P', 1,'S', 2,'C', 3,'') as SYMMETRY,\n           P.PART_TYPE,\n            B.CODE as BLOCK_CODE,\n           RPT_COPY_COUNT (P.OID) as NUM_EQ_PART,\n           GET_PART_DESC (P.OID, 1) as PART_DESC,\n           'PL' as ELEM_TYPE,\n           SUBSTR (GET_MATERIAL_CODE (PA.MATERIAL_OID, 1), 1, 12) as MATERIAL,\n           RPT_GET_SD_PLATE_DIM (P.OID, 0) as LENGTH,\n           RPT_GET_SD_PLATE_DIM (P.OID, 1) as WIDTH,\n           PA.THICKNESS,\n           RPT_GET_PART_WEIGHT (P.OID) as WEIGHT_UNIT,\n           RPT_GET_PART_WEIGHT (P.OID) * RPT_COPY_COUNT (P.OID) as TOTAL_WEIGHT,\n           NULL  as NEST_ID,\n           0,\n           0,\n           0,\n           0,\n            0 as WH,\n            PA.THICKNESS as WT,\n            0 as FH,\n            0 as FT\n      FROM V_RPT_PART_NO_NESTING_SD P, V_RPT_SHDK_PLATE_ATT PA,PRD_EXPL_PART PE, BLOCK B\n     WHERE PA.PRD_PART_OID = P.OID AND PE.PRD_PART_OID=  P.OID AND P.BLOCK_OID=B.OID\n          and B.DESCRIPTION like '%${drNum}%' \n          \n          UNION ALL\n    select P.OID as PART_OID,   PE.OID as PEOID,  P.CODE  as PART_CODE,\n     DECODE (PE.SYMMETRY,  0,'P', 1,'S', 2,'C', 3,'') as SYMMETRY,\n           P.PART_TYPE,\n          B.CODE as BLOCK_CODE,\n           RPT_COPY_COUNT (P.OID) as NUM_EQ_PART,\n           GET_PART_DESC (P.OID, 1) as PART_DESC,\n           SUBSTR (GET_SECT_TP (prf.std_profile_oid), 1, 2) as ELEM_TYPE,\n           SUBSTR (GET_MATERIAL_CODE (PRF.STD_PROFILE_OID, 2), 1, 12) as MATERIAL,\n           PRF.LENGTH * 1000 as LENGTH,\n           STD.WEB_HEIGHT as WIDTH,\n           STD.WEB_THICKNESS as THICKNESS,\n           RPT_GET_PART_WEIGHT (P.OID) as WEIGHT_UNIT,\n           RPT_GET_PART_WEIGHT (P.OID) * RPT_COPY_COUNT (P.OID) as TOTAL_WEIGHT,\n           NULL  as NEST_ID,\n           0,\n           0,\n           0,\n           0,\n            STD.WEB_HEIGHT as WH,\n            STD.WEB_THICKNESS as WT,\n            STD.FLANGE_HEIGHT as FH,\n            STD.FLANGE_THICKNESS as FT\n      FROM PRD_EXPL_PART PE, V_PRD_PART_NO_NESTING P, PRD_PROFILE PRF, BLOCK B,STD_PROFILE STD\n     WHERE     PRF.PRD_PART_OID = P.OID AND PE.PRD_PART_OID=  P.OID\n           AND P.PART_TYPE IN (0,\n                               1,\n                               2,\n                               3,\n                               6)\n                               AND PRF.STD_PROFILE_OID=STD.OID\n                               AND P.BLOCK_OID=B.OID\n          and B.DESCRIPTION like '%${drNum}%' \n          \n          UNION ALL\n    select P.OID as PART_OID,   PE.OID as PEOID,  P.CODE  as PART_CODE,\n     DECODE (PE.SYMMETRY,  0,'P', 1,'S', 2,'C', 3,'') as SYMMETRY,\n           P.PART_TYPE,\n            B.CODE as BLOCK_CODE,\n           RPT_COPY_COUNT (P.OID) as NUM_EQ_PART,\n           SUBSTR (GET_PART_DESC (P.OID, 1), 1, 200) as PART_DESC,\n           'PL' as ELEM_TYPE,\n           SUBSTR (GET_MATERIAL_CODE (PA.MATERIAL_OID, 1), 1, 12) as MATERIAL,\n           RPT_INP_GET_PLT_DIMENSIONS (INP_PART_OID, 0) * 1000 as LENGTH,\n           RPT_INP_GET_PLT_DIMENSIONS (INP_PART_OID, 1) * 1000 as WIDTH,\n           PA.THICKNESS * 1000,\n           RPT_GET_PART_WEIGHT (P.OID) as WEIGHT_UNIT,\n           RPT_GET_PART_WEIGHT (P.OID) * RPT_COPY_COUNT (P.OID) as TOTAL_WEIGHT,\n           NULL  as NEST_ID,\n           0,\n           0,\n           0,\n           0,\n            0 as WH,\n            PA.THICKNESS as WT,\n            0 as FH,\n            0 as FT\n      FROM PRD_EXPL_PART PE,V_PRD_PART_NO_NESTING P, INP_PLATE_ATT_DB PA, BLOCK B\n     WHERE     PA.INP_PART_OID = P.OID AND PE.PRD_PART_OID=  P.OID\n           AND P.PART_TYPE IN (14,\n                               15,\n                               18,\n                               20,\n                               22,\n                               23,\n                               25,\n                               26)AND P.BLOCK_OID=B.OID\n          and B.DESCRIPTION like '%${drNum}%' \n          \n          UNION ALL\nselect P.OID as PART_OID,   PE.OID as PEOID,  P.CODE  as PART_CODE,\n     DECODE (PE.SYMMETRY,  0,'P', 1,'S', 2,'C', 3,'') as SYMMETRY,\n           P.PART_TYPE,\n           B.CODE as BLOCK_CODE,\n           RPT_COPY_COUNT (P.OID) as NUM_EQ_PART,\n           SUBSTR (GET_PART_DESC (P.OID, 1), 1, 200) as PART_DESC,\n           SUBSTR (GET_SECT_TP (prf.std_profile_oid), 1, 2) as ELEM_TYPE,\n           SUBSTR (GET_MATERIAL_CODE (PRF.STD_PROFILE_OID, 2), 1, 12) as MATERIAL,\n           RPT_GET_PART_LENGTH (P.OID) * 1000 as LENGTH,\n           STD.WEB_HEIGHT as WIDTH,\n           STD.WEB_THICKNESS,\n           RPT_GET_PART_WEIGHT (P.OID) as WEIGHT_UNIT,\n           RPT_GET_PART_WEIGHT (P.OID) * RPT_COPY_COUNT (P.OID) as TOTAL_WEIGHT,\n           NULL  as NEST_ID,\n           0,\n           0,\n           0,\n           0,\n            STD.WEB_HEIGHT as WH,\n            STD.WEB_THICKNESS as WT,\n            STD.FLANGE_HEIGHT as FH,\n            STD.FLANGE_THICKNESS as FT\n      FROM PRD_EXPL_PART PE,V_PRD_PART_NO_NESTING P, INP_PROFILE_ATT_DB PRF, BLOCK B,STD_PROFILE STD\n     WHERE     PRF.INP_PART_OID = P.OID AND PE.PRD_PART_OID=  P.OID AND PRF.STD_PROFILE_OID=STD.OID\n           AND P.PART_TYPE IN (16,\n                               19,\n                               21,\n                               24)AND P.BLOCK_OID=B.OID\n          and B.DESCRIPTION like '%${drNum}%' \n          UNION ALL\n select P.OID as PART_OID,   PE.OID as PEOID,  P.CODE  as PART_CODE,\n     DECODE (PE.SYMMETRY,  0,'P', 1,'S', 2,'C', 3,'') as SYMMETRY,\n           P.PART_TYPE,\n           B.CODE as BLOCK_CODE,\n           RPT_COPY_COUNT (P.OID) as NUM_EQ_PART,\n           SUBSTR (GET_PART_DESC (P.OID, 1), 1, 200) as PART_DESC,\n           SUBSTR (GET_SECT_TP (PRF.STD_SECTION_OID), 1, 2) as ELEM_TYPE,\n           SUBSTR (GET_MATERIAL_CODE (PRF.STD_SECTION_OID, 2), 1, 12) as MATERIAL,\n           RPT_GET_PART_LENGTH (P.OID) * 1000 as LENGTH,\n           GET_PRF_W_HEIGHT (PRF.STD_SECTION_OID) as WIDTH,\n           GET_PRF_W_THICK (PRF.STD_SECTION_OID),\n           RPT_GET_PART_WEIGHT (P.OID) as WEIGHT_UNIT,\n           RPT_GET_PART_WEIGHT (P.OID) * RPT_COPY_COUNT (P.OID) as TOTAL_WEIGHT,\n           NULL  as NEST_ID,\n           0,\n           0,\n           0,\n           0,\n            0 as WH,\n            GET_PRF_W_THICK (PRF.STD_SECTION_OID) as WT,\n            0 as FH,\n            0 as FT\n      FROM PRD_EXPL_PART PE,V_PRD_PART_NO_NESTING P, INP_LC_ATT_DB PRF, BLOCK B\n     WHERE PRF.INP_PART_OID = P.OID AND P.PART_TYPE = 17 AND PE.PRD_PART_OID=  P.OID AND P.BLOCK_OID=B.OID\n          and B.DESCRIPTION like '%${drNum}%' \n          \n          UNION ALL\n select P.OID as PART_OID,   PE.OID as PEOID,  P.CODE,\n     DECODE (PE.SYMMETRY,  0,'P', 1,'S', 2,'C', 3,'') as SYMMETRY,\n           P.PART_TYPE,\n            B.CODE as BLOCK_CODE,\n           1 as NUM_EQ_PART,\n           GET_PART_DESC (P.OID, 1) as PART_DESC,\n           'PL' as ELEM_TYPE,\n           PA.MATQ as MATERIAL,\n           RPT_AS_GET_PLT_DIMENSIONS (P.OID, 0) * 1000 as LENGTH,\n           RPT_AS_GET_PLT_DIMENSIONS (P.OID, 1) * 1000 as WIDTH,\n           PA.THICKNESS,\n           PE.WEIGHT as WEIGHT_UNIT,\n           PE.WEIGHT as TOTAL_WEIGHT,\n           NULL  as NEST_ID,\n           0,\n           0,\n           0,\n           0,\n            0 as WH,\n            PA.THICKNESS as WT,\n            0 as FH,\n            0 as FT\n      FROM V_PRD_PART_NO_NESTING P, AS_STD_PART_PLATE PA, PRD_EXPL_PART PE, BLOCK B\n     WHERE PA.OID = P.OID AND PE.PRD_PART_OID = P.OID AND P.PART_TYPE = 12  AND P.BLOCK_OID=B.OID\n          and B.DESCRIPTION like '%${drNum}%' \n          UNION ALL\nselect  PE.PRD_PART_OID as PART_OID,  PE.OID as PEOID,  P.CODE as PART_CODE,\n     DECODE (PE.SYMMETRY,  0,'P', 1,'S', 2,'C', 3,'') as SYMMETRY,\n           P.PART_TYPE,\n         B.CODE as BLOCK_CODE,\n           1 as NUM_EQ_PART,\n           GET_PART_DESC (P.OID, 1) as PART_DESC,\n           'PL' as ELEM_TYPE,\n           PA.MATQ as MATERIAL,\n           RPT_AS_GET_PLT_DIMENSIONS (P.OID, 0) * 1000 as LENGTH,\n           RPT_AS_GET_PLT_DIMENSIONS (P.OID, 1) * 1000 as WIDTH,\n           PA.THICKNESS,\n           PE.WEIGHT as WEIGHT_UNIT,\n           PE.WEIGHT as TOTAL_WEIGHT,\n           NULL  as NEST_ID,\n           0,\n           0,\n           0,\n           0,\n            0 as WH,\n            PA.THICKNESS as WT,\n            0 as FH,\n            0 as FT\n      FROM V_PRD_PART_NO_NESTING P, AS_PART_CONT_PLATE PA, PRD_EXPL_PART PE, BLOCK B\n     WHERE PA.OID = P.OID AND PE.PRD_PART_OID = P.OID AND P.PART_TYPE = 12  AND P.BLOCK_OID=B.OID\n          and B.DESCRIPTION like '%${drNum}%' \n          UNION ALL\nselect P.OID as PART_OID,   PE.OID as PEOID, P.CODE as PART_CODE,\n     DECODE (PE.SYMMETRY,  0,'P', 1,'S', 2,'C', 3,'') as SYMMETRY,\n           P.PART_TYPE,\n           B.CODE as BLOCK_CODE,\n           1 as NUM_EQ_PART,\n           GET_PART_DESC (P.OID, 1) as PART_DESC,\n           DECODE (STD.SECTION,\n                   -1, '',\n                   0, 'FS',\n                   1, 'AS',\n                   2, 'IS',\n                   3, 'TS',\n                   4, 'US',\n                   5, 'BS',\n                   6, 'ST',\n                   7, 'AT',\n                   8, 'OS',\n                   9, 'PS',\n                   10, 'RS',\n                   11, 'MC',\n                   12, 'DB',\n                   13, 'SR',\n                   14, 'HR',\n                   15, 'LI',\n                   16, 'ZL',\n                   17, 'TL',\n                   '') as ELEM_TYPE,\n           SUBSTR (GET_MATERIAL_CODE (STD.MATERIAL_OID, 1), 1, 12) as MATERIAL,\n           PRF.LENGTH as LENGTH,\n           STD.WEB_HEIGHT as WIDTH,\n           STD.WEB_THICKNESS,\n           PE.WEIGHT as WEIGHT_UNIT,\n           PE.WEIGHT as TOTAL_WEIGHT,\n           NULL  as NEST_ID,\n           0,\n           0,\n           0,\n           0,\n            STD.WEB_HEIGHT as WH,\n            STD.WEB_THICKNESS as WT,\n            STD.FLANGE_HEIGHT as FH,\n            STD.FLANGE_THICKNESS as FT\n      FROM V_PRD_PART_NO_NESTING  P,\n           AS_STD_PART_PROF       PRF,\n           STD_PROFILE            STD,\n           PRD_EXPL_PART          PE, BLOCK B\n     WHERE     PRF.OID = P.OID\n           AND PE.PRD_PART_OID = P.OID\n           AND STD.KSE = PRF.KSE\n           AND P.PART_TYPE = 7\n             AND P.BLOCK_OID=B.OID\n          and B.DESCRIPTION like '%${drNum}%' \n                  ) P\norder by P.PART_CODE,P.SYMMETRY"

  //private def partsByDrawingNum(drNum: String): String =s"select distinct\nP.PART_OID as PART_OID,\nP.NUM_PART_NEST as QTY,\nP.PART_CODE,\nP.SYMMETRY,\nP.PART_TYPE,\nP.BLOCK_CODE,\nP.BLOCK_CODE as DESCRIPTION,\nP.NUM_EQ_PART,\nP.PART_DESC,\nP.ELEM_TYPE,\nP.MATERIAL,\nP.LENGTH,\nP.WIDTH,\nP.THICKNESS,\nP.WEIGHT_UNIT,\nP.TOTAL_WEIGHT,\nP.NEST_ID,\nP.NEST_LENGTH,\nP.NEST_WIDTH,\nP.NUM_EQ_NEST,\nP.WH,\nP.WT,\nP.FH,\nP.FT , RPT_GET_STR_GROUP(P.PART_OID) as STRGROUP \nfrom\n(\nselect \nP.OID as PART_OID,  \nPE.OID as PEOID, \nP.CODE  as PART_CODE,      \nDECODE (PE.SYMMETRY,  0,'P', 1,'S', 2,'C', 3,'') as SYMMETRY,            \nP.PART_TYPE,\n B.CODE as BLOCK_CODE,\nRPT_COPY_COUNT (P.OID) as NUM_EQ_PART,\nSUBSTR (GET_PART_DESC (P.OID, 1), 1, 200) as PART_DESC,            \nSUBSTR (GET_SECT_TP (prf.std_profile_oid), 1, 2) as ELEM_TYPE,\nSUBSTR (GET_MATERIAL_CODE (PRF.STD_PROFILE_OID, 2), 1, 12) as MATERIAL,\nRPT_GET_PART_LENGTH (P.OID) * 1000 as LENGTH,            \nSTD.WEB_HEIGHT as WIDTH,\nSTD.WEB_THICKNESS as THICKNESS,\nRPT_GET_PART_WEIGHT (P.OID) as WEIGHT_UNIT,            \nRPT_GET_PART_WEIGHT (P.OID) * RPT_COPY_COUNT (P.OID) as TOTAL_WEIGHT,\nSUBSTR (GET_NEST_ID (NP.NESTING_OID, NP.NESTING_BLOCK), 1, 15)  as NEST_ID,            \nNP.NUM_PART_NEST,\nNP.NEST_LENGTH,\nNP.NEST_WIDTH,\nNP.NUM_EQ_NEST,\nSTD.WEB_HEIGHT as WH,\nSTD.WEB_THICKNESS as WT,\nSTD.FLANGE_HEIGHT as FH,\nSTD.FLANGE_THICKNESS as FT    \nFROM \nPRD_EXPL_PART PE, PRD_PART P, INP_PROFILE_ATT_DB PRF, PRD_NEST_PART PNP, BLOCK B,STD_PROFILE STD, \n        (\n              select \n                     N.PART_OID,\n                     N.NESTING_OID,\n                     N.SYMM_CODE,\n                     NG.ID_SEQ_BLOCK as NESTING_BLOCK,\n                     COUNT (*) * GET_NUM_EQ_NEST (NESTING_OID) as NUM_PART_NEST,\n                     GET_NEST_HEIGHT (NESTING_OID) as NEST_LENGTH,\n                     GET_NEST_WIDTH (NESTING_OID) as NEST_WIDTH,\n                     GET_NUM_EQ_NEST (NESTING_OID) as NUM_EQ_NEST\n                        from\n                        PRD_NEST_PART N, PRD_NEST_GEN NG\n                        where \n                         NG.OID = N.NESTING_OID\n                         GROUP BY PART_OID, NESTING_OID, SYMM_CODE,  NG.ID_SEQ_BLOCK\n        )   NP  \nWHERE  \nNP.part_oid=P.OID AND\n(NP.SYMM_CODE=PE.SYMMETRY or NP.SYMM_CODE=2) AND\nPRF.INP_PART_OID = P.OID \nAND PE.PRD_PART_OID= P.OID \nAND PNP.PART_OID=P.OID \nAND (PNP.SYMM_CODE=PE.SYMMETRY or PNP.SYMM_CODE=2)          \nAND P.PART_TYPE IN (16,19,21,24)  \nAND P.BLOCK_OID=B.OID\nAND PRF.STD_PROFILE_OID=STD.OID\nand B.DESCRIPTION like '%${drNum}%'\n\nUNION ALL\n select\n P.OID as PART_OID,       \n PE.OID as PEOID,\n P.CODE as PART_CODE,\n           DECODE (PE.SYMMETRY,  0,'P', 1,'S', 2,'C', 3,'') as SYMMETRY,\n           P.PART_TYPE,\n           B.CODE as BLOCK_CODE,\n           RPT_COPY_COUNT (P.OID) as NUM_EQ_PART,\n           GET_PART_DESC (P.OID, 1) as PART_DESC,\n           'PL' as ELEM_TYPE,\n           SUBSTR (GET_MATERIAL_CODE (PA.MATERIAL_OID, 1), 1, 12) as MATERIAL,\n           RPT_GET_SD_PLATE_DIM (P.OID, 0) as LENGTH,\n           RPT_GET_SD_PLATE_DIM (P.OID, 1) as WIDTH,\n           PA.THICKNESS,\n           RPT_GET_PART_WEIGHT (P.OID) as WEIGHT_UNIT,\n           RPT_GET_PART_WEIGHT (P.OID) * RPT_COPY_COUNT (P.OID) as TOTAL_WEIGHT,\n           SUBSTR (GET_NEST_ID (NP.NESTING_OID, NP.NESTING_BLOCK), 1, 15) as NEST_ID ,\n           NP.NUM_PART_NEST,\n           NP.NEST_LENGTH,\n           NP.NEST_WIDTH,\n           NP.NUM_EQ_NEST,\n           0 as WH,\n            PA.THICKNESS as WT,\n            0 as FH,\n            0 as FT\n      FROM PRD_EXPL_PART PE,  PRD_PART P, V_RPT_SHDK_PLATE_ATT PA, PRD_NEST_PART PNP, BLOCK B,\n        (\n              select \n                     N.PART_OID,\n                     N.NESTING_OID,\n                     N.SYMM_CODE,\n                     NG.ID_SEQ_BLOCK as NESTING_BLOCK,\n                     COUNT (*) * GET_NUM_EQ_NEST (NESTING_OID) as NUM_PART_NEST,\n                     GET_NEST_HEIGHT (NESTING_OID) as NEST_LENGTH,\n                     GET_NEST_WIDTH (NESTING_OID) as NEST_WIDTH,\n                     GET_NUM_EQ_NEST (NESTING_OID) as NUM_EQ_NEST\n                        from\n                        PRD_NEST_PART N, PRD_NEST_GEN NG\n                        where \n                         NG.OID = N.NESTING_OID\n                         GROUP BY PART_OID, NESTING_OID, SYMM_CODE,  NG.ID_SEQ_BLOCK\n        )   NP  \n     WHERE \n         NP.part_oid=P.OID AND (NP.SYMM_CODE=PE.SYMMETRY or NP.SYMM_CODE=2) AND\n     PA.PRD_PART_OID = P.OID AND PE.PRD_PART_OID =PA.PRD_PART_OID\n           AND PNP.PART_OID=P.OID AND (PNP.SYMM_CODE=PE.SYMMETRY or PNP.SYMM_CODE=2)\n           AND P.PART_TYPE IN (9, 10)\n           AND P.BLOCK_OID=B.OID\n           and B.DESCRIPTION like '%${drNum}%' \n           \n                      UNION ALL\n    select  P.OID as PART_OID,   PE.OID as PEOID, P.CODE  as PART_CODE,\n     DECODE (PE.SYMMETRY,  0,'P', 1,'S', 2,'C', 3,'') as SYMMETRY,\n           P.PART_TYPE,\n           B.CODE as BLOCK_CODE,\n           RPT_COPY_COUNT (P.OID) as NUM_EQ_PART,\n           GET_PART_DESC (P.OID, 1) as PART_DESC,\n           SUBSTR (GET_SECT_TP (prf.std_profile_oid), 1, 2) as ELEM_TYPE,\n           SUBSTR (GET_MATERIAL_CODE (PRF.STD_PROFILE_OID, 2), 1, 12) as MATERIAL,\n           PRF.LENGTH * 1000 as LENGTH,\n           STD.WEB_HEIGHT as WIDTH,\n           STD.WEB_THICKNESS  as THICKNESS,\n           RPT_GET_PART_WEIGHT (P.OID) as WEIGHT_UNIT,\n           RPT_GET_PART_WEIGHT (P.OID) * RPT_COPY_COUNT (P.OID)  as TOTAL_WEIGHT,\n           SUBSTR (GET_NEST_ID (NP.NESTING_OID, NP.NESTING_BLOCK), 1, 15) as NEST_ID,\n           NP.NUM_PART_NEST,\n           NP.NEST_LENGTH,\n           NP.NEST_WIDTH,\n           NP.NUM_EQ_NEST,\n            STD.WEB_HEIGHT as WH,\n            STD.WEB_THICKNESS as WT,\n            STD.FLANGE_HEIGHT as FH,\n            STD.FLANGE_THICKNESS as FT\n      FROM PRD_EXPL_PART PE, PRD_PART P, PRD_PROFILE PRF,  PRD_NEST_PART PNP, BLOCK B,STD_PROFILE STD, \n        (\n              select \n                     N.PART_OID,\n                     N.NESTING_OID,\n                     N.SYMM_CODE,\n                     NG.ID_SEQ_BLOCK as NESTING_BLOCK,\n                     COUNT (*) * GET_NUM_EQ_NEST (NESTING_OID) as NUM_PART_NEST,\n                     GET_NEST_HEIGHT (NESTING_OID) as NEST_LENGTH,\n                     GET_NEST_WIDTH (NESTING_OID) as NEST_WIDTH,\n                     GET_NUM_EQ_NEST (NESTING_OID) as NUM_EQ_NEST\n                        from\n                        PRD_NEST_PART N, PRD_NEST_GEN NG\n                        where \n                         NG.OID = N.NESTING_OID\n                         GROUP BY PART_OID, NESTING_OID, SYMM_CODE,  NG.ID_SEQ_BLOCK\n        )   NP \n     WHERE     \n     NP.part_oid=P.OID AND (NP.SYMM_CODE=PE.SYMMETRY or NP.SYMM_CODE=2) AND\n     PRF.PRD_PART_OID = P.OID AND PE.PRD_PART_OID=PRF.PRD_PART_OID\n           AND PNP.PART_OID=P.OID AND (PNP.SYMM_CODE=PE.SYMMETRY or PNP.SYMM_CODE=2)\n           AND P.PART_TYPE IN (0, 1,2,3,6)\n                               AND P.BLOCK_OID=B.OID\n                               AND PRF.STD_PROFILE_OID=STD.OID\n          and B.DESCRIPTION like '%${drNum}%' \n                    UNION ALL\nselect P.OID as PART_OID,   PE.OID as PEOID, P.CODE  as PART_CODE,\n     DECODE (PE.SYMMETRY,  0,'P', 1,'S', 2,'C', 3,'') as SYMMETRY,\n           P.PART_TYPE,\n            B.CODE as BLOCK_CODE,\n           RPT_COPY_COUNT (P.OID) as NUM_EQ_PART,\n           SUBSTR (GET_PART_DESC (P.OID, 1), 1, 200) as PART_DESC,\n           'PL' as ELEM_TYPE,\n           SUBSTR (GET_MATERIAL_CODE (PA.MATERIAL_OID, 1), 1, 12) as MATERIAL,\n           RPT_INP_GET_PLT_DIMENSIONS (P.OID, 0) * 1000 as LENGTH,\n           RPT_INP_GET_PLT_DIMENSIONS (P.OID, 1) * 1000 as WIDTH,\n           PA.THICKNESS * 1000,\n           RPT_GET_PART_WEIGHT (P.OID) as WEIGHT_UNIT,\n           RPT_GET_PART_WEIGHT (P.OID) * RPT_COPY_COUNT (P.OID) as TOTAL_WEIGHT,\n           SUBSTR (GET_NEST_ID (NP.NESTING_OID, NP.NESTING_BLOCK), 1, 15) as NEST_ID,\n           NP.NUM_PART_NEST,\n           NP.NEST_LENGTH,\n           NP.NEST_WIDTH,\n           NP.NUM_EQ_NEST,\n           0 as WH,\n            PA.THICKNESS * 1000 as WT,\n            0 as FH,\n            0 as FT\n      FROM PRD_EXPL_PART PE, PRD_PART P, INP_PLATE_ATT_DB PA,  PRD_NEST_PART PNP, BLOCK B,\n (\n              select \n                     N.PART_OID,\n                     N.NESTING_OID,\n                     N.SYMM_CODE,\n                     NG.ID_SEQ_BLOCK as NESTING_BLOCK,\n                     COUNT (*) * GET_NUM_EQ_NEST (NESTING_OID) as NUM_PART_NEST,\n                     GET_NEST_HEIGHT (NESTING_OID) as NEST_LENGTH,\n                     GET_NEST_WIDTH (NESTING_OID) as NEST_WIDTH,\n                     GET_NUM_EQ_NEST (NESTING_OID) as NUM_EQ_NEST\n                        from\n                        PRD_NEST_PART N, PRD_NEST_GEN NG\n                        where \n                         NG.OID = N.NESTING_OID\n                         GROUP BY PART_OID, NESTING_OID, SYMM_CODE,  NG.ID_SEQ_BLOCK\n        )   NP  \n     WHERE  NP.part_oid=P.OID \n     AND (NP.SYMM_CODE=PE.SYMMETRY OR NP.SYMM_CODE=2) \n     AND   PA.INP_PART_OID = P.OID AND PE.PRD_PART_OID=P.OID\n           AND PNP.PART_OID=P.OID AND (PNP.SYMM_CODE=PE.SYMMETRY  or PNP.SYMM_CODE=2)\n           AND P.PART_TYPE IN (14,\n                               15,\n                               18,\n                               20,\n                               22,\n                               23,\n                               25,\n                               26)\n                               AND P.BLOCK_OID=B.OID\n          and B.DESCRIPTION like '%${drNum}%' \n                   UNION ALL\nselect P.OID as PART_OID,   PE.OID as PEOID,  P.CODE  as PART_CODE,\n     DECODE (PE.SYMMETRY,  0,'P', 1,'S', 2,'C', 3,'') as SYMMETRY,\n           P.PART_TYPE,\n           B.CODE as BLOCK_CODE,\n           RPT_COPY_COUNT (P.OID) as NUM_EQ_PART,\n           SUBSTR (GET_PART_DESC (P.OID, 1), 1, 200) as PART_DESC,\n           SUBSTR (GET_SECT_TP (PRF.STD_SECTION_OID), 1, 2) as ELEM_TYPE,\n           SUBSTR (GET_MATERIAL_CODE (PRF.STD_SECTION_OID, 2), 1, 12) as MATERIAL,\n           RPT_GET_PART_LENGTH (P.OID) * 1000 as LENGTH,\n           GET_PRF_W_HEIGHT (PRF.STD_SECTION_OID) as WIDTH,\n           GET_PRF_W_THICK (PRF.STD_SECTION_OID),\n           RPT_GET_PART_WEIGHT (P.OID) as WEIGHT_UNIT,\n           RPT_GET_PART_WEIGHT (P.OID) * RPT_COPY_COUNT (P.OID) as TOTAL_WEIGHT,\n           SUBSTR (GET_NEST_ID (NP.NESTING_OID, NP.NESTING_BLOCK), 1, 15)  as NEST_ID,\n           NP.NUM_PART_NEST,\n           NP.NEST_LENGTH,\n           NP.NEST_WIDTH,\n           NP.NUM_EQ_NEST,\n            0 as WH,\n            GET_PRF_W_THICK (PRF.STD_SECTION_OID) as WT,\n            0 as FH,\n            0 as FT\n      FROM PRD_EXPL_PART PE, PRD_PART P, INP_LC_ATT_DB PRF,  PRD_NEST_PART PNP, BLOCK B,\n        (\n              select \n                     N.PART_OID,\n                     N.NESTING_OID,\n                     N.SYMM_CODE,\n                     NG.ID_SEQ_BLOCK as NESTING_BLOCK,\n                     COUNT (*) * GET_NUM_EQ_NEST (NESTING_OID) as NUM_PART_NEST,\n                     GET_NEST_HEIGHT (NESTING_OID) as NEST_LENGTH,\n                     GET_NEST_WIDTH (NESTING_OID) as NEST_WIDTH,\n                     GET_NUM_EQ_NEST (NESTING_OID) as NUM_EQ_NEST\n                        from\n                        PRD_NEST_PART N, PRD_NEST_GEN NG\n                        where \n                         NG.OID = N.NESTING_OID\n                         GROUP BY PART_OID, NESTING_OID, SYMM_CODE,  NG.ID_SEQ_BLOCK\n        )   NP \n     WHERE  NP.part_oid=P.OID AND (NP.SYMM_CODE=PE.SYMMETRY or NP.SYMM_CODE=2) AND PRF.INP_PART_OID = P.OID AND PE.PRD_PART_OID=  P.OID\n           AND PNP.PART_OID=P.OID AND (PNP.SYMM_CODE=PE.SYMMETRY  or PNP.SYMM_CODE=2)\n           AND P.PART_TYPE in (17) AND P.BLOCK_OID=B.OID\n          and B.DESCRIPTION like '%${drNum}%' \n          \n                    UNION ALL\n select P.OID as PART_OID,   PE.OID as PEOID, P.CODE  as PART_CODE,\n     DECODE (PE.SYMMETRY,  0,'P', 1,'S', 2,'C', 3,'') as SYMMETRY,\n           P.PART_TYPE,\n            B.CODE as BLOCK_CODE,\n           1 as NUM_EQ_PART,\n           GET_PART_DESC (P.OID, 1) as PART_DESC,\n           'PL' as ELEM_TYPE,\n           PA.MATQ as MATERIAL,\n           RPT_AS_GET_PLT_DIMENSIONS (P.OID, 0) * 1000 as LENGTH,\n           RPT_AS_GET_PLT_DIMENSIONS (P.OID, 1) * 1000 as WIDTH,\n           PA.THICKNESS,\n           PE.WEIGHT as WEIGHT_UNIT,\n           PE.WEIGHT as TOTAL_WEIGHT,\n           SUBSTR (GET_NEST_ID (NP.NESTING_OID, NP.NESTING_BLOCK), 1, 15)  as NEST_ID,\n           NP.NUM_PART_NEST,\n           NP.NEST_LENGTH,\n           NP.NEST_WIDTH,\n           NP.NUM_EQ_NEST,\n            0 as WH,\n            PA.THICKNESS as WT,\n            0 as FH,\n            0 as FT\n      FROM PRD_PART               P,\n           AS_STD_PART_PLATE      PA,\n           PRD_EXPL_PART          PE , PRD_NEST_PART PNP , BLOCK B,\n        (\n              select \n                     N.PART_OID,\n                     N.NESTING_OID,\n                     N.SYMM_CODE,\n                     NG.ID_SEQ_BLOCK as NESTING_BLOCK,\n                     COUNT (*) * GET_NUM_EQ_NEST (NESTING_OID) as NUM_PART_NEST,\n                     GET_NEST_HEIGHT (NESTING_OID) as NEST_LENGTH,\n                     GET_NEST_WIDTH (NESTING_OID) as NEST_WIDTH,\n                     GET_NUM_EQ_NEST (NESTING_OID) as NUM_EQ_NEST\n                        from\n                        PRD_NEST_PART N, PRD_NEST_GEN NG\n                        where \n                         NG.OID = N.NESTING_OID\n                         GROUP BY PART_OID, NESTING_OID, SYMM_CODE,  NG.ID_SEQ_BLOCK\n        )   NP \n     WHERE   NP.part_oid=P.OID AND   (NP.SYMM_CODE=PE.SYMMETRY or NP.SYMM_CODE=2) AND  PA.OID = P.OID\n           AND PNP.PART_OID=P.OID AND (PNP.SYMM_CODE=PE.SYMMETRY  or PNP.SYMM_CODE=2)\n           AND PE.PRD_PART_OID = P.OID\n           AND P.PART_TYPE = 12 AND P.BLOCK_OID=B.OID\n          and B.DESCRIPTION like '%${drNum}%' \n          \n                    UNION ALL\nselect P.OID as PART_OID,   PE.OID as PEOID,  P.CODE  as PART_CODE,\n     DECODE (PE.SYMMETRY,  0,'P', 1,'S', 2,'C', 3,'') as SYMMETRY,\n           P.PART_TYPE,\n            B.CODE as BLOCK_CODE,\n           1 as NUM_EQ_PART,\n           GET_PART_DESC (P.OID, 1) as PART_DESC,\n           DECODE (STD.SECTION,\n                   -1, '',\n                   0, 'FS',\n                   1, 'AS',\n                   2, 'IS',\n                   3, 'TS',\n                   4, 'US',\n                   5, 'BS',\n                   6, 'ST',\n                   7, 'AT',\n                   8, 'OS',\n                   9, 'PS',\n                   10, 'RS',\n                   11, 'MC',\n                   12, 'DB',\n                   13, 'SR',\n                   14, 'HR',\n                   15, 'LI',\n                   16, 'ZL',\n                   17, 'TL',\n                   '') as ELEM_TYPE,\n           SUBSTR (GET_MATERIAL_CODE (STD.MATERIAL_OID, 1), 1, 12) as MATERIAL,\n           PRF.LENGTH as LENGTH,\n           STD.WEB_HEIGHT as WIDTH,\n           STD.WEB_THICKNESS,\n           PE.WEIGHT as WEIGHT_UNIT,\n           PE.WEIGHT as TOTAL_WEIGHT,\n           SUBSTR (GET_NEST_ID (NP.NESTING_OID, NP.NESTING_BLOCK), 1, 15)  as NEST_ID,\n           NP.NUM_PART_NEST,\n           NP.NEST_LENGTH,\n           NP.NEST_WIDTH,\n           NP.NUM_EQ_NEST,\n            STD.WEB_HEIGHT as WH,\n            STD.WEB_THICKNESS as WT,\n            STD.FLANGE_HEIGHT as FH,\n            STD.FLANGE_THICKNESS as FT\n      FROM PRD_PART               P,\n           AS_STD_PART_PROF       PRF,\n           STD_PROFILE            STD,\n           PRD_EXPL_PART          PE, PRD_NEST_PART PNP, BLOCK B,\n        (\n              select \n                     N.PART_OID,\n                     N.NESTING_OID,\n                     N.SYMM_CODE,\n                     NG.ID_SEQ_BLOCK as NESTING_BLOCK,\n                     COUNT (*) * GET_NUM_EQ_NEST (NESTING_OID) as NUM_PART_NEST,\n                     GET_NEST_HEIGHT (NESTING_OID) as NEST_LENGTH,\n                     GET_NEST_WIDTH (NESTING_OID) as NEST_WIDTH,\n                     GET_NUM_EQ_NEST (NESTING_OID) as NUM_EQ_NEST\n                        from\n                        PRD_NEST_PART N, PRD_NEST_GEN NG\n                        where \n                         NG.OID = N.NESTING_OID\n                         GROUP BY PART_OID, NESTING_OID, SYMM_CODE,  NG.ID_SEQ_BLOCK\n        )   NP \n     WHERE  NP.part_oid=P.OID AND  (NP.SYMM_CODE=PE.SYMMETRY or NP.SYMM_CODE=2) AND   PRF.OID = P.OID\n           AND PE.PRD_PART_OID = P.OID\n           AND STD.KSE = PRF.KSE\n           AND PNP.PART_OID=P.OID AND (PNP.SYMM_CODE=PE.SYMMETRY or PNP.SYMM_CODE=2)\n           AND P.PART_TYPE = 7 AND P.BLOCK_OID=B.OID\n          and B.DESCRIPTION like '%${drNum}%' \n          \n          \n          UNION ALL\n select P.OID as PART_OID,   PE.OID as PEOID,  P.CODE  as PART_CODE,\n     DECODE (PE.SYMMETRY,  0,'P', 1,'S', 2,'C', 3,'') as SYMMETRY,\n           P.PART_TYPE,\n            B.CODE as BLOCK_CODE,\n           RPT_COPY_COUNT (P.OID) as NUM_EQ_PART,\n           GET_PART_DESC (P.OID, 1) as PART_DESC,\n           'PL' as ELEM_TYPE,\n           SUBSTR (GET_MATERIAL_CODE (PA.MATERIAL_OID, 1), 1, 12) as MATERIAL,\n           RPT_GET_SD_PLATE_DIM (P.OID, 0) as LENGTH,\n           RPT_GET_SD_PLATE_DIM (P.OID, 1) as WIDTH,\n           PA.THICKNESS,\n           RPT_GET_PART_WEIGHT (P.OID) as WEIGHT_UNIT,\n           RPT_GET_PART_WEIGHT (P.OID) * RPT_COPY_COUNT (P.OID) as TOTAL_WEIGHT,\n           NULL  as NEST_ID,\n           0,\n           0,\n           0,\n           0,\n            0 as WH,\n            PA.THICKNESS as WT,\n            0 as FH,\n            0 as FT\n      FROM V_RPT_PART_NO_NESTING_SD P, V_RPT_SHDK_PLATE_ATT PA,PRD_EXPL_PART PE, BLOCK B\n     WHERE PA.PRD_PART_OID = P.OID AND PE.PRD_PART_OID=  P.OID AND P.BLOCK_OID=B.OID\n          and B.DESCRIPTION like '%${drNum}%' \n          \n          UNION ALL\n    select P.OID as PART_OID,   PE.OID as PEOID,  P.CODE  as PART_CODE,\n     DECODE (PE.SYMMETRY,  0,'P', 1,'S', 2,'C', 3,'') as SYMMETRY,\n           P.PART_TYPE,\n          B.CODE as BLOCK_CODE,\n           RPT_COPY_COUNT (P.OID) as NUM_EQ_PART,\n           GET_PART_DESC (P.OID, 1) as PART_DESC,\n           SUBSTR (GET_SECT_TP (prf.std_profile_oid), 1, 2) as ELEM_TYPE,\n           SUBSTR (GET_MATERIAL_CODE (PRF.STD_PROFILE_OID, 2), 1, 12) as MATERIAL,\n           PRF.LENGTH * 1000 as LENGTH,\n           STD.WEB_HEIGHT as WIDTH,\n           STD.WEB_THICKNESS as THICKNESS,\n           RPT_GET_PART_WEIGHT (P.OID) as WEIGHT_UNIT,\n           RPT_GET_PART_WEIGHT (P.OID) * RPT_COPY_COUNT (P.OID) as TOTAL_WEIGHT,\n           NULL  as NEST_ID,\n           0,\n           0,\n           0,\n           0,\n            STD.WEB_HEIGHT as WH,\n            STD.WEB_THICKNESS as WT,\n            STD.FLANGE_HEIGHT as FH,\n            STD.FLANGE_THICKNESS as FT\n      FROM PRD_EXPL_PART PE, V_PRD_PART_NO_NESTING P, PRD_PROFILE PRF, BLOCK B,STD_PROFILE STD\n     WHERE     PRF.PRD_PART_OID = P.OID AND PE.PRD_PART_OID=  P.OID\n           AND P.PART_TYPE IN (0,\n                               1,\n                               2,\n                               3,\n                               6)\n                               AND PRF.STD_PROFILE_OID=STD.OID\n                               AND P.BLOCK_OID=B.OID\n          and B.DESCRIPTION like '%${drNum}%' \n          \n          UNION ALL\n    select P.OID as PART_OID,   PE.OID as PEOID,  P.CODE  as PART_CODE,\n     DECODE (PE.SYMMETRY,  0,'P', 1,'S', 2,'C', 3,'') as SYMMETRY,\n           P.PART_TYPE,\n            B.CODE as BLOCK_CODE,\n           RPT_COPY_COUNT (P.OID) as NUM_EQ_PART,\n           SUBSTR (GET_PART_DESC (P.OID, 1), 1, 200) as PART_DESC,\n           'PL' as ELEM_TYPE,\n           SUBSTR (GET_MATERIAL_CODE (PA.MATERIAL_OID, 1), 1, 12) as MATERIAL,\n           RPT_INP_GET_PLT_DIMENSIONS (INP_PART_OID, 0) * 1000 as LENGTH,\n           RPT_INP_GET_PLT_DIMENSIONS (INP_PART_OID, 1) * 1000 as WIDTH,\n           PA.THICKNESS * 1000,\n           RPT_GET_PART_WEIGHT (P.OID) as WEIGHT_UNIT,\n           RPT_GET_PART_WEIGHT (P.OID) * RPT_COPY_COUNT (P.OID) as TOTAL_WEIGHT,\n           NULL  as NEST_ID,\n           0,\n           0,\n           0,\n           0,\n            0 as WH,\n            PA.THICKNESS as WT,\n            0 as FH,\n            0 as FT\n      FROM PRD_EXPL_PART PE,V_PRD_PART_NO_NESTING P, INP_PLATE_ATT_DB PA, BLOCK B\n     WHERE     PA.INP_PART_OID = P.OID AND PE.PRD_PART_OID=  P.OID\n           AND P.PART_TYPE IN (14,\n                               15,\n                               18,\n                               20,\n                               22,\n                               23,\n                               25,\n                               26)AND P.BLOCK_OID=B.OID\n          and B.DESCRIPTION like '%${drNum}%' \n          \n          UNION ALL\nselect P.OID as PART_OID,   PE.OID as PEOID,  P.CODE  as PART_CODE,\n     DECODE (PE.SYMMETRY,  0,'P', 1,'S', 2,'C', 3,'') as SYMMETRY,\n           P.PART_TYPE,\n           B.CODE as BLOCK_CODE,\n           RPT_COPY_COUNT (P.OID) as NUM_EQ_PART,\n           SUBSTR (GET_PART_DESC (P.OID, 1), 1, 200) as PART_DESC,\n           SUBSTR (GET_SECT_TP (prf.std_profile_oid), 1, 2) as ELEM_TYPE,\n           SUBSTR (GET_MATERIAL_CODE (PRF.STD_PROFILE_OID, 2), 1, 12) as MATERIAL,\n           RPT_GET_PART_LENGTH (P.OID) * 1000 as LENGTH,\n           STD.WEB_HEIGHT as WIDTH,\n           STD.WEB_THICKNESS,\n           RPT_GET_PART_WEIGHT (P.OID) as WEIGHT_UNIT,\n           RPT_GET_PART_WEIGHT (P.OID) * RPT_COPY_COUNT (P.OID) as TOTAL_WEIGHT,\n           NULL  as NEST_ID,\n           0,\n           0,\n           0,\n           0,\n            STD.WEB_HEIGHT as WH,\n            STD.WEB_THICKNESS as WT,\n            STD.FLANGE_HEIGHT as FH,\n            STD.FLANGE_THICKNESS as FT\n      FROM PRD_EXPL_PART PE,V_PRD_PART_NO_NESTING P, INP_PROFILE_ATT_DB PRF, BLOCK B,STD_PROFILE STD\n     WHERE     PRF.INP_PART_OID = P.OID AND PE.PRD_PART_OID=  P.OID AND PRF.STD_PROFILE_OID=STD.OID\n           AND P.PART_TYPE IN (16,\n                               19,\n                               21,\n                               24)AND P.BLOCK_OID=B.OID\n          and B.DESCRIPTION like '%${drNum}%' \n          UNION ALL\n select P.OID as PART_OID,   PE.OID as PEOID,  P.CODE  as PART_CODE,\n     DECODE (PE.SYMMETRY,  0,'P', 1,'S', 2,'C', 3,'') as SYMMETRY,\n           P.PART_TYPE,\n           B.CODE as BLOCK_CODE,\n           RPT_COPY_COUNT (P.OID) as NUM_EQ_PART,\n           SUBSTR (GET_PART_DESC (P.OID, 1), 1, 200) as PART_DESC,\n           SUBSTR (GET_SECT_TP (PRF.STD_SECTION_OID), 1, 2) as ELEM_TYPE,\n           SUBSTR (GET_MATERIAL_CODE (PRF.STD_SECTION_OID, 2), 1, 12) as MATERIAL,\n           RPT_GET_PART_LENGTH (P.OID) * 1000 as LENGTH,\n           GET_PRF_W_HEIGHT (PRF.STD_SECTION_OID) as WIDTH,\n           GET_PRF_W_THICK (PRF.STD_SECTION_OID),\n           RPT_GET_PART_WEIGHT (P.OID) as WEIGHT_UNIT,\n           RPT_GET_PART_WEIGHT (P.OID) * RPT_COPY_COUNT (P.OID) as TOTAL_WEIGHT,\n           NULL  as NEST_ID,\n           0,\n           0,\n           0,\n           0,\n            0 as WH,\n            GET_PRF_W_THICK (PRF.STD_SECTION_OID) as WT,\n            0 as FH,\n            0 as FT\n      FROM PRD_EXPL_PART PE,V_PRD_PART_NO_NESTING P, INP_LC_ATT_DB PRF, BLOCK B\n     WHERE PRF.INP_PART_OID = P.OID AND P.PART_TYPE = 17 AND PE.PRD_PART_OID=  P.OID AND P.BLOCK_OID=B.OID\n          and B.DESCRIPTION like '%${drNum}%' \n          \n          UNION ALL\n select P.OID as PART_OID,   PE.OID as PEOID,  P.CODE,\n     DECODE (PE.SYMMETRY,  0,'P', 1,'S', 2,'C', 3,'') as SYMMETRY,\n           P.PART_TYPE,\n            B.CODE as BLOCK_CODE,\n           1 as NUM_EQ_PART,\n           GET_PART_DESC (P.OID, 1) as PART_DESC,\n           'PL' as ELEM_TYPE,\n           PA.MATQ as MATERIAL,\n           RPT_AS_GET_PLT_DIMENSIONS (P.OID, 0) * 1000 as LENGTH,\n           RPT_AS_GET_PLT_DIMENSIONS (P.OID, 1) * 1000 as WIDTH,\n           PA.THICKNESS,\n           PE.WEIGHT as WEIGHT_UNIT,\n           PE.WEIGHT as TOTAL_WEIGHT,\n           NULL  as NEST_ID,\n           0,\n           0,\n           0,\n           0,\n            0 as WH,\n            PA.THICKNESS as WT,\n            0 as FH,\n            0 as FT\n      FROM V_PRD_PART_NO_NESTING P, AS_STD_PART_PLATE PA, PRD_EXPL_PART PE, BLOCK B\n     WHERE PA.OID = P.OID AND PE.PRD_PART_OID = P.OID AND P.PART_TYPE = 12  AND P.BLOCK_OID=B.OID\n          and B.DESCRIPTION like '%${drNum}%' \n          UNION ALL\nselect  PE.PRD_PART_OID as PART_OID,  PE.OID as PEOID,  P.CODE as PART_CODE,\n     DECODE (PE.SYMMETRY,  0,'P', 1,'S', 2,'C', 3,'') as SYMMETRY,\n           P.PART_TYPE,\n         B.CODE as BLOCK_CODE,\n           1 as NUM_EQ_PART,\n           GET_PART_DESC (P.OID, 1) as PART_DESC,\n           'PL' as ELEM_TYPE,\n           PA.MATQ as MATERIAL,\n           RPT_AS_GET_PLT_DIMENSIONS (P.OID, 0) * 1000 as LENGTH,\n           RPT_AS_GET_PLT_DIMENSIONS (P.OID, 1) * 1000 as WIDTH,\n           PA.THICKNESS,\n           PE.WEIGHT as WEIGHT_UNIT,\n           PE.WEIGHT as TOTAL_WEIGHT,\n           NULL  as NEST_ID,\n           0,\n           0,\n           0,\n           0,\n            0 as WH,\n            PA.THICKNESS as WT,\n            0 as FH,\n            0 as FT\n      FROM V_PRD_PART_NO_NESTING P, AS_PART_CONT_PLATE PA, PRD_EXPL_PART PE, BLOCK B\n     WHERE PA.OID = P.OID AND PE.PRD_PART_OID = P.OID AND P.PART_TYPE = 12  AND P.BLOCK_OID=B.OID\n          and B.DESCRIPTION like '%${drNum}%' \n          UNION ALL\nselect P.OID as PART_OID,   PE.OID as PEOID, P.CODE as PART_CODE,\n     DECODE (PE.SYMMETRY,  0,'P', 1,'S', 2,'C', 3,'') as SYMMETRY,\n           P.PART_TYPE,\n           B.CODE as BLOCK_CODE,\n           1 as NUM_EQ_PART,\n           GET_PART_DESC (P.OID, 1) as PART_DESC,\n           DECODE (STD.SECTION,\n                   -1, '',\n                   0, 'FS',\n                   1, 'AS',\n                   2, 'IS',\n                   3, 'TS',\n                   4, 'US',\n                   5, 'BS',\n                   6, 'ST',\n                   7, 'AT',\n                   8, 'OS',\n                   9, 'PS',\n                   10, 'RS',\n                   11, 'MC',\n                   12, 'DB',\n                   13, 'SR',\n                   14, 'HR',\n                   15, 'LI',\n                   16, 'ZL',\n                   17, 'TL',\n                   '') as ELEM_TYPE,\n           SUBSTR (GET_MATERIAL_CODE (STD.MATERIAL_OID, 1), 1, 12) as MATERIAL,\n           PRF.LENGTH as LENGTH,\n           STD.WEB_HEIGHT as WIDTH,\n           STD.WEB_THICKNESS,\n           PE.WEIGHT as WEIGHT_UNIT,\n           PE.WEIGHT as TOTAL_WEIGHT,\n           NULL  as NEST_ID,\n           0,\n           0,\n           0,\n           0,\n            STD.WEB_HEIGHT as WH,\n            STD.WEB_THICKNESS as WT,\n            STD.FLANGE_HEIGHT as FH,\n            STD.FLANGE_THICKNESS as FT\n      FROM V_PRD_PART_NO_NESTING  P,\n           AS_STD_PART_PROF       PRF,\n           STD_PROFILE            STD,\n           PRD_EXPL_PART          PE, BLOCK B\n     WHERE     PRF.OID = P.OID\n           AND PE.PRD_PART_OID = P.OID\n           AND STD.KSE = PRF.KSE\n           AND P.PART_TYPE = 7\n             AND P.BLOCK_OID=B.OID\n          and B.DESCRIPTION like '%${drNum}%' \n                  ) P\norder by P.PART_CODE,P.SYMMETRY"

  //private def partsByDrawingNum(drNum: String): String =s"select  distinct P.PART_OID as PART_OID,\nP.NUM_PART_NEST as QTY,\nP.PART_CODE,\nP.SYMMETRY,\nP.PART_TYPE,\nP.BLOCK_CODE,\nP.BLOCK_CODE as DESCRIPTION,\nP.NUM_EQ_PART,\nP.PART_DESC,\nP.ELEM_TYPE,\nP.MATERIAL,\nP.LENGTH,\nP.WIDTH,\nP.THICKNESS,\nP.WEIGHT_UNIT,\nP.TOTAL_WEIGHT,\nP.NEST_ID,\nP.NEST_LENGTH,\nP.NEST_WIDTH,\nP.NUM_EQ_NEST,\nP.WH,\nP.WT,\nP.FH,\nP.FT , RPT_GET_STR_GROUP(P.PART_OID) as STRGROUP \nfrom\n(\nselect \nP.OID as PART_OID,  \nPE.OID as PEOID, \nP.CODE  as PART_CODE,      \nDECODE (PE.SYMMETRY,  0,'P', 1,'S', 2,'C', 3,'') as SYMMETRY,            \nP.PART_TYPE,\n B.CODE as BLOCK_CODE,\nRPT_COPY_COUNT (P.OID) as NUM_EQ_PART,\nSUBSTR (GET_PART_DESC (P.OID, 1), 1, 200) as PART_DESC,            \nSUBSTR (GET_SECT_TP (prf.std_profile_oid), 1, 2) as ELEM_TYPE,\nSUBSTR (GET_MATERIAL_CODE (PRF.STD_PROFILE_OID, 2), 1, 12) as MATERIAL,\nRPT_GET_PART_LENGTH (P.OID) * 1000 as LENGTH,            \nSTD.WEB_HEIGHT as WIDTH,\nSTD.WEB_THICKNESS as THICKNESS,\nRPT_GET_PART_WEIGHT (P.OID) as WEIGHT_UNIT,            \nRPT_GET_PART_WEIGHT (P.OID) * RPT_COPY_COUNT (P.OID) as TOTAL_WEIGHT,\nSUBSTR (GET_NEST_ID (NP.NESTING_OID, NP.NESTING_BLOCK), 1, 15)  as NEST_ID,            \nNP.NUM_PART_NEST,\nNP.NEST_LENGTH,\nNP.NEST_WIDTH,\nNP.NUM_EQ_NEST,\nSTD.WEB_HEIGHT as WH,\nSTD.WEB_THICKNESS as WT,\nSTD.FLANGE_HEIGHT as FH,\nSTD.FLANGE_THICKNESS as FT    \nFROM \nPRD_EXPL_PART PE, PRD_PART P, INP_PROFILE_ATT_DB PRF, PRD_NEST_PART PNP, BLOCK B,STD_PROFILE STD, \n        (\n              select \n                     N.PART_OID,\n                     N.NESTING_OID,\n                     N.SYMM_CODE,\n                     NG.ID_SEQ_BLOCK as NESTING_BLOCK,\n                     COUNT (*) * GET_NUM_EQ_NEST (NESTING_OID) as NUM_PART_NEST,\n                     GET_NEST_HEIGHT (NESTING_OID) as NEST_LENGTH,\n                     GET_NEST_WIDTH (NESTING_OID) as NEST_WIDTH,\n                     GET_NUM_EQ_NEST (NESTING_OID) as NUM_EQ_NEST\n                        from\n                        PRD_NEST_PART N, PRD_NEST_GEN NG\n                        where \n                         NG.OID = N.NESTING_OID\n                         GROUP BY PART_OID, NESTING_OID, SYMM_CODE,  NG.ID_SEQ_BLOCK\n        )   NP  \nWHERE  \nNP.part_oid=P.OID AND\n(NP.SYMM_CODE=PE.SYMMETRY or NP.SYMM_CODE=2) AND\nPRF.INP_PART_OID = P.OID \nAND PE.PRD_PART_OID= P.OID \nAND PNP.PART_OID=P.OID \nAND (PNP.SYMM_CODE=PE.SYMMETRY or PNP.SYMM_CODE=2)          \nAND P.PART_TYPE IN (16,19,21,24)  \nAND P.BLOCK_OID=B.OID\nAND PRF.STD_PROFILE_OID=STD.OID\nand B.DESCRIPTION like '%${drNum}%'\n\nUNION ALL\n select\n P.OID as PART_OID,       \n PE.OID as PEOID,\n P.CODE as PART_CODE,\n           DECODE (PE.SYMMETRY,  0,'P', 1,'S', 2,'C', 3,'') as SYMMETRY,\n           P.PART_TYPE,\n           B.CODE as BLOCK_CODE,\n           RPT_COPY_COUNT (P.OID) as NUM_EQ_PART,\n           GET_PART_DESC (P.OID, 1) as PART_DESC,\n           'PL' as ELEM_TYPE,\n           SUBSTR (GET_MATERIAL_CODE (PA.MATERIAL_OID, 1), 1, 12) as MATERIAL,\n           RPT_GET_SD_PLATE_DIM (P.OID, 0) as LENGTH,\n           RPT_GET_SD_PLATE_DIM (P.OID, 1) as WIDTH,\n           PA.THICKNESS,\n           RPT_GET_PART_WEIGHT (P.OID) as WEIGHT_UNIT,\n           RPT_GET_PART_WEIGHT (P.OID) * RPT_COPY_COUNT (P.OID) as TOTAL_WEIGHT,\n           SUBSTR (GET_NEST_ID (NP.NESTING_OID, NP.NESTING_BLOCK), 1, 15) as NEST_ID ,\n           NP.NUM_PART_NEST,\n           NP.NEST_LENGTH,\n           NP.NEST_WIDTH,\n           NP.NUM_EQ_NEST,\n           0 as WH,\n            PA.THICKNESS as WT,\n            0 as FH,\n            0 as FT\n      FROM PRD_EXPL_PART PE,  PRD_PART P, V_RPT_SHDK_PLATE_ATT PA, PRD_NEST_PART PNP, BLOCK B,\n        (\n              select \n                     N.PART_OID,\n                     N.NESTING_OID,\n                     N.SYMM_CODE,\n                     NG.ID_SEQ_BLOCK as NESTING_BLOCK,\n                     COUNT (*) * GET_NUM_EQ_NEST (NESTING_OID) as NUM_PART_NEST,\n                     GET_NEST_HEIGHT (NESTING_OID) as NEST_LENGTH,\n                     GET_NEST_WIDTH (NESTING_OID) as NEST_WIDTH,\n                     GET_NUM_EQ_NEST (NESTING_OID) as NUM_EQ_NEST\n                        from\n                        PRD_NEST_PART N, PRD_NEST_GEN NG\n                        where \n                         NG.OID = N.NESTING_OID\n                         GROUP BY PART_OID, NESTING_OID, SYMM_CODE,  NG.ID_SEQ_BLOCK\n        )   NP  \n     WHERE \n         NP.part_oid=P.OID AND (NP.SYMM_CODE=PE.SYMMETRY or NP.SYMM_CODE=2) AND\n     PA.PRD_PART_OID = P.OID AND PE.PRD_PART_OID =PA.PRD_PART_OID\n           AND PNP.PART_OID=P.OID AND (PNP.SYMM_CODE=PE.SYMMETRY or PNP.SYMM_CODE=2)\n           AND P.PART_TYPE IN (9, 10)\n           AND P.BLOCK_OID=B.OID\n           and B.DESCRIPTION like '%${drNum}%' \n           \n                      UNION ALL\n    select  P.OID as PART_OID,   PE.OID as PEOID, P.CODE  as PART_CODE,\n     DECODE (PE.SYMMETRY,  0,'P', 1,'S', 2,'C', 3,'') as SYMMETRY,\n           P.PART_TYPE,\n           B.CODE as BLOCK_CODE,\n           RPT_COPY_COUNT (P.OID) as NUM_EQ_PART,\n           GET_PART_DESC (P.OID, 1) as PART_DESC,\n           SUBSTR (GET_SECT_TP (prf.std_profile_oid), 1, 2) as ELEM_TYPE,\n           SUBSTR (GET_MATERIAL_CODE (PRF.STD_PROFILE_OID, 2), 1, 12) as MATERIAL,\n           PRF.LENGTH * 1000 as LENGTH,\n           STD.WEB_HEIGHT as WIDTH,\n           STD.WEB_THICKNESS  as THICKNESS,\n           RPT_GET_PART_WEIGHT (P.OID) as WEIGHT_UNIT,\n           RPT_GET_PART_WEIGHT (P.OID) * RPT_COPY_COUNT (P.OID)  as TOTAL_WEIGHT,\n           SUBSTR (GET_NEST_ID (NP.NESTING_OID, NP.NESTING_BLOCK), 1, 15) as NEST_ID,\n           NP.NUM_PART_NEST,\n           NP.NEST_LENGTH,\n           NP.NEST_WIDTH,\n           NP.NUM_EQ_NEST,\n            STD.WEB_HEIGHT as WH,\n            STD.WEB_THICKNESS as WT,\n            STD.FLANGE_HEIGHT as FH,\n            STD.FLANGE_THICKNESS as FT\n      FROM PRD_EXPL_PART PE, PRD_PART P, PRD_PROFILE PRF,  PRD_NEST_PART PNP, BLOCK B,STD_PROFILE STD, \n        (\n              select \n                     N.PART_OID,\n                     N.NESTING_OID,\n                     N.SYMM_CODE,\n                     NG.ID_SEQ_BLOCK as NESTING_BLOCK,\n                     COUNT (*) * GET_NUM_EQ_NEST (NESTING_OID) as NUM_PART_NEST,\n                     GET_NEST_HEIGHT (NESTING_OID) as NEST_LENGTH,\n                     GET_NEST_WIDTH (NESTING_OID) as NEST_WIDTH,\n                     GET_NUM_EQ_NEST (NESTING_OID) as NUM_EQ_NEST\n                        from\n                        PRD_NEST_PART N, PRD_NEST_GEN NG\n                        where \n                         NG.OID = N.NESTING_OID\n                         GROUP BY PART_OID, NESTING_OID, SYMM_CODE,  NG.ID_SEQ_BLOCK\n        )   NP \n     WHERE     \n     NP.part_oid=P.OID AND (NP.SYMM_CODE=PE.SYMMETRY or NP.SYMM_CODE=2) AND\n     PRF.PRD_PART_OID = P.OID AND PE.PRD_PART_OID=PRF.PRD_PART_OID\n           AND PNP.PART_OID=P.OID AND (PNP.SYMM_CODE=PE.SYMMETRY or PNP.SYMM_CODE=2)\n           AND P.PART_TYPE IN (0, 1,2,3,6)\n                               AND P.BLOCK_OID=B.OID\n                               AND PRF.STD_PROFILE_OID=STD.OID\n          and B.DESCRIPTION like '%${drNum}%' \n                    UNION ALL\nselect P.OID as PART_OID,   PE.OID as PEOID, P.CODE  as PART_CODE,\n     DECODE (PE.SYMMETRY,  0,'P', 1,'S', 2,'C', 3,'') as SYMMETRY,\n           P.PART_TYPE,\n            B.CODE as BLOCK_CODE,\n           RPT_COPY_COUNT (P.OID) as NUM_EQ_PART,\n           SUBSTR (GET_PART_DESC (P.OID, 1), 1, 200) as PART_DESC,\n           'PL' as ELEM_TYPE,\n           SUBSTR (GET_MATERIAL_CODE (PA.MATERIAL_OID, 1), 1, 12) as MATERIAL,\n           RPT_INP_GET_PLT_DIMENSIONS (P.OID, 0) * 1000 as LENGTH,\n           RPT_INP_GET_PLT_DIMENSIONS (P.OID, 1) * 1000 as WIDTH,\n           PA.THICKNESS * 1000,\n           RPT_GET_PART_WEIGHT (P.OID) as WEIGHT_UNIT,\n           RPT_GET_PART_WEIGHT (P.OID) * RPT_COPY_COUNT (P.OID) as TOTAL_WEIGHT,\n           SUBSTR (GET_NEST_ID (NP.NESTING_OID, NP.NESTING_BLOCK), 1, 15) as NEST_ID,\n           NP.NUM_PART_NEST,\n           NP.NEST_LENGTH,\n           NP.NEST_WIDTH,\n           NP.NUM_EQ_NEST,\n           0 as WH,\n            PA.THICKNESS * 1000 as WT,\n            0 as FH,\n            0 as FT\n      FROM PRD_EXPL_PART PE, PRD_PART P, INP_PLATE_ATT_DB PA,  PRD_NEST_PART PNP, BLOCK B,\n (\n              select \n                     N.PART_OID,\n                     N.NESTING_OID,\n                     N.SYMM_CODE,\n                     NG.ID_SEQ_BLOCK as NESTING_BLOCK,\n                     COUNT (*) * GET_NUM_EQ_NEST (NESTING_OID) as NUM_PART_NEST,\n                     GET_NEST_HEIGHT (NESTING_OID) as NEST_LENGTH,\n                     GET_NEST_WIDTH (NESTING_OID) as NEST_WIDTH,\n                     GET_NUM_EQ_NEST (NESTING_OID) as NUM_EQ_NEST\n                        from\n                        PRD_NEST_PART N, PRD_NEST_GEN NG\n                        where \n                         NG.OID = N.NESTING_OID\n                         GROUP BY PART_OID, NESTING_OID, SYMM_CODE,  NG.ID_SEQ_BLOCK\n        )   NP  \n     WHERE  NP.part_oid=P.OID \n     AND (NP.SYMM_CODE=PE.SYMMETRY OR NP.SYMM_CODE=2) \n     AND   PA.INP_PART_OID = P.OID AND PE.PRD_PART_OID=P.OID\n           AND PNP.PART_OID=P.OID AND (PNP.SYMM_CODE=PE.SYMMETRY  or PNP.SYMM_CODE=2)\n           AND P.PART_TYPE IN (14,\n                               15,\n                               18,\n                               20,\n                               22,\n                               23,\n                               25,\n                               26)\n                               AND P.BLOCK_OID=B.OID\n          and B.DESCRIPTION like '%${drNum}%' \n                   UNION ALL\n\n\n\n\nselect distinct\nPART.OID as PART_OID,  \nPART.OID as PEOID, \nPART.CODE  as PART_CODE,\nDECODE (PART.SYMMETRY,  0,'P', 1,'S', 2,'C', 3,'') as SYMMETRY,            \nPART.PART_TYPE,\nPART.BLOCK_CODE as BLOCK_CODE,\nRPT_COPY_COUNT (PART.OID) as NUM_EQ_PART,\nSUBSTR (GET_PART_DESC (PART.OID, 1), 1, 200) as PART_DESC,            \nSUBSTR (GET_SECT_TP (PART.STD_SECTION_OID), 1, 2) as ELEM_TYPE,\nSUBSTR (GET_MATERIAL_CODE (PART.STD_SECTION_OID, 2), 1, 12) as MATERIAL,\nRPT_GET_PART_LENGTH (PART.OID) * 1000 as LENGTH,\n  GET_PRF_W_HEIGHT (PART.STD_SECTION_OID) as WIDTH,\n           GET_PRF_W_THICK (PART.STD_SECTION_OID),\n           RPT_GET_PART_WEIGHT (PART.OID) as WEIGHT_UNIT,\n           RPT_GET_PART_WEIGHT (PART.OID) * RPT_COPY_COUNT (PART.OID) as TOTAL_WEIGHT,\n           SUBSTR (GET_NEST_ID (NP.NESTING_OID, NP.NESTING_BLOCK), 1, 15)  as NEST_ID,\n           NP.NUM_PART_NEST,\n           NP.NEST_LENGTH,\n           NP.NEST_WIDTH,\n           NP.NUM_EQ_NEST,\n            0 as WH,\n            GET_PRF_W_THICK (PART.STD_SECTION_OID) as WT,\n            0 as FH,\n            0 as FT  \n\n                    from\n                           (\n                              select \n                                     N.PART_OID,\n                                     N.NESTING_OID,\n                                     N.SYMM_CODE,\n                                     NG.ID_SEQ_BLOCK as NESTING_BLOCK,\n                                     COUNT (*) * GET_NUM_EQ_NEST (NESTING_OID) as NUM_PART_NEST,\n                                     GET_NEST_HEIGHT (NESTING_OID) as NEST_LENGTH,\n                                     GET_NEST_WIDTH (NESTING_OID) as NEST_WIDTH,\n                                     GET_NUM_EQ_NEST (NESTING_OID) as NUM_EQ_NEST\n                                        from\n                                        PRD_NEST_PART N, PRD_NEST_GEN NG\n                                        where \n                                         NG.OID = N.NESTING_OID\n                                         GROUP BY PART_OID, NESTING_OID, SYMM_CODE,  NG.ID_SEQ_BLOCK\n                            )   NP ,\n                        (\n                             select \n                                P.OID ,\n                                P.CODE,\n                                P.PART_TYPE,\n                                PE.SYMMETRY,\n                                PRF.STD_SECTION_OID,\n                                (select CODE from BLOCK where OID=P.BLOCK_OID) as BLOCK_CODE\n                                from PRD_PART P, PRD_EXPL_PART PE, INP_LC_ATT_DB PRF\n                                where\n                                P.PART_TYPE in (17) AND \n                                P.BLOCK_OID=(select OID from BLOCK where DESCRIPTION like '%${drNum}%')\n                                AND PE.PRD_PART_OID=  P.OID\n                                AND PRF.INP_PART_OID = P.OID\n\n                        \n                        ) PART\n                        where \n                        NP.part_oid=PART.OID AND \n                        (NP.SYMM_CODE=PART.SYMMETRY or NP.SYMM_CODE=2)\n                    UNION ALL\n select P.OID as PART_OID,   PE.OID as PEOID, P.CODE  as PART_CODE,\n     DECODE (PE.SYMMETRY,  0,'P', 1,'S', 2,'C', 3,'') as SYMMETRY,\n           P.PART_TYPE,\n            B.CODE as BLOCK_CODE,\n           1 as NUM_EQ_PART,\n           GET_PART_DESC (P.OID, 1) as PART_DESC,\n           'PL' as ELEM_TYPE,\n           PA.MATQ as MATERIAL,\n           RPT_AS_GET_PLT_DIMENSIONS (P.OID, 0) * 1000 as LENGTH,\n           RPT_AS_GET_PLT_DIMENSIONS (P.OID, 1) * 1000 as WIDTH,\n           PA.THICKNESS,\n           PE.WEIGHT as WEIGHT_UNIT,\n           PE.WEIGHT as TOTAL_WEIGHT,\n           SUBSTR (GET_NEST_ID (NP.NESTING_OID, NP.NESTING_BLOCK), 1, 15)  as NEST_ID,\n           NP.NUM_PART_NEST,\n           NP.NEST_LENGTH,\n           NP.NEST_WIDTH,\n           NP.NUM_EQ_NEST,\n            0 as WH,\n            PA.THICKNESS as WT,\n            0 as FH,\n            0 as FT\n      FROM PRD_PART               P,\n           AS_STD_PART_PLATE      PA,\n           PRD_EXPL_PART          PE , PRD_NEST_PART PNP , BLOCK B,\n        (\n              select \n                     N.PART_OID,\n                     N.NESTING_OID,\n                     N.SYMM_CODE,\n                     NG.ID_SEQ_BLOCK as NESTING_BLOCK,\n                     COUNT (*) * GET_NUM_EQ_NEST (NESTING_OID) as NUM_PART_NEST,\n                     GET_NEST_HEIGHT (NESTING_OID) as NEST_LENGTH,\n                     GET_NEST_WIDTH (NESTING_OID) as NEST_WIDTH,\n                     GET_NUM_EQ_NEST (NESTING_OID) as NUM_EQ_NEST\n                        from\n                        PRD_NEST_PART N, PRD_NEST_GEN NG\n                        where \n                         NG.OID = N.NESTING_OID\n                         GROUP BY PART_OID, NESTING_OID, SYMM_CODE,  NG.ID_SEQ_BLOCK\n        )   NP \n     WHERE   NP.part_oid=P.OID AND   (NP.SYMM_CODE=PE.SYMMETRY or NP.SYMM_CODE=2) AND  PA.OID = P.OID\n           AND PNP.PART_OID=P.OID AND (PNP.SYMM_CODE=PE.SYMMETRY  or PNP.SYMM_CODE=2)\n           AND PE.PRD_PART_OID = P.OID\n           AND P.PART_TYPE = 12 AND P.BLOCK_OID=B.OID\n          and B.DESCRIPTION like '%${drNum}%' \n          \n                    UNION ALL\nselect P.OID as PART_OID,   PE.OID as PEOID,  P.CODE  as PART_CODE,\n     DECODE (PE.SYMMETRY,  0,'P', 1,'S', 2,'C', 3,'') as SYMMETRY,\n           P.PART_TYPE,\n            B.CODE as BLOCK_CODE,\n           1 as NUM_EQ_PART,\n           GET_PART_DESC (P.OID, 1) as PART_DESC,\n           DECODE (STD.SECTION,\n                   -1, '',\n                   0, 'FS',\n                   1, 'AS',\n                   2, 'IS',\n                   3, 'TS',\n                   4, 'US',\n                   5, 'BS',\n                   6, 'ST',\n                   7, 'AT',\n                   8, 'OS',\n                   9, 'PS',\n                   10, 'RS',\n                   11, 'MC',\n                   12, 'DB',\n                   13, 'SR',\n                   14, 'HR',\n                   15, 'LI',\n                   16, 'ZL',\n                   17, 'TL',\n                   '') as ELEM_TYPE,\n           SUBSTR (GET_MATERIAL_CODE (STD.MATERIAL_OID, 1), 1, 12) as MATERIAL,\n           PRF.LENGTH as LENGTH,\n           STD.WEB_HEIGHT as WIDTH,\n           STD.WEB_THICKNESS,\n           PE.WEIGHT as WEIGHT_UNIT,\n           PE.WEIGHT as TOTAL_WEIGHT,\n           SUBSTR (GET_NEST_ID (NP.NESTING_OID, NP.NESTING_BLOCK), 1, 15)  as NEST_ID,\n           NP.NUM_PART_NEST,\n           NP.NEST_LENGTH,\n           NP.NEST_WIDTH,\n           NP.NUM_EQ_NEST,\n            STD.WEB_HEIGHT as WH,\n            STD.WEB_THICKNESS as WT,\n            STD.FLANGE_HEIGHT as FH,\n            STD.FLANGE_THICKNESS as FT\n      FROM PRD_PART               P,\n           AS_STD_PART_PROF       PRF,\n           STD_PROFILE            STD,\n           PRD_EXPL_PART          PE, PRD_NEST_PART PNP, BLOCK B,\n        (\n              select \n                     N.PART_OID,\n                     N.NESTING_OID,\n                     N.SYMM_CODE,\n                     NG.ID_SEQ_BLOCK as NESTING_BLOCK,\n                     COUNT (*) * GET_NUM_EQ_NEST (NESTING_OID) as NUM_PART_NEST,\n                     GET_NEST_HEIGHT (NESTING_OID) as NEST_LENGTH,\n                     GET_NEST_WIDTH (NESTING_OID) as NEST_WIDTH,\n                     GET_NUM_EQ_NEST (NESTING_OID) as NUM_EQ_NEST\n                        from\n                        PRD_NEST_PART N, PRD_NEST_GEN NG\n                        where \n                         NG.OID = N.NESTING_OID\n                         GROUP BY PART_OID, NESTING_OID, SYMM_CODE,  NG.ID_SEQ_BLOCK\n        )   NP \n     WHERE  NP.part_oid=P.OID AND  (NP.SYMM_CODE=PE.SYMMETRY or NP.SYMM_CODE=2) AND   PRF.OID = P.OID\n           AND PE.PRD_PART_OID = P.OID\n           AND STD.KSE = PRF.KSE\n           AND PNP.PART_OID=P.OID AND (PNP.SYMM_CODE=PE.SYMMETRY or PNP.SYMM_CODE=2)\n           AND P.PART_TYPE = 7 AND P.BLOCK_OID=B.OID\n          and B.DESCRIPTION like '%${drNum}%' \n          \n          \n          UNION ALL\n select P.OID as PART_OID,   PE.OID as PEOID,  P.CODE  as PART_CODE,\n     DECODE (PE.SYMMETRY,  0,'P', 1,'S', 2,'C', 3,'') as SYMMETRY,\n           P.PART_TYPE,\n            B.CODE as BLOCK_CODE,\n           RPT_COPY_COUNT (P.OID) as NUM_EQ_PART,\n           GET_PART_DESC (P.OID, 1) as PART_DESC,\n           'PL' as ELEM_TYPE,\n           SUBSTR (GET_MATERIAL_CODE (PA.MATERIAL_OID, 1), 1, 12) as MATERIAL,\n           RPT_GET_SD_PLATE_DIM (P.OID, 0) as LENGTH,\n           RPT_GET_SD_PLATE_DIM (P.OID, 1) as WIDTH,\n           PA.THICKNESS,\n           RPT_GET_PART_WEIGHT (P.OID) as WEIGHT_UNIT,\n           RPT_GET_PART_WEIGHT (P.OID) * RPT_COPY_COUNT (P.OID) as TOTAL_WEIGHT,\n           NULL  as NEST_ID,\n           0,\n           0,\n           0,\n           0,\n            0 as WH,\n            PA.THICKNESS as WT,\n            0 as FH,\n            0 as FT\n      FROM V_RPT_PART_NO_NESTING_SD P, V_RPT_SHDK_PLATE_ATT PA,PRD_EXPL_PART PE, BLOCK B\n     WHERE PA.PRD_PART_OID = P.OID AND PE.PRD_PART_OID=  P.OID AND P.BLOCK_OID=B.OID\n          and B.DESCRIPTION like '%${drNum}%' \n          \n          UNION ALL\n    select P.OID as PART_OID,   PE.OID as PEOID,  P.CODE  as PART_CODE,\n     DECODE (PE.SYMMETRY,  0,'P', 1,'S', 2,'C', 3,'') as SYMMETRY,\n           P.PART_TYPE,\n          B.CODE as BLOCK_CODE,\n           RPT_COPY_COUNT (P.OID) as NUM_EQ_PART,\n           GET_PART_DESC (P.OID, 1) as PART_DESC,\n           SUBSTR (GET_SECT_TP (prf.std_profile_oid), 1, 2) as ELEM_TYPE,\n           SUBSTR (GET_MATERIAL_CODE (PRF.STD_PROFILE_OID, 2), 1, 12) as MATERIAL,\n           PRF.LENGTH * 1000 as LENGTH,\n           STD.WEB_HEIGHT as WIDTH,\n           STD.WEB_THICKNESS as THICKNESS,\n           RPT_GET_PART_WEIGHT (P.OID) as WEIGHT_UNIT,\n           RPT_GET_PART_WEIGHT (P.OID) * RPT_COPY_COUNT (P.OID) as TOTAL_WEIGHT,\n           NULL  as NEST_ID,\n           0,\n           0,\n           0,\n           0,\n            STD.WEB_HEIGHT as WH,\n            STD.WEB_THICKNESS as WT,\n            STD.FLANGE_HEIGHT as FH,\n            STD.FLANGE_THICKNESS as FT\n      FROM PRD_EXPL_PART PE, V_PRD_PART_NO_NESTING P, PRD_PROFILE PRF, BLOCK B,STD_PROFILE STD\n     WHERE     PRF.PRD_PART_OID = P.OID AND PE.PRD_PART_OID=  P.OID\n           AND P.PART_TYPE IN (0,\n                               1,\n                               2,\n                               3,\n                               6)\n                               AND PRF.STD_PROFILE_OID=STD.OID\n                               AND P.BLOCK_OID=B.OID\n          and B.DESCRIPTION like '%${drNum}%' \n          \n          UNION ALL\n    select P.OID as PART_OID,   PE.OID as PEOID,  P.CODE  as PART_CODE,\n     DECODE (PE.SYMMETRY,  0,'P', 1,'S', 2,'C', 3,'') as SYMMETRY,\n           P.PART_TYPE,\n            B.CODE as BLOCK_CODE,\n           RPT_COPY_COUNT (P.OID) as NUM_EQ_PART,\n           SUBSTR (GET_PART_DESC (P.OID, 1), 1, 200) as PART_DESC,\n           'PL' as ELEM_TYPE,\n           SUBSTR (GET_MATERIAL_CODE (PA.MATERIAL_OID, 1), 1, 12) as MATERIAL,\n           RPT_INP_GET_PLT_DIMENSIONS (INP_PART_OID, 0) * 1000 as LENGTH,\n           RPT_INP_GET_PLT_DIMENSIONS (INP_PART_OID, 1) * 1000 as WIDTH,\n           PA.THICKNESS * 1000,\n           RPT_GET_PART_WEIGHT (P.OID) as WEIGHT_UNIT,\n           RPT_GET_PART_WEIGHT (P.OID) * RPT_COPY_COUNT (P.OID) as TOTAL_WEIGHT,\n           NULL  as NEST_ID,\n           0,\n           0,\n           0,\n           0,\n            0 as WH,\n            PA.THICKNESS as WT,\n            0 as FH,\n            0 as FT\n      FROM PRD_EXPL_PART PE,V_PRD_PART_NO_NESTING P, INP_PLATE_ATT_DB PA, BLOCK B\n     WHERE     PA.INP_PART_OID = P.OID AND PE.PRD_PART_OID=  P.OID\n           AND P.PART_TYPE IN (14,\n                               15,\n                               18,\n                               20,\n                               22,\n                               23,\n                               25,\n                               26)AND P.BLOCK_OID=B.OID\n          and B.DESCRIPTION like '%${drNum}%' \n          \n          UNION ALL\nselect P.OID as PART_OID,   PE.OID as PEOID,  P.CODE  as PART_CODE,\n     DECODE (PE.SYMMETRY,  0,'P', 1,'S', 2,'C', 3,'') as SYMMETRY,\n           P.PART_TYPE,\n           B.CODE as BLOCK_CODE,\n           RPT_COPY_COUNT (P.OID) as NUM_EQ_PART,\n           SUBSTR (GET_PART_DESC (P.OID, 1), 1, 200) as PART_DESC,\n           SUBSTR (GET_SECT_TP (prf.std_profile_oid), 1, 2) as ELEM_TYPE,\n           SUBSTR (GET_MATERIAL_CODE (PRF.STD_PROFILE_OID, 2), 1, 12) as MATERIAL,\n           RPT_GET_PART_LENGTH (P.OID) * 1000 as LENGTH,\n           STD.WEB_HEIGHT as WIDTH,\n           STD.WEB_THICKNESS,\n           RPT_GET_PART_WEIGHT (P.OID) as WEIGHT_UNIT,\n           RPT_GET_PART_WEIGHT (P.OID) * RPT_COPY_COUNT (P.OID) as TOTAL_WEIGHT,\n           NULL  as NEST_ID,\n           0,\n           0,\n           0,\n           0,\n            STD.WEB_HEIGHT as WH,\n            STD.WEB_THICKNESS as WT,\n            STD.FLANGE_HEIGHT as FH,\n            STD.FLANGE_THICKNESS as FT\n      FROM PRD_EXPL_PART PE,V_PRD_PART_NO_NESTING P, INP_PROFILE_ATT_DB PRF, BLOCK B,STD_PROFILE STD\n     WHERE     PRF.INP_PART_OID = P.OID AND PE.PRD_PART_OID=  P.OID AND PRF.STD_PROFILE_OID=STD.OID\n           AND P.PART_TYPE IN (16,\n                               19,\n                               21,\n                               24)AND P.BLOCK_OID=B.OID\n          and B.DESCRIPTION like '%${drNum}%' \n          UNION ALL\n select P.OID as PART_OID,   PE.OID as PEOID,  P.CODE  as PART_CODE,\n     DECODE (PE.SYMMETRY,  0,'P', 1,'S', 2,'C', 3,'') as SYMMETRY,\n           P.PART_TYPE,\n           B.CODE as BLOCK_CODE,\n           RPT_COPY_COUNT (P.OID) as NUM_EQ_PART,\n           SUBSTR (GET_PART_DESC (P.OID, 1), 1, 200) as PART_DESC,\n           SUBSTR (GET_SECT_TP (PRF.STD_SECTION_OID), 1, 2) as ELEM_TYPE,\n           SUBSTR (GET_MATERIAL_CODE (PRF.STD_SECTION_OID, 2), 1, 12) as MATERIAL,\n           RPT_GET_PART_LENGTH (P.OID) * 1000 as LENGTH,\n           GET_PRF_W_HEIGHT (PRF.STD_SECTION_OID) as WIDTH,\n           GET_PRF_W_THICK (PRF.STD_SECTION_OID),\n           RPT_GET_PART_WEIGHT (P.OID) as WEIGHT_UNIT,\n           RPT_GET_PART_WEIGHT (P.OID) * RPT_COPY_COUNT (P.OID) as TOTAL_WEIGHT,\n           NULL  as NEST_ID,\n           0,\n           0,\n           0,\n           0,\n            0 as WH,\n            GET_PRF_W_THICK (PRF.STD_SECTION_OID) as WT,\n            0 as FH,\n            0 as FT\n      FROM PRD_EXPL_PART PE,V_PRD_PART_NO_NESTING P, INP_LC_ATT_DB PRF, BLOCK B\n     WHERE PRF.INP_PART_OID = P.OID AND P.PART_TYPE = 17 AND PE.PRD_PART_OID=  P.OID AND P.BLOCK_OID=B.OID\n          and B.DESCRIPTION like '%${drNum}%' \n          \n          UNION ALL\n select P.OID as PART_OID,   PE.OID as PEOID,  P.CODE,\n     DECODE (PE.SYMMETRY,  0,'P', 1,'S', 2,'C', 3,'') as SYMMETRY,\n           P.PART_TYPE,\n            B.CODE as BLOCK_CODE,\n           1 as NUM_EQ_PART,\n           GET_PART_DESC (P.OID, 1) as PART_DESC,\n           'PL' as ELEM_TYPE,\n           PA.MATQ as MATERIAL,\n           RPT_AS_GET_PLT_DIMENSIONS (P.OID, 0) * 1000 as LENGTH,\n           RPT_AS_GET_PLT_DIMENSIONS (P.OID, 1) * 1000 as WIDTH,\n           PA.THICKNESS,\n           PE.WEIGHT as WEIGHT_UNIT,\n           PE.WEIGHT as TOTAL_WEIGHT,\n           NULL  as NEST_ID,\n           0,\n           0,\n           0,\n           0,\n            0 as WH,\n            PA.THICKNESS as WT,\n            0 as FH,\n            0 as FT\n      FROM V_PRD_PART_NO_NESTING P, AS_STD_PART_PLATE PA, PRD_EXPL_PART PE, BLOCK B\n     WHERE PA.OID = P.OID AND PE.PRD_PART_OID = P.OID AND P.PART_TYPE = 12  AND P.BLOCK_OID=B.OID\n          and B.DESCRIPTION like '%${drNum}%' \n          UNION ALL\nselect  PE.PRD_PART_OID as PART_OID,  PE.OID as PEOID,  P.CODE as PART_CODE,\n     DECODE (PE.SYMMETRY,  0,'P', 1,'S', 2,'C', 3,'') as SYMMETRY,\n           P.PART_TYPE,\n         B.CODE as BLOCK_CODE,\n           1 as NUM_EQ_PART,\n           GET_PART_DESC (P.OID, 1) as PART_DESC,\n           'PL' as ELEM_TYPE,\n           PA.MATQ as MATERIAL,\n           RPT_AS_GET_PLT_DIMENSIONS (P.OID, 0) * 1000 as LENGTH,\n           RPT_AS_GET_PLT_DIMENSIONS (P.OID, 1) * 1000 as WIDTH,\n           PA.THICKNESS,\n           PE.WEIGHT as WEIGHT_UNIT,\n           PE.WEIGHT as TOTAL_WEIGHT,\n           NULL  as NEST_ID,\n           0,\n           0,\n           0,\n           0,\n            0 as WH,\n            PA.THICKNESS as WT,\n            0 as FH,\n            0 as FT\n      FROM V_PRD_PART_NO_NESTING P, AS_PART_CONT_PLATE PA, PRD_EXPL_PART PE, BLOCK B\n     WHERE PA.OID = P.OID AND PE.PRD_PART_OID = P.OID AND P.PART_TYPE = 12  AND P.BLOCK_OID=B.OID\n          and B.DESCRIPTION like '%${drNum}%' \n          UNION ALL\nselect P.OID as PART_OID,   PE.OID as PEOID, P.CODE as PART_CODE,\n     DECODE (PE.SYMMETRY,  0,'P', 1,'S', 2,'C', 3,'') as SYMMETRY,\n           P.PART_TYPE,\n           B.CODE as BLOCK_CODE,\n           1 as NUM_EQ_PART,\n           GET_PART_DESC (P.OID, 1) as PART_DESC,\n           DECODE (STD.SECTION,\n                   -1, '',\n                   0, 'FS',\n                   1, 'AS',\n                   2, 'IS',\n                   3, 'TS',\n                   4, 'US',\n                   5, 'BS',\n                   6, 'ST',\n                   7, 'AT',\n                   8, 'OS',\n                   9, 'PS',\n                   10, 'RS',\n                   11, 'MC',\n                   12, 'DB',\n                   13, 'SR',\n                   14, 'HR',\n                   15, 'LI',\n                   16, 'ZL',\n                   17, 'TL',\n                   '') as ELEM_TYPE,\n           SUBSTR (GET_MATERIAL_CODE (STD.MATERIAL_OID, 1), 1, 12) as MATERIAL,\n           PRF.LENGTH as LENGTH,\n           STD.WEB_HEIGHT as WIDTH,\n           STD.WEB_THICKNESS,\n           PE.WEIGHT as WEIGHT_UNIT,\n           PE.WEIGHT as TOTAL_WEIGHT,\n           NULL  as NEST_ID,\n           0,\n           0,\n           0,\n           0,\n            STD.WEB_HEIGHT as WH,\n            STD.WEB_THICKNESS as WT,\n            STD.FLANGE_HEIGHT as FH,\n            STD.FLANGE_THICKNESS as FT\n      FROM V_PRD_PART_NO_NESTING  P,\n           AS_STD_PART_PROF       PRF,\n           STD_PROFILE            STD,\n           PRD_EXPL_PART          PE, BLOCK B\n     WHERE     PRF.OID = P.OID\n           AND PE.PRD_PART_OID = P.OID\n           AND STD.KSE = PRF.KSE\n           AND P.PART_TYPE = 7\n             AND P.BLOCK_OID=B.OID\n          and B.DESCRIPTION like '%${drNum}%' \n                  ) P\norder by P.PART_CODE,P.SYMMETRY"

  private def partsByDrawingNum_0831(drNum: String): String =s"select  distinct P.PART_OID as PART_OID,\nP.NUM_PART_NEST as QTY,\nP.PART_CODE,\nP.SYMMETRY,\nP.PART_TYPE,\nP.BLOCK_CODE,\nP.BLOCK_CODE as DESCRIPTION,\nP.NUM_EQ_PART,\nP.PART_DESC,\nP.ELEM_TYPE,\nP.MATERIAL,\nP.LENGTH,\nP.WIDTH,\nP.THICKNESS,\nP.WEIGHT_UNIT,\nP.TOTAL_WEIGHT,\nP.NEST_ID,\nP.NEST_LENGTH,\nP.NEST_WIDTH,\nP.NUM_EQ_NEST,\nP.WH,\nP.WT,\nP.FH,\nP.FT , \nRPT_GET_STR_GROUP(P.PART_OID) as STRGROUP ,\nP.STOCK as STOCK_CODE\n\nfrom\n(\nselect \nP.OID as PART_OID,  \nPE.OID as PEOID, \nP.CODE  as PART_CODE,      \nDECODE (PE.SYMMETRY,  0,'P', 1,'S', 2,'C', 3,'') as SYMMETRY,            \nP.PART_TYPE,\n B.CODE as BLOCK_CODE,\nRPT_COPY_COUNT (P.OID) as NUM_EQ_PART,\nSUBSTR (GET_PART_DESC (P.OID, 1), 1, 200) as PART_DESC,            \nSUBSTR (GET_SECT_TP (prf.std_profile_oid), 1, 2) as ELEM_TYPE,\nSUBSTR (GET_MATERIAL_CODE (PRF.STD_PROFILE_OID, 2), 1, 12) as MATERIAL,\nRPT_GET_PART_LENGTH (P.OID) * 1000 as LENGTH,            \nSTD.WEB_HEIGHT as WIDTH,\nSTD.WEB_THICKNESS as THICKNESS,\nRPT_GET_PART_WEIGHT (P.OID) as WEIGHT_UNIT,            \nRPT_GET_PART_WEIGHT (P.OID) * RPT_COPY_COUNT (P.OID) as TOTAL_WEIGHT,\nSUBSTR (GET_NEST_ID (NP.NESTING_OID, NP.NESTING_BLOCK), 1, 15)  as NEST_ID,            \nNP.NUM_PART_NEST,\nNP.NEST_LENGTH,\nNP.NEST_WIDTH,\nNP.NUM_EQ_NEST,\nSTD.WEB_HEIGHT as WH,\nSTD.WEB_THICKNESS as WT,\nSTD.FLANGE_HEIGHT as FH,\nSTD.FLANGE_THICKNESS as FT,\n STD.STOCK_CODE0 as STOCK   \nFROM \nPRD_EXPL_PART PE, PRD_PART P, INP_PROFILE_ATT_DB PRF, PRD_NEST_PART PNP, BLOCK B,STD_PROFILE STD, \n        (\n              select \n                     N.PART_OID,\n                     N.NESTING_OID,\n                     N.SYMM_CODE,\n                     NG.ID_SEQ_BLOCK as NESTING_BLOCK,\n                     COUNT (*) * GET_NUM_EQ_NEST (NESTING_OID) as NUM_PART_NEST,\n                     GET_NEST_HEIGHT (NESTING_OID) as NEST_LENGTH,\n                     GET_NEST_WIDTH (NESTING_OID) as NEST_WIDTH,\n                     GET_NUM_EQ_NEST (NESTING_OID) as NUM_EQ_NEST\n                        from\n                        PRD_NEST_PART N, PRD_NEST_GEN NG\n                        where \n                         NG.OID = N.NESTING_OID\n                         GROUP BY PART_OID, NESTING_OID, SYMM_CODE,  NG.ID_SEQ_BLOCK\n        )   NP  \nWHERE  \nNP.part_oid=P.OID AND\n(NP.SYMM_CODE=PE.SYMMETRY or NP.SYMM_CODE=2) AND\nPRF.INP_PART_OID = P.OID \nAND PE.PRD_PART_OID= P.OID \nAND PNP.PART_OID=P.OID \nAND (PNP.SYMM_CODE=PE.SYMMETRY or PNP.SYMM_CODE=2)          \nAND P.PART_TYPE IN (16,19,21,24)  \nAND P.BLOCK_OID=B.OID\nAND PRF.STD_PROFILE_OID=STD.OID\nand B.DESCRIPTION like '%${drNum}%'\n          UNION ALL\n  select\n P.OID as PART_OID,       \n PE.OID as PEOID,\n P.CODE as PART_CODE,\n           DECODE (PE.SYMMETRY,  0,'P', 1,'S', 2,'C', 3,'') as SYMMETRY,\n           P.PART_TYPE,\n           B.CODE as BLOCK_CODE,\n           RPT_COPY_COUNT (P.OID) as NUM_EQ_PART,\n           GET_PART_DESC (P.OID, 1) as PART_DESC,\n           'PL' as ELEM_TYPE,\n           SUBSTR (GET_MATERIAL_CODE (PA.MATERIAL_OID, 1), 1, 12) as MATERIAL,\n           RPT_GET_SD_PLATE_DIM (P.OID, 0) as LENGTH,\n           RPT_GET_SD_PLATE_DIM (P.OID, 1) as WIDTH,\n           PA.THICKNESS,\n           RPT_GET_PART_WEIGHT (P.OID) as WEIGHT_UNIT,\n           RPT_GET_PART_WEIGHT (P.OID) * RPT_COPY_COUNT (P.OID) as TOTAL_WEIGHT,\n           SUBSTR (GET_NEST_ID (NP.NESTING_OID, NP.NESTING_BLOCK), 1, 15) as NEST_ID ,\n           NP.NUM_PART_NEST,\n           NP.NEST_LENGTH,\n           NP.NEST_WIDTH,\n           NP.NUM_EQ_NEST,\n           0 as WH,\n            PA.THICKNESS as WT,\n            0 as FH,\n            0 as FT,\n            (select STORAGE_CODE from STD_PLATE where MATERIAL_OID=PA.MATERIAL_OID and THICKNESS=PA.THICKNESS   fetch first 1 row only  ) as STOCK\n      FROM PRD_EXPL_PART PE,  PRD_PART P, V_RPT_SHDK_PLATE_ATT PA, PRD_NEST_PART PNP, BLOCK B,\n        (\n              select \n                     N.PART_OID,\n                     N.NESTING_OID,\n                     N.SYMM_CODE,\n                     NG.ID_SEQ_BLOCK as NESTING_BLOCK,\n                     COUNT (*) * GET_NUM_EQ_NEST (NESTING_OID) as NUM_PART_NEST,\n                     GET_NEST_HEIGHT (NESTING_OID) as NEST_LENGTH,\n                     GET_NEST_WIDTH (NESTING_OID) as NEST_WIDTH,\n                     GET_NUM_EQ_NEST (NESTING_OID) as NUM_EQ_NEST\n                        from\n                        PRD_NEST_PART N, PRD_NEST_GEN NG\n                        where \n                         NG.OID = N.NESTING_OID\n                         GROUP BY PART_OID, NESTING_OID, SYMM_CODE,  NG.ID_SEQ_BLOCK\n        )   NP  \n     WHERE \n         NP.part_oid=P.OID AND (NP.SYMM_CODE=PE.SYMMETRY or NP.SYMM_CODE=2) AND\n     PA.PRD_PART_OID = P.OID AND PE.PRD_PART_OID =PA.PRD_PART_OID\n           AND PNP.PART_OID=P.OID AND (PNP.SYMM_CODE=PE.SYMMETRY or PNP.SYMM_CODE=2)\n           AND P.PART_TYPE IN (9, 10)\n           AND P.BLOCK_OID=B.OID\n           and B.DESCRIPTION like '%${drNum}%'          \n          UNION ALL\n              select  P.OID as PART_OID,   PE.OID as PEOID, P.CODE  as PART_CODE,\n     DECODE (PE.SYMMETRY,  0,'P', 1,'S', 2,'C', 3,'') as SYMMETRY,\n           P.PART_TYPE,\n           B.CODE as BLOCK_CODE,\n           RPT_COPY_COUNT (P.OID) as NUM_EQ_PART,\n           GET_PART_DESC (P.OID, 1) as PART_DESC,\n           SUBSTR (GET_SECT_TP (prf.std_profile_oid), 1, 2) as ELEM_TYPE,\n           SUBSTR (GET_MATERIAL_CODE (PRF.STD_PROFILE_OID, 2), 1, 12) as MATERIAL,\n           PRF.LENGTH * 1000 as LENGTH,\n           STD.WEB_HEIGHT as WIDTH,\n           STD.WEB_THICKNESS  as THICKNESS,\n           RPT_GET_PART_WEIGHT (P.OID) as WEIGHT_UNIT,\n           RPT_GET_PART_WEIGHT (P.OID) * RPT_COPY_COUNT (P.OID)  as TOTAL_WEIGHT,\n           SUBSTR (GET_NEST_ID (NP.NESTING_OID, NP.NESTING_BLOCK), 1, 15) as NEST_ID,\n           NP.NUM_PART_NEST,\n           NP.NEST_LENGTH,\n           NP.NEST_WIDTH,\n           NP.NUM_EQ_NEST,\n            STD.WEB_HEIGHT as WH,\n            STD.WEB_THICKNESS as WT,\n            STD.FLANGE_HEIGHT as FH,\n            STD.FLANGE_THICKNESS as FT,\n            STD.STOCK_CODE0 as STOCK \n      FROM PRD_EXPL_PART PE, PRD_PART P, PRD_PROFILE PRF,  PRD_NEST_PART PNP, BLOCK B,STD_PROFILE STD, \n        (\n              select \n                     N.PART_OID,\n                     N.NESTING_OID,\n                     N.SYMM_CODE,\n                     NG.ID_SEQ_BLOCK as NESTING_BLOCK,\n                     COUNT (*) * GET_NUM_EQ_NEST (NESTING_OID) as NUM_PART_NEST,\n                     GET_NEST_HEIGHT (NESTING_OID) as NEST_LENGTH,\n                     GET_NEST_WIDTH (NESTING_OID) as NEST_WIDTH,\n                     GET_NUM_EQ_NEST (NESTING_OID) as NUM_EQ_NEST\n                        from\n                        PRD_NEST_PART N, PRD_NEST_GEN NG\n                        where \n                         NG.OID = N.NESTING_OID\n                         GROUP BY PART_OID, NESTING_OID, SYMM_CODE,  NG.ID_SEQ_BLOCK\n        )   NP \n     WHERE     \n     NP.part_oid=P.OID AND (NP.SYMM_CODE=PE.SYMMETRY or NP.SYMM_CODE=2) AND\n     PRF.PRD_PART_OID = P.OID AND PE.PRD_PART_OID=PRF.PRD_PART_OID\n           AND PNP.PART_OID=P.OID AND (PNP.SYMM_CODE=PE.SYMMETRY or PNP.SYMM_CODE=2)\n           AND P.PART_TYPE IN (0,1,2,3,6)\n                               AND P.BLOCK_OID=B.OID\n                               AND PRF.STD_PROFILE_OID=STD.OID\n          and B.DESCRIPTION like '%${drNum}%' \n          UNION ALL\n          select P.OID as PART_OID,   PE.OID as PEOID, P.CODE  as PART_CODE,\n     DECODE (PE.SYMMETRY,  0,'P', 1,'S', 2,'C', 3,'') as SYMMETRY,\n           P.PART_TYPE,\n            B.CODE as BLOCK_CODE,\n           RPT_COPY_COUNT (P.OID) as NUM_EQ_PART,\n           SUBSTR (GET_PART_DESC (P.OID, 1), 1, 200) as PART_DESC,\n           'PL' as ELEM_TYPE,\n           SUBSTR (GET_MATERIAL_CODE (PA.MATERIAL_OID, 1), 1, 12) as MATERIAL,\n           RPT_INP_GET_PLT_DIMENSIONS (P.OID, 0) * 1000 as LENGTH,\n           RPT_INP_GET_PLT_DIMENSIONS (P.OID, 1) * 1000 as WIDTH,\n           PA.THICKNESS * 1000,\n           RPT_GET_PART_WEIGHT (P.OID) as WEIGHT_UNIT,\n           RPT_GET_PART_WEIGHT (P.OID) * RPT_COPY_COUNT (P.OID) as TOTAL_WEIGHT,\n           SUBSTR (GET_NEST_ID (NP.NESTING_OID, NP.NESTING_BLOCK), 1, 15) as NEST_ID,\n           NP.NUM_PART_NEST,\n           NP.NEST_LENGTH,\n           NP.NEST_WIDTH,\n           NP.NUM_EQ_NEST,\n           0 as WH,\n            PA.THICKNESS * 1000 as WT,\n            0 as FH,\n            0 as FT,\n            (select STORAGE_CODE from STD_PLATE where MATERIAL_OID=PA.MATERIAL_OID and THICKNESS=PA.THICKNESS*1000 fetch first 1 row only    ) as STOCK\n      FROM PRD_EXPL_PART PE, PRD_PART P, INP_PLATE_ATT_DB PA,  PRD_NEST_PART PNP, BLOCK B,\n (\n              select \n                     N.PART_OID,\n                     N.NESTING_OID,\n                     N.SYMM_CODE,\n                     NG.ID_SEQ_BLOCK as NESTING_BLOCK,\n                     COUNT (*) * GET_NUM_EQ_NEST (NESTING_OID) as NUM_PART_NEST,\n                     GET_NEST_HEIGHT (NESTING_OID) as NEST_LENGTH,\n                     GET_NEST_WIDTH (NESTING_OID) as NEST_WIDTH,\n                     GET_NUM_EQ_NEST (NESTING_OID) as NUM_EQ_NEST\n                        from\n                        PRD_NEST_PART N, PRD_NEST_GEN NG\n                        where \n                         NG.OID = N.NESTING_OID\n                         GROUP BY PART_OID, NESTING_OID, SYMM_CODE,  NG.ID_SEQ_BLOCK\n        )   NP  \n     WHERE  NP.part_oid=P.OID \n     AND (NP.SYMM_CODE=PE.SYMMETRY OR NP.SYMM_CODE=2) \n     AND   PA.INP_PART_OID = P.OID AND PE.PRD_PART_OID=P.OID\n           AND PNP.PART_OID=P.OID AND (PNP.SYMM_CODE=PE.SYMMETRY  or PNP.SYMM_CODE=2)\n           AND P.PART_TYPE IN (14,\n                               15,\n                               18,\n                               20,\n                               22,\n                               23,\n                               25,\n                               26)\n                               AND P.BLOCK_OID=B.OID\n          and B.DESCRIPTION like '%${drNum}%' \n          UNION ALL\n          select distinct\nPART.OID as PART_OID,  \nPART.OID as PEOID, \nPART.CODE  as PART_CODE,\nDECODE (PART.SYMMETRY,  0,'P', 1,'S', 2,'C', 3,'') as SYMMETRY,            \nPART.PART_TYPE,\nPART.BLOCK_CODE as BLOCK_CODE,\nRPT_COPY_COUNT (PART.OID) as NUM_EQ_PART,\nSUBSTR (GET_PART_DESC (PART.OID, 1), 1, 200) as PART_DESC,            \nSUBSTR (GET_SECT_TP (PART.STD_SECTION_OID), 1, 2) as ELEM_TYPE,\nSUBSTR (GET_MATERIAL_CODE (PART.STD_SECTION_OID, 2), 1, 12) as MATERIAL,\nRPT_GET_PART_LENGTH (PART.OID) * 1000 as LENGTH,\n  GET_PRF_W_HEIGHT (PART.STD_SECTION_OID) as WIDTH,\n           GET_PRF_W_THICK (PART.STD_SECTION_OID),\n           RPT_GET_PART_WEIGHT (PART.OID) as WEIGHT_UNIT,\n           RPT_GET_PART_WEIGHT (PART.OID) * RPT_COPY_COUNT (PART.OID) as TOTAL_WEIGHT,\n           SUBSTR (GET_NEST_ID (NP.NESTING_OID, NP.NESTING_BLOCK), 1, 15)  as NEST_ID,\n           NP.NUM_PART_NEST,\n           NP.NEST_LENGTH,\n           NP.NEST_WIDTH,\n           NP.NUM_EQ_NEST,\n            0 as WH,\n            GET_PRF_W_THICK (PART.STD_SECTION_OID) as WT,\n            0 as FH,\n            0 as FT,\n            (select STORAGE_CODE from STD_PLATE where MATERIAL_OID=NP.MAT_CODE and THICKNESS=GET_PRF_W_THICK (PART.STD_SECTION_OID) fetch first 1 row only    ) as STOCK\n               \n\n                    from\n                           (\n                              select \n                                     N.PART_OID,\n                                     N.NESTING_OID,\n                                     N.SYMM_CODE,\n                                     NG.ID_SEQ_BLOCK as NESTING_BLOCK,\n                                     COUNT (*) * GET_NUM_EQ_NEST (NESTING_OID) as NUM_PART_NEST,\n                                     GET_NEST_HEIGHT (NESTING_OID) as NEST_LENGTH,\n                                     GET_NEST_WIDTH (NESTING_OID) as NEST_WIDTH,\n                                     GET_NUM_EQ_NEST (NESTING_OID) as NUM_EQ_NEST,\n                                     NG.MAT_CODE\n                                        from\n                                        PRD_NEST_PART N, PRD_NEST_GEN NG\n                                        where \n                                         NG.OID = N.NESTING_OID\n                                         GROUP BY PART_OID, NESTING_OID, SYMM_CODE,  NG.ID_SEQ_BLOCK,NG.MAT_CODE\n                            )   NP ,\n                        (\n                             select \n                                P.OID,\n                                P.CODE,\n                                P.PART_TYPE,\n                                PE.SYMMETRY,\n                                PRF.STD_SECTION_OID,\n                                (select CODE from BLOCK where OID=P.BLOCK_OID) as BLOCK_CODE\n                                from PRD_PART P, PRD_EXPL_PART PE, INP_LC_ATT_DB PRF\n                                where\n                                P.PART_TYPE in (17)  \n                                AND P.BLOCK_OID=(select OID from BLOCK where DESCRIPTION like '%${drNum}%')\n                                AND PE.PRD_PART_OID=  P.OID\n                                AND PRF.INP_PART_OID = P.OID\n\n                        \n                        ) PART\n                        where \n                        NP.part_oid=PART.OID AND \n                        (NP.SYMM_CODE=PART.SYMMETRY or NP.SYMM_CODE=2)\n          \n          UNION ALL\n           select P.OID as PART_OID,   PE.OID as PEOID, P.CODE  as PART_CODE,\n     DECODE (PE.SYMMETRY,  0,'P', 1,'S', 2,'C', 3,'') as SYMMETRY,\n           P.PART_TYPE,\n            B.CODE as BLOCK_CODE,\n           1 as NUM_EQ_PART,\n           GET_PART_DESC (P.OID, 1) as PART_DESC,\n           'PL' as ELEM_TYPE,\n           PA.MATQ as MATERIAL,\n           RPT_AS_GET_PLT_DIMENSIONS (P.OID, 0) * 1000 as LENGTH,\n           RPT_AS_GET_PLT_DIMENSIONS (P.OID, 1) * 1000 as WIDTH,\n           PA.THICKNESS,\n           PE.WEIGHT as WEIGHT_UNIT,\n           PE.WEIGHT as TOTAL_WEIGHT,\n           SUBSTR (GET_NEST_ID (NP.NESTING_OID, NP.NESTING_BLOCK), 1, 15)  as NEST_ID,\n           NP.NUM_PART_NEST,\n           NP.NEST_LENGTH,\n           NP.NEST_WIDTH,\n           NP.NUM_EQ_NEST,\n            0 as WH,\n            PA.THICKNESS as WT,\n            0 as FH,\n            0 as FT,\n           (select STORAGE_CODE from STD_PLATE where MATERIAL_OID=NP.MAT_CODE and THICKNESS=PA.THICKNESS fetch first 1 row only    ) as STOCK\n  \n      FROM PRD_PART               P,\n           AS_STD_PART_PLATE      PA,\n           PRD_EXPL_PART          PE , PRD_NEST_PART PNP , BLOCK B,\n        (\n              select \n                     N.PART_OID,\n                     N.NESTING_OID,\n                     N.SYMM_CODE,\n                     NG.ID_SEQ_BLOCK as NESTING_BLOCK,\n                     COUNT (*) * GET_NUM_EQ_NEST (NESTING_OID) as NUM_PART_NEST,\n                     GET_NEST_HEIGHT (NESTING_OID) as NEST_LENGTH,\n                     GET_NEST_WIDTH (NESTING_OID) as NEST_WIDTH,\n                     GET_NUM_EQ_NEST (NESTING_OID) as NUM_EQ_NEST,\n                      NG.MAT_CODE\n                        from\n                        PRD_NEST_PART N, PRD_NEST_GEN NG\n                        where \n                         NG.OID = N.NESTING_OID\n                         GROUP BY PART_OID, NESTING_OID, SYMM_CODE,  NG.ID_SEQ_BLOCK, NG.MAT_CODE\n        )   NP \n     WHERE   NP.part_oid=P.OID AND   (NP.SYMM_CODE=PE.SYMMETRY or NP.SYMM_CODE=2) AND  PA.OID = P.OID\n           AND PNP.PART_OID=P.OID AND (PNP.SYMM_CODE=PE.SYMMETRY  or PNP.SYMM_CODE=2)\n           AND PE.PRD_PART_OID = P.OID\n           AND P.PART_TYPE = 12 AND P.BLOCK_OID=B.OID\n          and B.DESCRIPTION like '%${drNum}%' \nUNION ALL\nselect P.OID as PART_OID,   PE.OID as PEOID,  P.CODE  as PART_CODE,\n     DECODE (PE.SYMMETRY,  0,'P', 1,'S', 2,'C', 3,'') as SYMMETRY,\n           P.PART_TYPE,\n            B.CODE as BLOCK_CODE,\n           1 as NUM_EQ_PART,\n           GET_PART_DESC (P.OID, 1) as PART_DESC,\n           DECODE (STD.SECTION,\n                   -1, '',\n                   0, 'FS',\n                   1, 'AS',\n                   2, 'IS',\n                   3, 'TS',\n                   4, 'US',\n                   5, 'BS',\n                   6, 'ST',\n                   7, 'AT',\n                   8, 'OS',\n                   9, 'PS',\n                   10, 'RS',\n                   11, 'MC',\n                   12, 'DB',\n                   13, 'SR',\n                   14, 'HR',\n                   15, 'LI',\n                   16, 'ZL',\n                   17, 'TL',\n                   '') as ELEM_TYPE,\n           SUBSTR (GET_MATERIAL_CODE (STD.MATERIAL_OID, 1), 1, 12) as MATERIAL,\n           PRF.LENGTH as LENGTH,\n           STD.WEB_HEIGHT as WIDTH,\n           STD.WEB_THICKNESS,\n           PE.WEIGHT as WEIGHT_UNIT,\n           PE.WEIGHT as TOTAL_WEIGHT,\n           SUBSTR (GET_NEST_ID (NP.NESTING_OID, NP.NESTING_BLOCK), 1, 15)  as NEST_ID,\n           NP.NUM_PART_NEST,\n           NP.NEST_LENGTH,\n           NP.NEST_WIDTH,\n           NP.NUM_EQ_NEST,\n            STD.WEB_HEIGHT as WH,\n            STD.WEB_THICKNESS as WT,\n            STD.FLANGE_HEIGHT as FH,\n            STD.FLANGE_THICKNESS as FT,\n             STD.STOCK_CODE0 as STOCK \n      FROM PRD_PART               P,\n           AS_STD_PART_PROF       PRF,\n           STD_PROFILE            STD,\n           PRD_EXPL_PART          PE, PRD_NEST_PART PNP, BLOCK B,\n        (\n              select \n                     N.PART_OID,\n                     N.NESTING_OID,\n                     N.SYMM_CODE,\n                     NG.ID_SEQ_BLOCK as NESTING_BLOCK,\n                     COUNT (*) * GET_NUM_EQ_NEST (NESTING_OID) as NUM_PART_NEST,\n                     GET_NEST_HEIGHT (NESTING_OID) as NEST_LENGTH,\n                     GET_NEST_WIDTH (NESTING_OID) as NEST_WIDTH,\n                     GET_NUM_EQ_NEST (NESTING_OID) as NUM_EQ_NEST\n                        from\n                        PRD_NEST_PART N, PRD_NEST_GEN NG\n                        where \n                         NG.OID = N.NESTING_OID\n                         GROUP BY PART_OID, NESTING_OID, SYMM_CODE,  NG.ID_SEQ_BLOCK\n        )   NP \n     WHERE  NP.part_oid=P.OID AND  (NP.SYMM_CODE=PE.SYMMETRY or NP.SYMM_CODE=2) AND   PRF.OID = P.OID\n           AND PE.PRD_PART_OID = P.OID\n           AND STD.KSE = PRF.KSE\n           AND PNP.PART_OID=P.OID AND (PNP.SYMM_CODE=PE.SYMMETRY or PNP.SYMM_CODE=2)\n           AND P.PART_TYPE = 7 AND P.BLOCK_OID=B.OID\n          and B.DESCRIPTION like '%${drNum}%' \nUNION ALL  \n select P.OID as PART_OID,   PE.OID as PEOID,  P.CODE  as PART_CODE,\n     DECODE (PE.SYMMETRY,  0,'P', 1,'S', 2,'C', 3,'') as SYMMETRY,\n           P.PART_TYPE,\n            B.CODE as BLOCK_CODE,\n           RPT_COPY_COUNT (P.OID) as NUM_EQ_PART,\n           GET_PART_DESC (P.OID, 1) as PART_DESC,\n           'PL' as ELEM_TYPE,\n           SUBSTR (GET_MATERIAL_CODE (PA.MATERIAL_OID, 1), 1, 12) as MATERIAL,\n           RPT_GET_SD_PLATE_DIM (P.OID, 0) as LENGTH,\n           RPT_GET_SD_PLATE_DIM (P.OID, 1) as WIDTH,\n           PA.THICKNESS,\n           RPT_GET_PART_WEIGHT (P.OID) as WEIGHT_UNIT,\n           RPT_GET_PART_WEIGHT (P.OID) * RPT_COPY_COUNT (P.OID) as TOTAL_WEIGHT,\n           NULL  as NEST_ID,\n           0,\n           0,\n           0,\n           0,\n            0 as WH,\n            PA.THICKNESS as WT,\n            0 as FH,\n            0 as FT,\n           (select STORAGE_CODE from STD_PLATE where MATERIAL_OID=PA.MATERIAL_OID and THICKNESS=PA.THICKNESS   fetch first 1 row only  ) as STOCK\n      FROM V_RPT_PART_NO_NESTING_SD P, V_RPT_SHDK_PLATE_ATT PA,PRD_EXPL_PART PE, BLOCK B\n     WHERE PA.PRD_PART_OID = P.OID AND PE.PRD_PART_OID=  P.OID AND P.BLOCK_OID=B.OID\n          and B.DESCRIPTION like '%${drNum}%' \n                \nUNION ALL \n   select P.OID as PART_OID,   PE.OID as PEOID,  P.CODE  as PART_CODE,\n     DECODE (PE.SYMMETRY,  0,'P', 1,'S', 2,'C', 3,'') as SYMMETRY,\n           P.PART_TYPE,\n          B.CODE as BLOCK_CODE,\n           RPT_COPY_COUNT (P.OID) as NUM_EQ_PART,\n           GET_PART_DESC (P.OID, 1) as PART_DESC,\n           SUBSTR (GET_SECT_TP (prf.std_profile_oid), 1, 2) as ELEM_TYPE,\n           SUBSTR (GET_MATERIAL_CODE (PRF.STD_PROFILE_OID, 2), 1, 12) as MATERIAL,\n           PRF.LENGTH * 1000 as LENGTH,\n           STD.WEB_HEIGHT as WIDTH,\n           STD.WEB_THICKNESS as THICKNESS,\n           RPT_GET_PART_WEIGHT (P.OID) as WEIGHT_UNIT,\n           RPT_GET_PART_WEIGHT (P.OID) * RPT_COPY_COUNT (P.OID) as TOTAL_WEIGHT,\n           NULL  as NEST_ID,\n           0,\n           0,\n           0,\n           0,\n            STD.WEB_HEIGHT as WH,\n            STD.WEB_THICKNESS as WT,\n            STD.FLANGE_HEIGHT as FH,\n            STD.FLANGE_THICKNESS as FT,\n             STD.STOCK_CODE0 as STOCK\n      FROM PRD_EXPL_PART PE, V_PRD_PART_NO_NESTING P, PRD_PROFILE PRF, BLOCK B,STD_PROFILE STD\n     WHERE     PRF.PRD_PART_OID = P.OID AND PE.PRD_PART_OID=  P.OID\n           AND P.PART_TYPE IN (0,\n                               1,\n                               2,\n                               3,\n                               6)\n                               AND PRF.STD_PROFILE_OID=STD.OID\n                               AND P.BLOCK_OID=B.OID\n          and B.DESCRIPTION like '%${drNum}%' \n \nUNION ALL \n    select P.OID as PART_OID,   PE.OID as PEOID,  P.CODE  as PART_CODE,\n     DECODE (PE.SYMMETRY,  0,'P', 1,'S', 2,'C', 3,'') as SYMMETRY,\n           P.PART_TYPE,\n            B.CODE as BLOCK_CODE,\n           RPT_COPY_COUNT (P.OID) as NUM_EQ_PART,\n           SUBSTR (GET_PART_DESC (P.OID, 1), 1, 200) as PART_DESC,\n           'PL' as ELEM_TYPE,\n           SUBSTR (GET_MATERIAL_CODE (PA.MATERIAL_OID, 1), 1, 12) as MATERIAL,\n           RPT_INP_GET_PLT_DIMENSIONS (INP_PART_OID, 0) * 1000 as LENGTH,\n           RPT_INP_GET_PLT_DIMENSIONS (INP_PART_OID, 1) * 1000 as WIDTH,\n           PA.THICKNESS * 1000,\n           RPT_GET_PART_WEIGHT (P.OID) as WEIGHT_UNIT,\n           RPT_GET_PART_WEIGHT (P.OID) * RPT_COPY_COUNT (P.OID) as TOTAL_WEIGHT,\n           NULL  as NEST_ID,\n           0,\n           0,\n           0,\n           0,\n            0 as WH,\n            PA.THICKNESS as WT,\n            0 as FH,\n            0 as FT,\n            (select STORAGE_CODE from STD_PLATE where MATERIAL_OID=PA.MATERIAL_OID and THICKNESS=PA.THICKNESS* 1000   fetch first 1 row only  ) as STOCK\n      FROM PRD_EXPL_PART PE,V_PRD_PART_NO_NESTING P, INP_PLATE_ATT_DB PA, BLOCK B\n     WHERE     PA.INP_PART_OID = P.OID AND PE.PRD_PART_OID=  P.OID\n           AND P.PART_TYPE IN (14,\n                               15,\n                               18,\n                               20,\n                               22,\n                               23,\n                               25,\n                               26)AND P.BLOCK_OID=B.OID\n          and B.DESCRIPTION like '%${drNum}%' \n \nUNION ALL  \nselect P.OID as PART_OID,   PE.OID as PEOID,  P.CODE  as PART_CODE,\n     DECODE (PE.SYMMETRY,  0,'P', 1,'S', 2,'C', 3,'') as SYMMETRY,\n           P.PART_TYPE,\n           B.CODE as BLOCK_CODE,\n           RPT_COPY_COUNT (P.OID) as NUM_EQ_PART,\n           SUBSTR (GET_PART_DESC (P.OID, 1), 1, 200) as PART_DESC,\n           SUBSTR (GET_SECT_TP (prf.std_profile_oid), 1, 2) as ELEM_TYPE,\n           SUBSTR (GET_MATERIAL_CODE (PRF.STD_PROFILE_OID, 2), 1, 12) as MATERIAL,\n           RPT_GET_PART_LENGTH (P.OID) * 1000 as LENGTH,\n           STD.WEB_HEIGHT as WIDTH,\n           STD.WEB_THICKNESS,\n           RPT_GET_PART_WEIGHT (P.OID) as WEIGHT_UNIT,\n           RPT_GET_PART_WEIGHT (P.OID) * RPT_COPY_COUNT (P.OID) as TOTAL_WEIGHT,\n           NULL  as NEST_ID,\n           0,\n           0,\n           0,\n           0,\n            STD.WEB_HEIGHT as WH,\n            STD.WEB_THICKNESS as WT,\n            STD.FLANGE_HEIGHT as FH,\n            STD.FLANGE_THICKNESS as FT,\n            STD.STOCK_CODE0 as STOCK\n      FROM PRD_EXPL_PART PE,V_PRD_PART_NO_NESTING P, INP_PROFILE_ATT_DB PRF, BLOCK B,STD_PROFILE STD\n     WHERE     PRF.INP_PART_OID = P.OID AND PE.PRD_PART_OID=  P.OID AND PRF.STD_PROFILE_OID=STD.OID\n           AND P.PART_TYPE IN (16,\n                               19,\n                               21,\n                               24)AND P.BLOCK_OID=B.OID\n          and B.DESCRIPTION like '%${drNum}%' \nUNION ALL \n select P.OID as PART_OID,   PE.OID as PEOID,  P.CODE  as PART_CODE,\n     DECODE (PE.SYMMETRY,  0,'P', 1,'S', 2,'C', 3,'') as SYMMETRY,\n           P.PART_TYPE,\n           B.CODE as BLOCK_CODE,\n           RPT_COPY_COUNT (P.OID) as NUM_EQ_PART,\n           SUBSTR (GET_PART_DESC (P.OID, 1), 1, 200) as PART_DESC,\n           SUBSTR (GET_SECT_TP (PRF.STD_SECTION_OID), 1, 2) as ELEM_TYPE,\n           SUBSTR (GET_MATERIAL_CODE (PRF.STD_SECTION_OID, 2), 1, 12) as MATERIAL,\n           RPT_GET_PART_LENGTH (P.OID) * 1000 as LENGTH,\n           GET_PRF_W_HEIGHT (PRF.STD_SECTION_OID) as WIDTH,\n           GET_PRF_W_THICK (PRF.STD_SECTION_OID),\n           RPT_GET_PART_WEIGHT (P.OID) as WEIGHT_UNIT,\n           RPT_GET_PART_WEIGHT (P.OID) * RPT_COPY_COUNT (P.OID) as TOTAL_WEIGHT,\n           NULL  as NEST_ID,\n           0,\n           0,\n           0,\n           0,\n            0 as WH,\n            GET_PRF_W_THICK (PRF.STD_SECTION_OID) as WT,\n            0 as FH,\n            0 as FT,\n    \n            (select STORAGE_CODE from STD_PLATE where MATERIAL_OID=(select oid from MATERIAL where code = GET_MATERIAL_CODE (PRF.STD_SECTION_OID, 0)) and THICKNESS= GET_PRF_W_THICK (PRF.STD_SECTION_OID)  fetch first 1 row only  ) as STOCK\n  \n            \n      FROM PRD_EXPL_PART PE,V_PRD_PART_NO_NESTING P, INP_LC_ATT_DB PRF, BLOCK B\n     WHERE PRF.INP_PART_OID = P.OID AND P.PART_TYPE = 17 AND PE.PRD_PART_OID=  P.OID AND P.BLOCK_OID=B.OID\n          and B.DESCRIPTION like '%${drNum}%' \n          \nUNION ALL  \nselect P.OID as PART_OID,   PE.OID as PEOID,  P.CODE,\n     DECODE (PE.SYMMETRY,  0,'P', 1,'S', 2,'C', 3,'') as SYMMETRY,\n           P.PART_TYPE,\n            B.CODE as BLOCK_CODE,\n           1 as NUM_EQ_PART,\n           GET_PART_DESC (P.OID, 1) as PART_DESC,\n           'PL' as ELEM_TYPE,\n           PA.MATQ as MATERIAL,\n           RPT_AS_GET_PLT_DIMENSIONS (P.OID, 0) * 1000 as LENGTH,\n           RPT_AS_GET_PLT_DIMENSIONS (P.OID, 1) * 1000 as WIDTH,\n           PA.THICKNESS,\n           PE.WEIGHT as WEIGHT_UNIT,\n           PE.WEIGHT as TOTAL_WEIGHT,\n           NULL  as NEST_ID,\n           0,\n           0,\n           0,\n           0,\n            0 as WH,\n            PA.THICKNESS as WT,\n            0 as FH,\n            0 as FT,\n                    (select STORAGE_CODE from STD_PLATE where MATERIAL_OID=(select oid from MATERIAL where code = PA.MATQ and THICKNESS= PA.THICKNESS)  fetch first 1 row only  ) as STOCK\n  \n      FROM V_PRD_PART_NO_NESTING P, AS_STD_PART_PLATE PA, PRD_EXPL_PART PE, BLOCK B\n     WHERE PA.OID = P.OID AND PE.PRD_PART_OID = P.OID AND P.PART_TYPE = 12  AND P.BLOCK_OID=B.OID\n          and B.DESCRIPTION like '%${drNum}%' \nUNION ALL \nselect P.OID as PART_OID,   PE.OID as PEOID, P.CODE as PART_CODE,\n     DECODE (PE.SYMMETRY,  0,'P', 1,'S', 2,'C', 3,'') as SYMMETRY,\n           P.PART_TYPE,\n           B.CODE as BLOCK_CODE,\n           1 as NUM_EQ_PART,\n           GET_PART_DESC (P.OID, 1) as PART_DESC,\n           DECODE (STD.SECTION,\n                   -1, '',\n                   0, 'FS',\n                   1, 'AS',\n                   2, 'IS',\n                   3, 'TS',\n                   4, 'US',\n                   5, 'BS',\n                   6, 'ST',\n                   7, 'AT',\n                   8, 'OS',\n                   9, 'PS',\n                   10, 'RS',\n                   11, 'MC',\n                   12, 'DB',\n                   13, 'SR',\n                   14, 'HR',\n                   15, 'LI',\n                   16, 'ZL',\n                   17, 'TL',\n                   '') as ELEM_TYPE,\n           SUBSTR (GET_MATERIAL_CODE (STD.MATERIAL_OID, 1), 1, 12) as MATERIAL,\n           PRF.LENGTH as LENGTH,\n           STD.WEB_HEIGHT as WIDTH,\n           STD.WEB_THICKNESS,\n           PE.WEIGHT as WEIGHT_UNIT,\n           PE.WEIGHT as TOTAL_WEIGHT,\n           NULL  as NEST_ID,\n           0,\n           0,\n           0,\n           0,\n            STD.WEB_HEIGHT as WH,\n            STD.WEB_THICKNESS as WT,\n            STD.FLANGE_HEIGHT as FH,\n            STD.FLANGE_THICKNESS as FT,\n            STD.STOCK_CODE0 as STOCK\n      FROM V_PRD_PART_NO_NESTING  P,\n           AS_STD_PART_PROF       PRF,\n           STD_PROFILE            STD,\n           PRD_EXPL_PART          PE, BLOCK B\n     WHERE     PRF.OID = P.OID\n           AND PE.PRD_PART_OID = P.OID\n           AND STD.KSE = PRF.KSE\n           AND P.PART_TYPE = 7\n             AND P.BLOCK_OID=B.OID\n          and B.DESCRIPTION like '%${drNum}%' \n) P\norder by P.PART_CODE,P.SYMMETRY"
  //private def partsByDrawingNum(drNum: String): String =s"select P.PART_OID as PART_OID,\nP.NUM_PART_NEST as QTY,\nP.PART_CODE,\nP.SYMMETRY,\nP.PART_TYPE,\nP.BLOCK_CODE,\nP.BLOCK_CODE as DESCRIPTION,\nP.NUM_EQ_PART,\nP.PART_DESC,\nP.ELEM_TYPE,\nP.MATERIAL,\nP.LENGTH,\nP.WIDTH,\nP.THICKNESS,\nP.WEIGHT_UNIT,\nP.TOTAL_WEIGHT,\nP.NEST_ID,\nP.NEST_LENGTH,\nP.NEST_WIDTH,\nP.NUM_EQ_NEST,\nP.WH,\nP.WT,\nP.FH,\nP.FT , \nRPT_GET_STR_GROUP(P.PART_OID) as STRGROUP ,\nP.STOCK as STOCK_CODE\n\nfrom\n(\nselect\nP.OID as PART_OID,  \nPE.OID as PEOID,\nP.CODE  as PART_CODE,     \nDECODE (PE.SYMMETRY,  0,'P', 1,'S', 2,'C', 3,'') as SYMMETRY,          \nP.PART_TYPE,\nB.CODE as BLOCK_CODE,\nRPT_COPY_COUNT (P.OID) as NUM_EQ_PART,\nSUBSTR (GET_PART_DESC (P.OID, 1), 1, 200) as PART_DESC ,           \nSUBSTR (GET_SECT_TP (prf.std_profile_oid), 1, 2) as ELEM_TYPE,\nSUBSTR (GET_MATERIAL_CODE (PRF.STD_PROFILE_OID, 2), 1, 12) as MATERIAL,\nRPT_GET_PART_LENGTH (P.OID) * 1000 as LENGTH,          \nSTD.WEB_HEIGHT as WIDTH,\nSTD.WEB_THICKNESS as THICKNESS,\nRPT_GET_PART_WEIGHT (P.OID) as WEIGHT_UNIT,            \nRPT_GET_PART_WEIGHT (P.OID) * RPT_COPY_COUNT (P.OID) as TOTAL_WEIGHT,\nSUBSTR (GET_NEST_ID (GET_PRD_EXPL_NESTING_OID(PE.OID), P.BLOCK_OID), 1, 15)  as NEST_ID,            \nGET_NUM_EQ_NEST (GET_PRD_EXPL_NESTING_OID(PE.OID)) as NUM_PART_NEST,\nGET_NEST_HEIGHT (GET_PRD_EXPL_NESTING_OID(PE.OID)) as NEST_LENGTH,\nGET_NEST_WIDTH (GET_PRD_EXPL_NESTING_OID(PE.OID)) as NEST_WIDTH,\nGET_NUM_EQ_NEST (GET_PRD_EXPL_NESTING_OID(PE.OID)) as NUM_EQ_NEST,\nSTD.WEB_HEIGHT as WH,\nSTD.WEB_THICKNESS as WT,\nSTD.FLANGE_HEIGHT as FH,\nSTD.FLANGE_THICKNESS as FT,\nSTD.STOCK_CODE0 as STOCK   \nFROM \nPRD_EXPL_PART PE, \nPRD_PART P,\nINP_PROFILE_ATT_DB PRF, \nBLOCK B,\nSTD_PROFILE STD\nWHERE \n(PRF.INP_PART_OID = P.OID AND PRF.STD_PROFILE_OID=STD.OID)\nAND PE.PRD_PART_OID= P.OID          \nAND P.PART_TYPE IN (16,19,21,24)  \nAND P.BLOCK_OID=B.OID\nAND P.BLOCK_OID in (SELECT OID FROM BLOCk WHERE DESCRIPTION like '%${drNum}')\nunion all\n  select\n P.OID as PART_OID,       \n PE.OID as PEOID,\n P.CODE as PART_CODE,\nDECODE (PE.SYMMETRY,  0,'P', 1,'S', 2,'C', 3,'') as SYMMETRY,\n           P.PART_TYPE,\n           B.CODE as BLOCK_CODE,\n           RPT_COPY_COUNT (P.OID) as NUM_EQ_PART,\n           GET_PART_DESC (P.OID, 1) as PART_DESC,\n           'PL' as ELEM_TYPE,\n           SUBSTR (GET_MATERIAL_CODE (PA.MATERIAL_OID, 1), 1, 12) as MATERIAL,\n           RPT_GET_SD_PLATE_DIM (P.OID, 0) as LENGTH,\n           RPT_GET_SD_PLATE_DIM (P.OID, 1) as WIDTH,\n           PA.THICKNESS,\n           RPT_GET_PART_WEIGHT (P.OID) as WEIGHT_UNIT,\n           RPT_GET_PART_WEIGHT (P.OID) * RPT_COPY_COUNT (P.OID) as TOTAL_WEIGHT,\n           SUBSTR (GET_NEST_ID (GET_PRD_EXPL_NESTING_OID(PE.OID), P.BLOCK_OID), 1, 15)  as NEST_ID,            \n            GET_NUM_EQ_NEST (GET_PRD_EXPL_NESTING_OID(PE.OID)) as NUM_PART_NEST,\n            GET_NEST_HEIGHT (GET_PRD_EXPL_NESTING_OID(PE.OID)) as NEST_LENGTH,\n            GET_NEST_WIDTH (GET_PRD_EXPL_NESTING_OID(PE.OID)) as NEST_WIDTH,\n            GET_NUM_EQ_NEST (GET_PRD_EXPL_NESTING_OID(PE.OID)) as NUM_EQ_NEST,\n            0 as WH,\n            PA.THICKNESS as WT,\n            0 as FH,\n            0 as FT,\n            (select STORAGE_CODE from STD_PLATE where MATERIAL_OID=PA.MATERIAL_OID and THICKNESS=PA.THICKNESS   fetch first 1 row only  ) as STOCK\n      FROM PRD_EXPL_PART PE,  PRD_PART P, V_RPT_SHDK_PLATE_ATT PA, BLOCK B\n     WHERE       \nPA.PRD_PART_OID = P.OID AND PE.PRD_PART_OID =PA.PRD_PART_OID\nAND P.PART_TYPE IN (9, 10)\nAND P.BLOCK_OID=B.OID\nand B.DESCRIPTION like '%${drNum}%'   \nunion all\n              select  P.OID as PART_OID,   PE.OID as PEOID, P.CODE  as PART_CODE,\n     DECODE (PE.SYMMETRY,  0,'P', 1,'S', 2,'C', 3,'') as SYMMETRY,\n           P.PART_TYPE,\n           B.CODE as BLOCK_CODE,\n           RPT_COPY_COUNT (P.OID) as NUM_EQ_PART,\n           GET_PART_DESC (P.OID, 1) as PART_DESC,\n           SUBSTR (GET_SECT_TP (prf.std_profile_oid), 1, 2) as ELEM_TYPE,\n           SUBSTR (GET_MATERIAL_CODE (PRF.STD_PROFILE_OID, 2), 1, 12) as MATERIAL,\n           PRF.LENGTH * 1000 as LENGTH,\n           STD.WEB_HEIGHT as WIDTH,\n           STD.WEB_THICKNESS  as THICKNESS,\n           RPT_GET_PART_WEIGHT (P.OID) as WEIGHT_UNIT,\n           RPT_GET_PART_WEIGHT (P.OID) * RPT_COPY_COUNT (P.OID)  as TOTAL_WEIGHT,\n           SUBSTR (GET_NEST_ID (GET_PRD_EXPL_NESTING_OID(PE.OID), P.BLOCK_OID), 1, 15)  as NEST_ID,            \n            GET_NUM_EQ_NEST (GET_PRD_EXPL_NESTING_OID(PE.OID)) as NUM_PART_NEST,\n            GET_NEST_HEIGHT (GET_PRD_EXPL_NESTING_OID(PE.OID)) as NEST_LENGTH,\n            GET_NEST_WIDTH (GET_PRD_EXPL_NESTING_OID(PE.OID)) as NEST_WIDTH,\n            GET_NUM_EQ_NEST (GET_PRD_EXPL_NESTING_OID(PE.OID)) as NUM_EQ_NEST,\n            STD.WEB_HEIGHT as WH,\n            STD.WEB_THICKNESS as WT,\n            STD.FLANGE_HEIGHT as FH,\n            STD.FLANGE_THICKNESS as FT,\n            STD.STOCK_CODE0 as STOCK \n      FROM PRD_EXPL_PART PE, PRD_PART P, PRD_PROFILE PRF, BLOCK B,STD_PROFILE STD\n      \n\n     WHERE     \n    \n     (PRF.PRD_PART_OID = P.OID AND PRF.STD_PROFILE_OID=STD.OID)    \n     AND P.OID=PE.PRD_PART_OID\n     AND P.PART_TYPE IN (0,1,2,3,6)\n     AND P.BLOCK_OID=B.OID               \n     AND B.DESCRIPTION like '%${drNum}%' \nunion all\nselect P.OID as PART_OID,   PE.OID as PEOID, P.CODE  as PART_CODE,\n     DECODE (PE.SYMMETRY,  0,'P', 1,'S', 2,'C', 3,'') as SYMMETRY,\n           P.PART_TYPE,\n            B.CODE as BLOCK_CODE,\n           RPT_COPY_COUNT (P.OID) as NUM_EQ_PART,\n           SUBSTR (GET_PART_DESC (P.OID, 1), 1, 200) as PART_DESC,\n           'PL' as ELEM_TYPE,\n           SUBSTR (GET_MATERIAL_CODE (PA.MATERIAL_OID, 1), 1, 12) as MATERIAL,\n           RPT_INP_GET_PLT_DIMENSIONS (P.OID, 0) * 1000 as LENGTH,\n           RPT_INP_GET_PLT_DIMENSIONS (P.OID, 1) * 1000 as WIDTH,\n           PA.THICKNESS * 1000   as THICKNESS,\n           RPT_GET_PART_WEIGHT (P.OID) as WEIGHT_UNIT,\n           RPT_GET_PART_WEIGHT (P.OID) * RPT_COPY_COUNT (P.OID) as TOTAL_WEIGHT,\n           SUBSTR (GET_NEST_ID (GET_PRD_EXPL_NESTING_OID(PE.OID), P.BLOCK_OID), 1, 15)  as NEST_ID,            \nGET_NUM_EQ_NEST (GET_PRD_EXPL_NESTING_OID(PE.OID)) as NUM_PART_NEST,\nGET_NEST_HEIGHT (GET_PRD_EXPL_NESTING_OID(PE.OID)) as NEST_LENGTH,\nGET_NEST_WIDTH (GET_PRD_EXPL_NESTING_OID(PE.OID)) as NEST_WIDTH,\nGET_NUM_EQ_NEST (GET_PRD_EXPL_NESTING_OID(PE.OID)) as NUM_EQ_NEST,\n           0 as WH,\n            PA.THICKNESS * 1000 as WT,\n            0 as FH,\n            0 as FT,\n            (select STORAGE_CODE from STD_PLATE where MATERIAL_OID=PA.MATERIAL_OID and THICKNESS=PA.THICKNESS*1000 fetch first 1 row only    ) as STOCK\n      FROM PRD_EXPL_PART PE, PRD_PART P, INP_PLATE_ATT_DB PA,BLOCK B\n      WHERE  \n        PA.INP_PART_OID = P.OID AND PE.PRD_PART_OID=P.OID\n           AND P.PART_TYPE IN (14,\n                               15,\n                               18,\n                               20,\n                               22,\n                               23,\n                               25,\n                               26)\n          AND P.BLOCK_OID=B.OID\n          and B.DESCRIPTION like '%${drNum}%' \nunion all\nselect\nPART.OID as PART_OID,  \nPART.PEOID as PEOID, \nPART.CODE  as PART_CODE,\nDECODE (PART.SYMMETRY,  0,'P', 1,'S', 2,'C', 3,'') as SYMMETRY,            \nPART.PART_TYPE,\nPART.BLOCK_CODE as BLOCK_CODE,\nRPT_COPY_COUNT (PART.OID) as NUM_EQ_PART,\nSUBSTR (GET_PART_DESC (PART.OID, 1), 1, 200) as PART_DESC,            \nSUBSTR (GET_SECT_TP (PART.STD_SECTION_OID), 1, 2) as ELEM_TYPE,\nSUBSTR (GET_MATERIAL_CODE (PART.STD_SECTION_OID, 2), 1, 12) as MATERIAL,\nRPT_GET_PART_LENGTH (PART.OID) * 1000 as LENGTH,\n  GET_PRF_W_HEIGHT (PART.STD_SECTION_OID) as WIDTH,\n           GET_PRF_W_THICK (PART.STD_SECTION_OID)   as THICKNESS,\n           RPT_GET_PART_WEIGHT (PART.OID) as WEIGHT_UNIT,\n           RPT_GET_PART_WEIGHT (PART.OID) * RPT_COPY_COUNT (PART.OID) as TOTAL_WEIGHT,\n           SUBSTR (GET_NEST_ID (GET_PRD_EXPL_NESTING_OID(PART.PEOID), PART.BLOKOID), 1, 15)  as NEST_ID,            \n            GET_NUM_EQ_NEST (GET_PRD_EXPL_NESTING_OID(PART.PEOID)) as NUM_PART_NEST,\n            GET_NEST_HEIGHT (GET_PRD_EXPL_NESTING_OID(PART.PEOID)) as NEST_LENGTH,\n            GET_NEST_WIDTH (GET_PRD_EXPL_NESTING_OID(PART.PEOID)) as NEST_WIDTH,\n            GET_NUM_EQ_NEST (GET_PRD_EXPL_NESTING_OID(PART.PEOID)) as NUM_EQ_NEST,\n            0 as WH,\n            GET_PRF_W_THICK (PART.STD_SECTION_OID) as WT,\n            0 as FH,\n            0 as FT,\n            (select STORAGE_CODE from STD_PLATE where MATERIAL_OID= PART.MAT_CODE and THICKNESS=GET_PRF_W_THICK (PART.STD_SECTION_OID) fetch first 1 row only    ) as STOCK\n                    from\n                        (\n                             select \n                                P.OID,\n                                P.CODE,\n                                P.PART_TYPE,\n                                PE.OID as PEOID,\n                                PE.SYMMETRY,\n                                PRF.STD_SECTION_OID,\n                                P.BLOCK_OID as BLOKOID,\n                                (select CODE from BLOCK where OID=P.BLOCK_OID) as BLOCK_CODE,\n                                (select MAT_CODE from PRD_NEST_GEN where OID = GET_PRD_EXPL_NESTING_OID(PE.OID)) as MAT_CODE,\n                                GET_PRD_EXPL_NESTING_OID(PE.OID) as NOID\n                                from PRD_PART P, PRD_EXPL_PART PE, INP_LC_ATT_DB PRF\n                                where\n                                P.PART_TYPE in (17)  \n                                AND P.BLOCK_OID=(select OID from BLOCK where DESCRIPTION like '%${drNum}%')\n                                AND PE.PRD_PART_OID=  P.OID\n                                AND PRF.INP_PART_OID = P.OID\n\n                        \n                        ) PART\n                        \nunion all\nselect P.OID as PART_OID,   PE.OID as PEOID, P.CODE  as PART_CODE,\n     DECODE (PE.SYMMETRY,  0,'P', 1,'S', 2,'C', 3,'') as SYMMETRY,\n           P.PART_TYPE,\n            B.CODE as BLOCK_CODE,\n           1 as NUM_EQ_PART,\n           GET_PART_DESC (P.OID, 1) as PART_DESC,\n           'PL' as ELEM_TYPE,\n           PA.MATQ as MATERIAL,\n           RPT_AS_GET_PLT_DIMENSIONS (P.OID, 0) * 1000 as LENGTH,\n           RPT_AS_GET_PLT_DIMENSIONS (P.OID, 1) * 1000 as WIDTH,\n           PA.THICKNESS,\n           PE.WEIGHT as WEIGHT_UNIT,\n           PE.WEIGHT as TOTAL_WEIGHT,\nSUBSTR (GET_NEST_ID (GET_PRD_EXPL_NESTING_OID(PE.OID), P.BLOCK_OID), 1, 15)  as NEST_ID,            \nGET_NUM_EQ_NEST (GET_PRD_EXPL_NESTING_OID(PE.OID)) as NUM_PART_NEST,\nGET_NEST_HEIGHT (GET_PRD_EXPL_NESTING_OID(PE.OID)) as NEST_LENGTH,\nGET_NEST_WIDTH (GET_PRD_EXPL_NESTING_OID(PE.OID)) as NEST_WIDTH,\nGET_NUM_EQ_NEST (GET_PRD_EXPL_NESTING_OID(PE.OID)) as NUM_EQ_NEST,\n            0 as WH,\n            PA.THICKNESS as WT,\n            0 as FH,\n            0 as FT,\n           (select STORAGE_CODE from STD_PLATE where MATERIAL_OID=M.OID and THICKNESS=PA.THICKNESS fetch first 1 row only    ) as STOCK\n  \n      FROM PRD_PART               P,\n           AS_STD_PART_PLATE      PA,\n           PRD_EXPL_PART          PE ,  BLOCK B, MATERIAL M\n\n     WHERE   \n     PA.OID = P.OID\n     AND PE.PRD_PART_OID = P.OID\n     AND P.PART_TYPE = 12 AND P.BLOCK_OID=B.OID\n     AND PA.MATQ=M.CODE\n     and B.DESCRIPTION like '%${drNum}%' \nunion all\nselect P.OID as PART_OID,   PE.OID as PEOID,  P.CODE  as PART_CODE,\n     DECODE (PE.SYMMETRY,  0,'P', 1,'S', 2,'C', 3,'') as SYMMETRY,\n           P.PART_TYPE,\n            B.CODE as BLOCK_CODE,\n           1 as NUM_EQ_PART,\n           GET_PART_DESC (P.OID, 1) as PART_DESC,\n           DECODE (STD.SECTION,\n                   -1, '',\n                   0, 'FS',\n                   1, 'AS',\n                   2, 'IS',\n                   3, 'TS',\n                   4, 'US',\n                   5, 'BS',\n                   6, 'ST',\n                   7, 'AT',\n                   8, 'OS',\n                   9, 'PS',\n                   10, 'RS',\n                   11, 'MC',\n                   12, 'DB',\n                   13, 'SR',\n                   14, 'HR',\n                   15, 'LI',\n                   16, 'ZL',\n                   17, 'TL',\n                   '') as ELEM_TYPE,\n           SUBSTR (GET_MATERIAL_CODE (STD.MATERIAL_OID, 1), 1, 12) as MATERIAL,\n           PRF.LENGTH as LENGTH,\n           STD.WEB_HEIGHT as WIDTH,\n           STD.WEB_THICKNESS,\n           PE.WEIGHT as WEIGHT_UNIT,\n           PE.WEIGHT as TOTAL_WEIGHT,\nSUBSTR (GET_NEST_ID (GET_PRD_EXPL_NESTING_OID(PE.OID), P.BLOCK_OID), 1, 15)  as NEST_ID,            \nGET_NUM_EQ_NEST (GET_PRD_EXPL_NESTING_OID(PE.OID)) as NUM_PART_NEST,\nGET_NEST_HEIGHT (GET_PRD_EXPL_NESTING_OID(PE.OID)) as NEST_LENGTH,\nGET_NEST_WIDTH (GET_PRD_EXPL_NESTING_OID(PE.OID)) as NEST_WIDTH,\nGET_NUM_EQ_NEST (GET_PRD_EXPL_NESTING_OID(PE.OID)) as NUM_EQ_NEST,\n            STD.WEB_HEIGHT as WH,\n            STD.WEB_THICKNESS as WT,\n            STD.FLANGE_HEIGHT as FH,\n            STD.FLANGE_THICKNESS as FT,\n             STD.STOCK_CODE0 as STOCK \n      FROM PRD_PART               P,\n           AS_STD_PART_PROF       PRF,\n           STD_PROFILE            STD,\n           PRD_EXPL_PART          PE, PRD_NEST_PART PNP, BLOCK B\n        \n     WHERE  PRF.OID = P.OID\n           AND PE.PRD_PART_OID = P.OID\n           AND STD.KSE = PRF.KSE\n           AND P.PART_TYPE = 7 AND P.BLOCK_OID=B.OID\n           and B.DESCRIPTION like '%${drNum}%' \n) P\norder by P.PART_CODE,P.SYMMETRY"
  private def partsByDrawingNum(drNum: String): String = s"select P.PART_OID as PART_OID,\nP.NUM_PART_NEST as QTY,\nP.PART_CODE,\nP.SYMMETRY,\nP.PART_TYPE,\nP.BLOCK_CODE,\nP.BLOCK_CODE as DESCRIPTION,\nP.NUM_EQ_PART,\nP.PART_DESC,\nP.ELEM_TYPE,\nP.MATERIAL,\nP.LENGTH,\nP.WIDTH,\nP.THICKNESS,\nP.WEIGHT_UNIT,\nP.TOTAL_WEIGHT,\nP.NEST_ID,\nP.NEST_LENGTH,\nP.NEST_WIDTH,\nP.NUM_EQ_NEST,\nP.WH,\nP.WT,\nP.FH,\nP.FT , \nRPT_GET_STR_GROUP(P.PART_OID) as STRGROUP ,\nP.STOCK as STOCK_CODE\n\nfrom\n(\nselect\nP.OID as PART_OID,  \nPE.OID as PEOID,\nP.CODE  as PART_CODE,     \nDECODE (PE.SYMMETRY,  0,'P', 1,'S', 2,'C', 3,'') as SYMMETRY,          \nP.PART_TYPE,\nB.CODE as BLOCK_CODE,\nRPT_COPY_COUNT (P.OID) as NUM_EQ_PART,\nSUBSTR (GET_PART_DESC (P.OID, 1), 1, 200) as PART_DESC ,           \nSUBSTR (GET_SECT_TP (prf.std_profile_oid), 1, 2) as ELEM_TYPE,\nSUBSTR (GET_MATERIAL_CODE (PRF.STD_PROFILE_OID, 2), 1, 12) as MATERIAL,\nRPT_GET_PART_LENGTH (P.OID) * 1000 as LENGTH,          \nSTD.WEB_HEIGHT as WIDTH,\nSTD.WEB_THICKNESS as THICKNESS,\nRPT_GET_PART_WEIGHT (P.OID) as WEIGHT_UNIT,            \nRPT_GET_PART_WEIGHT (P.OID) * RPT_COPY_COUNT (P.OID) as TOTAL_WEIGHT,\nSUBSTR (GET_NEST_ID (GET_PRD_EXPL_NESTING_OID(PE.OID), P.BLOCK_OID), 1, 15)  as NEST_ID,            \nGET_NUM_EQ_NEST (GET_PRD_EXPL_NESTING_OID(PE.OID)) as NUM_PART_NEST,\nGET_NEST_HEIGHT (GET_PRD_EXPL_NESTING_OID(PE.OID)) as NEST_LENGTH,\nGET_NEST_WIDTH (GET_PRD_EXPL_NESTING_OID(PE.OID)) as NEST_WIDTH,\nGET_NUM_EQ_NEST (GET_PRD_EXPL_NESTING_OID(PE.OID)) as NUM_EQ_NEST,\nSTD.WEB_HEIGHT as WH,\nSTD.WEB_THICKNESS as WT,\nSTD.FLANGE_HEIGHT as FH,\nSTD.FLANGE_THICKNESS as FT,\nSTD.STOCK_CODE0 as STOCK   \nFROM \nPRD_EXPL_PART PE, \nPRD_PART P,\nINP_PROFILE_ATT_DB PRF, \nBLOCK B,\nSTD_PROFILE STD\nWHERE \n(PRF.INP_PART_OID = P.OID AND PRF.STD_PROFILE_OID=STD.OID)\nAND PE.PRD_PART_OID= P.OID          \nAND P.PART_TYPE IN (16,19,21,24)  \nAND P.BLOCK_OID=B.OID\nAND P.BLOCK_OID in (SELECT OID FROM BLOCk WHERE DESCRIPTION like '%${drNum}%')\nunion all\n  select\n P.OID as PART_OID,       \n PE.OID as PEOID,\n P.CODE as PART_CODE,\nDECODE (PE.SYMMETRY,  0,'P', 1,'S', 2,'C', 3,'') as SYMMETRY,\n           P.PART_TYPE,\n           B.CODE as BLOCK_CODE,\n           RPT_COPY_COUNT (P.OID) as NUM_EQ_PART,\n           GET_PART_DESC (P.OID, 1) as PART_DESC,\n           'PL' as ELEM_TYPE,\n           SUBSTR (GET_MATERIAL_CODE (PA.MATERIAL_OID, 1), 1, 12) as MATERIAL,\n           RPT_GET_SD_PLATE_DIM (P.OID, 0) as LENGTH,\n           RPT_GET_SD_PLATE_DIM (P.OID, 1) as WIDTH,\n           PA.THICKNESS,\n           RPT_GET_PART_WEIGHT (P.OID) as WEIGHT_UNIT,\n           RPT_GET_PART_WEIGHT (P.OID) * RPT_COPY_COUNT (P.OID) as TOTAL_WEIGHT,\n           SUBSTR (GET_NEST_ID (GET_PRD_EXPL_NESTING_OID(PE.OID), P.BLOCK_OID), 1, 15)  as NEST_ID,            \n            GET_NUM_EQ_NEST (GET_PRD_EXPL_NESTING_OID(PE.OID)) as NUM_PART_NEST,\n            GET_NEST_HEIGHT (GET_PRD_EXPL_NESTING_OID(PE.OID)) as NEST_LENGTH,\n            GET_NEST_WIDTH (GET_PRD_EXPL_NESTING_OID(PE.OID)) as NEST_WIDTH,\n            GET_NUM_EQ_NEST (GET_PRD_EXPL_NESTING_OID(PE.OID)) as NUM_EQ_NEST,\n            0 as WH,\n            PA.THICKNESS as WT,\n            0 as FH,\n            0 as FT,\n            (select STORAGE_CODE from STD_PLATE where MATERIAL_OID=PA.MATERIAL_OID and THICKNESS=PA.THICKNESS   fetch first 1 row only  ) as STOCK\n      FROM PRD_EXPL_PART PE,  PRD_PART P, V_RPT_SHDK_PLATE_ATT PA, BLOCK B\n     WHERE       \nPA.PRD_PART_OID = P.OID AND PE.PRD_PART_OID =PA.PRD_PART_OID\nAND P.PART_TYPE IN (9, 10)\nAND P.BLOCK_OID=B.OID\nand B.DESCRIPTION like '%${drNum}%'   \nunion all\n              select  P.OID as PART_OID,   PE.OID as PEOID, P.CODE  as PART_CODE,\n     DECODE (PE.SYMMETRY,  0,'P', 1,'S', 2,'C', 3,'') as SYMMETRY,\n           P.PART_TYPE,\n           B.CODE as BLOCK_CODE,\n           RPT_COPY_COUNT (P.OID) as NUM_EQ_PART,\n           GET_PART_DESC (P.OID, 1) as PART_DESC,\n           SUBSTR (GET_SECT_TP (prf.std_profile_oid), 1, 2) as ELEM_TYPE,\n           SUBSTR (GET_MATERIAL_CODE (PRF.STD_PROFILE_OID, 2), 1, 12) as MATERIAL,\n           PRF.LENGTH * 1000 as LENGTH,\n           STD.WEB_HEIGHT as WIDTH,\n           STD.WEB_THICKNESS  as THICKNESS,\n           RPT_GET_PART_WEIGHT (P.OID) as WEIGHT_UNIT,\n           RPT_GET_PART_WEIGHT (P.OID) * RPT_COPY_COUNT (P.OID)  as TOTAL_WEIGHT,\n           SUBSTR (GET_NEST_ID (GET_PRD_EXPL_NESTING_OID(PE.OID), P.BLOCK_OID), 1, 15)  as NEST_ID,            \n            GET_NUM_EQ_NEST (GET_PRD_EXPL_NESTING_OID(PE.OID)) as NUM_PART_NEST,\n            GET_NEST_HEIGHT (GET_PRD_EXPL_NESTING_OID(PE.OID)) as NEST_LENGTH,\n            GET_NEST_WIDTH (GET_PRD_EXPL_NESTING_OID(PE.OID)) as NEST_WIDTH,\n            GET_NUM_EQ_NEST (GET_PRD_EXPL_NESTING_OID(PE.OID)) as NUM_EQ_NEST,\n            STD.WEB_HEIGHT as WH,\n            STD.WEB_THICKNESS as WT,\n            STD.FLANGE_HEIGHT as FH,\n            STD.FLANGE_THICKNESS as FT,\n            STD.STOCK_CODE0 as STOCK \n      FROM PRD_EXPL_PART PE, PRD_PART P, PRD_PROFILE PRF, BLOCK B,STD_PROFILE STD\n      \n\n     WHERE     \n    \n     (PRF.PRD_PART_OID = P.OID AND PRF.STD_PROFILE_OID=STD.OID)    \n     AND P.OID=PE.PRD_PART_OID\n     AND P.PART_TYPE IN (0,1,2,3,6)\n     AND P.BLOCK_OID=B.OID               \n     AND B.DESCRIPTION like '%${drNum}%' \nunion all\nselect P.OID as PART_OID,   PE.OID as PEOID, P.CODE  as PART_CODE,\n     DECODE (PE.SYMMETRY,  0,'P', 1,'S', 2,'C', 3,'') as SYMMETRY,\n           P.PART_TYPE,\n            B.CODE as BLOCK_CODE,\n           RPT_COPY_COUNT (P.OID) as NUM_EQ_PART,\n           SUBSTR (GET_PART_DESC (P.OID, 1), 1, 200) as PART_DESC,\n           'PL' as ELEM_TYPE,\n           SUBSTR (GET_MATERIAL_CODE (PA.MATERIAL_OID, 1), 1, 12) as MATERIAL,\n           RPT_INP_GET_PLT_DIMENSIONS (P.OID, 0) * 1000 as LENGTH,\n           RPT_INP_GET_PLT_DIMENSIONS (P.OID, 1) * 1000 as WIDTH,\n           PA.THICKNESS * 1000   as THICKNESS,\n           RPT_GET_PART_WEIGHT (P.OID) as WEIGHT_UNIT,\n           RPT_GET_PART_WEIGHT (P.OID) * RPT_COPY_COUNT (P.OID) as TOTAL_WEIGHT,\n           SUBSTR (GET_NEST_ID (GET_PRD_EXPL_NESTING_OID(PE.OID), P.BLOCK_OID), 1, 15)  as NEST_ID,            \nGET_NUM_EQ_NEST (GET_PRD_EXPL_NESTING_OID(PE.OID)) as NUM_PART_NEST,\nGET_NEST_HEIGHT (GET_PRD_EXPL_NESTING_OID(PE.OID)) as NEST_LENGTH,\nGET_NEST_WIDTH (GET_PRD_EXPL_NESTING_OID(PE.OID)) as NEST_WIDTH,\nGET_NUM_EQ_NEST (GET_PRD_EXPL_NESTING_OID(PE.OID)) as NUM_EQ_NEST,\n           0 as WH,\n            PA.THICKNESS * 1000 as WT,\n            0 as FH,\n            0 as FT,\n            (select STORAGE_CODE from STD_PLATE where MATERIAL_OID=PA.MATERIAL_OID and THICKNESS=PA.THICKNESS*1000 fetch first 1 row only    ) as STOCK\n      FROM PRD_EXPL_PART PE, PRD_PART P, INP_PLATE_ATT_DB PA,BLOCK B\n      WHERE  \n        PA.INP_PART_OID = P.OID AND PE.PRD_PART_OID=P.OID\n           AND P.PART_TYPE IN (14,\n                               15,\n                               18,\n                               20,\n                               22,\n                               23,\n                               25,\n                               26)\n          AND P.BLOCK_OID=B.OID\n          and B.DESCRIPTION like '%${drNum}%' \nunion all\nselect\nPART.OID as PART_OID,  \nPART.PEOID as PEOID, \nPART.CODE  as PART_CODE,\nDECODE (PART.SYMMETRY,  0,'P', 1,'S', 2,'C', 3,'') as SYMMETRY,            \nPART.PART_TYPE,\nPART.BLOCK_CODE as BLOCK_CODE,\nRPT_COPY_COUNT (PART.OID) as NUM_EQ_PART,\nSUBSTR (GET_PART_DESC (PART.OID, 1), 1, 200) as PART_DESC,            \nSUBSTR (GET_SECT_TP (PART.STD_SECTION_OID), 1, 2) as ELEM_TYPE,\nSUBSTR (GET_MATERIAL_CODE (PART.STD_SECTION_OID, 2), 1, 12) as MATERIAL,\nRPT_GET_PART_LENGTH (PART.OID) * 1000 as LENGTH,\n  GET_PRF_W_HEIGHT (PART.STD_SECTION_OID) as WIDTH,\n           GET_PRF_W_THICK (PART.STD_SECTION_OID)   as THICKNESS,\n           RPT_GET_PART_WEIGHT (PART.OID) as WEIGHT_UNIT,\n           RPT_GET_PART_WEIGHT (PART.OID) * RPT_COPY_COUNT (PART.OID) as TOTAL_WEIGHT,\n           SUBSTR (GET_NEST_ID (GET_PRD_EXPL_NESTING_OID(PART.PEOID), PART.BLOKOID), 1, 15)  as NEST_ID,            \n            GET_NUM_EQ_NEST (GET_PRD_EXPL_NESTING_OID(PART.PEOID)) as NUM_PART_NEST,\n            GET_NEST_HEIGHT (GET_PRD_EXPL_NESTING_OID(PART.PEOID)) as NEST_LENGTH,\n            GET_NEST_WIDTH (GET_PRD_EXPL_NESTING_OID(PART.PEOID)) as NEST_WIDTH,\n            GET_NUM_EQ_NEST (GET_PRD_EXPL_NESTING_OID(PART.PEOID)) as NUM_EQ_NEST,\n            0 as WH,\n            GET_PRF_W_THICK (PART.STD_SECTION_OID) as WT,\n            0 as FH,\n            0 as FT,\n            (select STORAGE_CODE from STD_PLATE where MATERIAL_OID= PART.MAT_CODE and THICKNESS=GET_PRF_W_THICK (PART.STD_SECTION_OID) fetch first 1 row only    ) as STOCK\n                    from\n                        (\n                             select \n                                P.OID,\n                                P.CODE,\n                                P.PART_TYPE,\n                                PE.OID as PEOID,\n                                PE.SYMMETRY,\n                                PRF.STD_SECTION_OID,\n                                P.BLOCK_OID as BLOKOID,\n                                (select CODE from BLOCK where OID=P.BLOCK_OID) as BLOCK_CODE,\n                                (select MAT_CODE from PRD_NEST_GEN where OID = GET_PRD_EXPL_NESTING_OID(PE.OID)) as MAT_CODE,\n                                GET_PRD_EXPL_NESTING_OID(PE.OID) as NOID\n                                from PRD_PART P, PRD_EXPL_PART PE, INP_LC_ATT_DB PRF\n                                where\n                                P.PART_TYPE in (17)  \n                                AND P.BLOCK_OID=(select OID from BLOCK where DESCRIPTION like '%${drNum}%')\n                                AND PE.PRD_PART_OID=  P.OID\n                                AND PRF.INP_PART_OID = P.OID\n\n                        \n                        ) PART\n                        \nunion all\nselect P.OID as PART_OID,   PE.OID as PEOID, P.CODE  as PART_CODE,\n     DECODE (PE.SYMMETRY,  0,'P', 1,'S', 2,'C', 3,'') as SYMMETRY,\n           P.PART_TYPE,\n            B.CODE as BLOCK_CODE,\n           1 as NUM_EQ_PART,\n           GET_PART_DESC (P.OID, 1) as PART_DESC,\n           'PL' as ELEM_TYPE,\n           PA.MATQ as MATERIAL,\n           RPT_AS_GET_PLT_DIMENSIONS (P.OID, 0) * 1000 as LENGTH,\n           RPT_AS_GET_PLT_DIMENSIONS (P.OID, 1) * 1000 as WIDTH,\n           PA.THICKNESS,\n           PE.WEIGHT as WEIGHT_UNIT,\n           PE.WEIGHT as TOTAL_WEIGHT,\nSUBSTR (GET_NEST_ID (GET_PRD_EXPL_NESTING_OID(PE.OID), P.BLOCK_OID), 1, 15)  as NEST_ID,            \nGET_NUM_EQ_NEST (GET_PRD_EXPL_NESTING_OID(PE.OID)) as NUM_PART_NEST,\nGET_NEST_HEIGHT (GET_PRD_EXPL_NESTING_OID(PE.OID)) as NEST_LENGTH,\nGET_NEST_WIDTH (GET_PRD_EXPL_NESTING_OID(PE.OID)) as NEST_WIDTH,\nGET_NUM_EQ_NEST (GET_PRD_EXPL_NESTING_OID(PE.OID)) as NUM_EQ_NEST,\n            0 as WH,\n            PA.THICKNESS as WT,\n            0 as FH,\n            0 as FT,\n           (select STORAGE_CODE from STD_PLATE where MATERIAL_OID=M.OID and THICKNESS=PA.THICKNESS fetch first 1 row only    ) as STOCK\n  \n      FROM PRD_PART               P,\n           AS_STD_PART_PLATE      PA,\n           PRD_EXPL_PART          PE ,  BLOCK B, MATERIAL M\n\n     WHERE   \n     PA.OID = P.OID\n     AND PE.PRD_PART_OID = P.OID\n     AND P.PART_TYPE = 12 AND P.BLOCK_OID=B.OID\n     AND PA.MATQ=M.CODE\n     and B.DESCRIPTION like '%${drNum}%' \nunion all\nselect P.OID as PART_OID,   PE.OID as PEOID,  P.CODE  as PART_CODE,\n     DECODE (PE.SYMMETRY,  0,'P', 1,'S', 2,'C', 3,'') as SYMMETRY,\n           P.PART_TYPE,\n            B.CODE as BLOCK_CODE,\n           1 as NUM_EQ_PART,\n           GET_PART_DESC (P.OID, 1) as PART_DESC,\n           DECODE (STD.SECTION,\n                   -1, '',\n                   0, 'FS',\n                   1, 'AS',\n                   2, 'IS',\n                   3, 'TS',\n                   4, 'US',\n                   5, 'BS',\n                   6, 'ST',\n                   7, 'AT',\n                   8, 'OS',\n                   9, 'PS',\n                   10, 'RS',\n                   11, 'MC',\n                   12, 'DB',\n                   13, 'SR',\n                   14, 'HR',\n                   15, 'LI',\n                   16, 'ZL',\n                   17, 'TL',\n                   '') as ELEM_TYPE,\n           SUBSTR (GET_MATERIAL_CODE (STD.MATERIAL_OID, 1), 1, 12) as MATERIAL,\n           PRF.LENGTH as LENGTH,\n           STD.WEB_HEIGHT as WIDTH,\n           STD.WEB_THICKNESS,\n           PE.WEIGHT as WEIGHT_UNIT,\n           PE.WEIGHT as TOTAL_WEIGHT,\nSUBSTR (GET_NEST_ID (GET_PRD_EXPL_NESTING_OID(PE.OID), P.BLOCK_OID), 1, 15)  as NEST_ID,            \nGET_NUM_EQ_NEST (GET_PRD_EXPL_NESTING_OID(PE.OID)) as NUM_PART_NEST,\nGET_NEST_HEIGHT (GET_PRD_EXPL_NESTING_OID(PE.OID)) as NEST_LENGTH,\nGET_NEST_WIDTH (GET_PRD_EXPL_NESTING_OID(PE.OID)) as NEST_WIDTH,\nGET_NUM_EQ_NEST (GET_PRD_EXPL_NESTING_OID(PE.OID)) as NUM_EQ_NEST,\n            STD.WEB_HEIGHT as WH,\n            STD.WEB_THICKNESS as WT,\n            STD.FLANGE_HEIGHT as FH,\n            STD.FLANGE_THICKNESS as FT,\n             STD.STOCK_CODE0 as STOCK \n      FROM PRD_PART               P,\n           AS_STD_PART_PROF       PRF,\n           STD_PROFILE            STD,\n           PRD_EXPL_PART          PE, PRD_NEST_PART PNP, BLOCK B\n        \n     WHERE  PRF.OID = P.OID\n           AND PE.PRD_PART_OID = P.OID\n           AND STD.KSE = PRF.KSE\n           AND P.PART_TYPE = 7 AND P.BLOCK_OID=B.OID\n           and B.DESCRIPTION like '%${drNum}%' \n) P\norder by P.PART_CODE,P.SYMMETRY"

  private def partsByDrawingNumAndPartNameOld(drNum: String, partName: String) = s"select distinct\n(select OID from V_PRD_PART where BLOCK_NAME=PNL.BLOCK_CODE AND PART_NAME=PNL.PART_CODE) as PART_OID,\nPNL.PEOID as EXPL_OID,\nPNL.PART_CODE,\nPNL.SYMMETRY,\nPNL.PART_TYPE,\nPNL.BLOCK_CODE,\nB.DESCRIPTION,\nPNL.NUM_EQ_PART,\nPNL.PART_DESC,\nPNL.ELEM_TYPE,\nPNL.MATERIAL,\nPNL.LENGTH,\nPNL.WIDTH,\nPNL.THICKNESS,\nPNL.WEIGHT_UNIT,\nPNL.TOTAL_WEIGHT,\nPNL.NEST_ID,\nPNL.NEST_LENGTH,\nPNL.NEST_WIDTH,\nPNL.NUM_EQ_NEST,\n(select KSE_KPL from V_PRD_PLPRF_MAT where NEST_ID=PNL.NEST_ID) as KSE_KPL,\n(select STOCK_CODE0 from STD_PROFILE where kse=(select KSE_KPL from V_PRD_PLPRF_MAT where NEST_ID=PNL.NEST_ID)) as STOCK1,\n(select STORAGE_CODE from STD_PLATE where kpl=(select KSE_KPL from V_PRD_PLPRF_MAT where NEST_ID=PNL.NEST_ID)) as STOCK2\nfrom\n(\nselect   \n    PEOID,\n    PART_CODE,\n    SYMMETRY,\n    PART_TYPE,\n    BLOCK_CODE,\n    NUM_EQ_PART,\n    PART_DESC,\n    ELEM_TYPE,\n    MATERIAL,\n    LENGTH,\n    WIDTH,\n    THICKNESS,\n    WEIGHT_UNIT,\n    TOTAL_WEIGHT,\n    NEST_ID,\n    NUM_PART_NEST,\n    NEST_LENGTH,\n    NEST_WIDTH,\n    NUM_EQ_NEST\nfrom \n(\n select      \n PE.OID as PEOID,\n P.CODE as PART_CODE,\n           DECODE (PE.SYMMETRY,  0,'P', 1,'S', 2,'C', 3,'') as SYMMETRY,\n           P.PART_TYPE,\n           SUBSTR (GET_BLOCK_CODE (P.BLOCK_OID), 1, 12) as BLOCK_CODE,\n           RPT_COPY_COUNT (P.OID) as NUM_EQ_PART,\n           GET_PART_DESC (P.OID, 1) as PART_DESC,\n           'PL' as ELEM_TYPE,\n           SUBSTR (GET_MATERIAL_CODE (PA.MATERIAL_OID, 1), 1, 12) as MATERIAL,\n           RPT_GET_SD_PLATE_DIM (P.OID, 0) as LENGTH,\n           RPT_GET_SD_PLATE_DIM (P.OID, 1) as WIDTH,\n           PA.THICKNESS,\n           RPT_GET_PART_WEIGHT (P.OID) as WEIGHT_UNIT,\n           RPT_GET_PART_WEIGHT (P.OID) * RPT_COPY_COUNT (P.OID) as TOTAL_WEIGHT,\n           SUBSTR (GET_NEST_ID (NP.NESTING_OID, NP.NESTING_BLOCK), 1, 15) as NEST_ID ,\n           NP.NUM_PART_NEST,\n           NP.NEST_LENGTH,\n           NP.NEST_WIDTH,\n           NP.NUM_EQ_NEST\n      FROM PRD_EXPL_PART PE,  PRD_PART P, V_RPT_SHDK_PLATE_ATT PA, V_RPT_NEST_PART_GROUP NP, PRD_NEST_PART PNP\n     WHERE     PA.PRD_PART_OID = P.OID AND PE.PRD_PART_OID =PA.PRD_PART_OID\n           AND PNP.PART_OID=P.OID AND PNP.SYMM_CODE=PE.SYMMETRY AND NP.NESTING_OID = PNP.NESTING_OID\n           AND P.PART_TYPE IN (9, 10)\n    UNION ALL\n    select    PE.OID as PEOID, P.CODE  as PART_CODE,\n     DECODE (PE.SYMMETRY,  0,'P', 1,'S', 2,'C', 3,'') as SYMMETRY,\n           P.PART_TYPE,\n           SUBSTR (GET_BLOCK_CODE (P.BLOCK_OID), 1, 12) as BLOCK_CODE,\n           RPT_COPY_COUNT (P.OID) as NUM_EQ_PART,\n           GET_PART_DESC (P.OID, 1) as PART_DESC,\n           SUBSTR (GET_SECT_TP (prf.std_profile_oid), 1, 2) as ELEM_TYPE,\n           SUBSTR (GET_MATERIAL_CODE (PRF.STD_PROFILE_OID, 2), 1, 12) as MATERIAL,\n           PRF.LENGTH * 1000 as LENGTH,\n           GET_PRF_W_HEIGHT (PRF.STD_PROFILE_OID) as WIDTH,\n           GET_PRF_W_THICK (PRF.STD_PROFILE_OID),\n           RPT_GET_PART_WEIGHT (P.OID) as WEIGHT_UNIT,\n           RPT_GET_PART_WEIGHT (P.OID) * RPT_COPY_COUNT (P.OID)  as TOTAL_WEIGHT,\n           SUBSTR (GET_NEST_ID (NP.NESTING_OID, NP.NESTING_BLOCK), 1, 15) as NEST_ID,\n           NP.NUM_PART_NEST,\n           NP.NEST_LENGTH,\n           NP.NEST_WIDTH,\n           NP.NUM_EQ_NEST\n      FROM PRD_EXPL_PART PE, PRD_PART P, PRD_PROFILE PRF, V_RPT_NEST_PART_GROUP NP, PRD_NEST_PART PNP\n     WHERE     PRF.PRD_PART_OID = P.OID AND PE.PRD_PART_OID=PRF.PRD_PART_OID\n           AND PNP.PART_OID=P.OID AND PNP.SYMM_CODE=PE.SYMMETRY AND NP.NESTING_OID = PNP.NESTING_OID\n           AND P.PART_TYPE IN (0,\n                               1,\n                               2,\n                               3,\n                               6)\n    UNION ALL\n    select   PE.OID as PEOID, P.CODE  as PART_CODE,\n     DECODE (PE.SYMMETRY,  0,'P', 1,'S', 2,'C', 3,'') as SYMMETRY,\n           P.PART_TYPE,\n           SUBSTR (GET_BLOCK_CODE (P.BLOCK_OID), 1, 12) as BLOCK_CODE,\n           RPT_COPY_COUNT (P.OID) as NUM_EQ_PART,\n           SUBSTR (GET_PART_DESC (P.OID, 1), 1, 200) as PART_DESC,\n           'PL' as ELEM_TYPE,\n           SUBSTR (GET_MATERIAL_CODE (PA.MATERIAL_OID, 1), 1, 12) as MATERIAL,\n           RPT_INP_GET_PLT_DIMENSIONS (P.OID, 0) * 1000 as LENGTH,\n           RPT_INP_GET_PLT_DIMENSIONS (P.OID, 1) * 1000 as WIDTH,\n           PA.THICKNESS * 1000,\n           RPT_GET_PART_WEIGHT (P.OID) as WEIGHT_UNIT,\n           RPT_GET_PART_WEIGHT (P.OID) * RPT_COPY_COUNT (P.OID) as TOTAL_WEIGHT,\n           SUBSTR (GET_NEST_ID (NP.NESTING_OID, NP.NESTING_BLOCK), 1, 15) as NEST_ID,\n           NP.NUM_PART_NEST,\n           NP.NEST_LENGTH,\n           NP.NEST_WIDTH,\n           NP.NUM_EQ_NEST\n      FROM PRD_EXPL_PART PE, PRD_PART P, INP_PLATE_ATT_DB PA, V_RPT_NEST_PART_GROUP NP, PRD_NEST_PART PNP\n     WHERE     PA.INP_PART_OID = P.OID AND PE.PRD_PART_OID=P.OID\n           AND PNP.PART_OID=P.OID AND PNP.SYMM_CODE=PE.SYMMETRY AND NP.NESTING_OID = PNP.NESTING_OID\n           AND P.PART_TYPE IN (14,\n                               15,\n                               18,\n                               20,\n                               22,\n                               23,\n                               25,\n                               26)\n    UNION ALL\n    select   PE.OID as PEOID, P.CODE  as PART_CODE,\n     DECODE (PE.SYMMETRY,  0,'P', 1,'S', 2,'C', 3,'') as SYMMETRY,\n           P.PART_TYPE,\n           SUBSTR (GET_BLOCK_CODE (P.BLOCK_OID), 1, 12) as BLOCK_CODE,\n           RPT_COPY_COUNT (P.OID) as NUM_EQ_PART,\n           SUBSTR (GET_PART_DESC (P.OID, 1), 1, 200) as PART_DESC,\n           SUBSTR (GET_SECT_TP (prf.std_profile_oid), 1, 2) as ELEM_TYPE,\n           SUBSTR (GET_MATERIAL_CODE (PRF.STD_PROFILE_OID, 2), 1, 12) as MATERIAL,\n           RPT_GET_PART_LENGTH (P.OID) * 1000 as LENGTH,\n           GET_PRF_W_HEIGHT (PRF.STD_PROFILE_OID) as WIDTH,\n           GET_PRF_W_THICK (PRF.STD_PROFILE_OID),\n           RPT_GET_PART_WEIGHT (P.OID) as WEIGHT_UNIT,\n           RPT_GET_PART_WEIGHT (P.OID) * RPT_COPY_COUNT (P.OID) as TOTAL_WEIGHT,\n           SUBSTR (GET_NEST_ID (NP.NESTING_OID, NP.NESTING_BLOCK), 1, 15)  as NEST_ID,\n           NP.NUM_PART_NEST,\n           NP.NEST_LENGTH,\n           NP.NEST_WIDTH,\n           NP.NUM_EQ_NEST\n      FROM PRD_EXPL_PART PE, PRD_PART P, INP_PROFILE_ATT_DB PRF, V_RPT_NEST_PART_GROUP NP, PRD_NEST_PART PNP\n     WHERE     PRF.INP_PART_OID = P.OID AND PE.PRD_PART_OID= P.OID\n           AND PNP.PART_OID=P.OID AND PNP.SYMM_CODE=PE.SYMMETRY AND NP.NESTING_OID = PNP.NESTING_OID\n           AND P.PART_TYPE IN (16,\n                               19,\n                               21,\n                               24)\n    UNION ALL\n    select   PE.OID as PEOID,  P.CODE  as PART_CODE,\n     DECODE (PE.SYMMETRY,  0,'P', 1,'S', 2,'C', 3,'') as SYMMETRY,\n           P.PART_TYPE,\n           SUBSTR (GET_BLOCK_CODE (P.BLOCK_OID), 1, 12) as BLOCK_CODE,\n           RPT_COPY_COUNT (P.OID) as NUM_EQ_PART,\n           SUBSTR (GET_PART_DESC (P.OID, 1), 1, 200) as PART_DESC,\n           SUBSTR (GET_SECT_TP (PRF.STD_SECTION_OID), 1, 2) as ELEM_TYPE,\n           SUBSTR (GET_MATERIAL_CODE (PRF.STD_SECTION_OID, 2), 1, 12) as MATERIAL,\n           RPT_GET_PART_LENGTH (P.OID) * 1000 as LENGTH,\n           GET_PRF_W_HEIGHT (PRF.STD_SECTION_OID) as WIDTH,\n           GET_PRF_W_THICK (PRF.STD_SECTION_OID),\n           RPT_GET_PART_WEIGHT (P.OID) as WEIGHT_UNIT,\n           RPT_GET_PART_WEIGHT (P.OID) * RPT_COPY_COUNT (P.OID) as TOTAL_WEIGHT,\n           SUBSTR (GET_NEST_ID (NP.NESTING_OID, NP.NESTING_BLOCK), 1, 15)  as NEST_ID,\n           NP.NUM_PART_NEST,\n           NP.NEST_LENGTH,\n           NP.NEST_WIDTH,\n           NP.NUM_EQ_NEST\n      FROM PRD_EXPL_PART PE, PRD_PART P, INP_LC_ATT_DB PRF, V_RPT_NEST_PART_GROUP NP, PRD_NEST_PART PNP\n     WHERE     PRF.INP_PART_OID = P.OID AND PE.PRD_PART_OID=  P.OID\n           AND PNP.PART_OID=P.OID AND PNP.SYMM_CODE=PE.SYMMETRY AND NP.NESTING_OID = PNP.NESTING_OID\n           AND P.PART_TYPE = 17\n    UNION ALL\n    select   PE.OID as PEOID, P.CODE  as PART_CODE,\n     DECODE (PE.SYMMETRY,  0,'P', 1,'S', 2,'C', 3,'') as SYMMETRY,\n           P.PART_TYPE,\n           SUBSTR (GET_BLOCK_CODE (P.BLOCK_OID), 1, 12) as BLOCK_CODE,\n           1 as NUM_EQ_PART,\n           GET_PART_DESC (P.OID, 1) as PART_DESC,\n           'PL' as ELEM_TYPE,\n           PA.MATQ as MATERIAL,\n           RPT_AS_GET_PLT_DIMENSIONS (P.OID, 0) * 1000 as LENGTH,\n           RPT_AS_GET_PLT_DIMENSIONS (P.OID, 1) * 1000 as WIDTH,\n           PA.THICKNESS,\n           PE.WEIGHT as WEIGHT_UNIT,\n           PE.WEIGHT as TOTAL_WEIGHT,\n           SUBSTR (GET_NEST_ID (NP.NESTING_OID, NP.NESTING_BLOCK), 1, 15)  as NEST_ID,\n           NP.NUM_PART_NEST,\n           NP.NEST_LENGTH,\n           NP.NEST_WIDTH,\n           NP.NUM_EQ_NEST\n      FROM PRD_PART               P,\n           AS_STD_PART_PLATE      PA,\n           V_RPT_NEST_PART_GROUP  NP,\n           PRD_EXPL_PART          PE , PRD_NEST_PART PNP\n     WHERE     PA.OID = P.OID\n           AND PNP.PART_OID=P.OID AND PNP.SYMM_CODE=PE.SYMMETRY AND NP.NESTING_OID = PNP.NESTING_OID\n           AND PE.PRD_PART_OID = P.OID\n           AND P.PART_TYPE = 12\n    UNION ALL\n    select   PE.OID as PEOID,  P.CODE  as PART_CODE,\n     DECODE (PE.SYMMETRY,  0,'P', 1,'S', 2,'C', 3,'') as SYMMETRY,\n           P.PART_TYPE,\n           SUBSTR (GET_BLOCK_CODE (P.BLOCK_OID), 1, 12) as BLOCK_CODE,\n           1 as NUM_EQ_PART,\n           GET_PART_DESC (P.OID, 1) as PART_DESC,\n           'PL' as ELEM_TYPE,\n           PA.MATQ as MATERIAL,\n           RPT_AS_GET_PLT_DIMENSIONS (P.OID, 0) * 1000 as LENGTH,\n           RPT_AS_GET_PLT_DIMENSIONS (P.OID, 1) * 1000 as WIDTH,\n           PA.THICKNESS,\n           PE.WEIGHT as WEIGHT_UNIT,\n           PE.WEIGHT as TOTAL_WEIGHT,\n           SUBSTR (GET_NEST_ID (NP.NESTING_OID, NP.NESTING_BLOCK), 1, 15)  as NEST_ID,\n           NP.NUM_PART_NEST,\n           NP.NEST_LENGTH,\n           NP.NEST_WIDTH,\n           NP.NUM_EQ_NEST\n      FROM PRD_PART               P,\n           AS_PART_CONT_PLATE     PA,\n           V_RPT_NEST_PART_GROUP  NP,\n           PRD_EXPL_PART          PE, PRD_NEST_PART PNP\n     WHERE     PA.OID = P.OID\n           AND PNP.PART_OID=P.OID AND PNP.SYMM_CODE=PE.SYMMETRY AND NP.NESTING_OID = PNP.NESTING_OID\n           AND PE.PRD_PART_OID = P.OID\n           AND P.PART_TYPE = 12\n    UNION ALL\n    select   PE.OID as PEOID,  P.CODE  as PART_CODE,\n     DECODE (PE.SYMMETRY,  0,'P', 1,'S', 2,'C', 3,'') as SYMMETRY,\n           P.PART_TYPE,\n           SUBSTR (GET_BLOCK_CODE (P.BLOCK_OID), 1, 12) as BLOCK_CODE,\n           1 as NUM_EQ_PART,\n           GET_PART_DESC (P.OID, 1) as PART_DESC,\n           DECODE (STD.SECTION,\n                   -1, '',\n                   0, 'FS',\n                   1, 'AS',\n                   2, 'IS',\n                   3, 'TS',\n                   4, 'US',\n                   5, 'BS',\n                   6, 'ST',\n                   7, 'AT',\n                   8, 'OS',\n                   9, 'PS',\n                   10, 'RS',\n                   11, 'MC',\n                   12, 'DB',\n                   13, 'SR',\n                   14, 'HR',\n                   15, 'LI',\n                   16, 'ZL',\n                   17, 'TL',\n                   '') as ELEM_TYPE,\n           SUBSTR (GET_MATERIAL_CODE (STD.MATERIAL_OID, 1), 1, 12) as MATERIAL,\n           PRF.LENGTH as LENGTH,\n           STD.WEB_HEIGHT as WIDTH,\n           STD.WEB_THICKNESS,\n           PE.WEIGHT as WEIGHT_UNIT,\n           PE.WEIGHT as TOTAL_WEIGHT,\n           SUBSTR (GET_NEST_ID (NP.NESTING_OID, NP.NESTING_BLOCK), 1, 15)  as NEST_ID,\n           NP.NUM_PART_NEST,\n           NP.NEST_LENGTH,\n           NP.NEST_WIDTH,\n           NP.NUM_EQ_NEST\n      FROM PRD_PART               P,\n           AS_STD_PART_PROF       PRF,\n           V_RPT_NEST_PART_GROUP  NP,\n           STD_PROFILE            STD,\n           PRD_EXPL_PART          PE, PRD_NEST_PART PNP\n     WHERE     PRF.OID = P.OID\n           AND PE.PRD_PART_OID = P.OID\n           AND STD.KSE = PRF.KSE\n           AND PNP.PART_OID=P.OID AND PNP.SYMM_CODE=PE.SYMMETRY AND NP.NESTING_OID = PNP.NESTING_OID\n           AND P.PART_TYPE = 7\n    UNION ALL\n    select   PE.OID as PEOID,  P.CODE  as PART_CODE,\n     DECODE (PE.SYMMETRY,  0,'P', 1,'S', 2,'C', 3,'') as SYMMETRY,\n           P.PART_TYPE,\n           SUBSTR (GET_BLOCK_CODE (P.BLOCK_OID), 1, 12) as BLOCK_CODE,\n           RPT_COPY_COUNT (P.OID) as NUM_EQ_PART,\n           GET_PART_DESC (P.OID, 1) as PART_DESC,\n           'PL' as ELEM_TYPE,\n           SUBSTR (GET_MATERIAL_CODE (PA.MATERIAL_OID, 1), 1, 12) as MATERIAL,\n           RPT_GET_SD_PLATE_DIM (P.OID, 0) as LENGTH,\n           RPT_GET_SD_PLATE_DIM (P.OID, 1) as WIDTH,\n           PA.THICKNESS,\n           RPT_GET_PART_WEIGHT (P.OID) as WEIGHT_UNIT,\n           RPT_GET_PART_WEIGHT (P.OID) * RPT_COPY_COUNT (P.OID) as TOTAL_WEIGHT,\n           NULL  as NEST_ID,\n           0,\n           0,\n           0,\n           0\n      FROM V_RPT_PART_NO_NESTING_SD P, V_RPT_SHDK_PLATE_ATT PA,PRD_EXPL_PART          PE\n     WHERE PA.PRD_PART_OID = P.OID AND PE.PRD_PART_OID=  P.OID\n    UNION ALL\n    select   PE.OID as PEOID,  P.CODE  as PART_CODE,\n     DECODE (PE.SYMMETRY,  0,'P', 1,'S', 2,'C', 3,'') as SYMMETRY,\n           P.PART_TYPE,\n           SUBSTR (GET_BLOCK_CODE (P.BLOCK_OID), 1, 12) as BLOCK_CODE,\n           RPT_COPY_COUNT (P.OID) as NUM_EQ_PART,\n           GET_PART_DESC (P.OID, 1) as PART_DESC,\n           SUBSTR (GET_SECT_TP (prf.std_profile_oid), 1, 2) as ELEM_TYPE,\n           SUBSTR (GET_MATERIAL_CODE (PRF.STD_PROFILE_OID, 2), 1, 12) as MATERIAL,\n           PRF.LENGTH * 1000 as LENGTH,\n           GET_PRF_W_HEIGHT (PRF.STD_PROFILE_OID) as WIDTH,\n           GET_PRF_W_THICK (PRF.STD_PROFILE_OID),\n           RPT_GET_PART_WEIGHT (P.OID) as WEIGHT_UNIT,\n           RPT_GET_PART_WEIGHT (P.OID) * RPT_COPY_COUNT (P.OID) as TOTAL_WEIGHT,\n           NULL  as NEST_ID,\n           0,\n           0,\n           0,\n           0\n      FROM PRD_EXPL_PART PE, V_PRD_PART_NO_NESTING P, PRD_PROFILE PRF\n     WHERE     PRF.PRD_PART_OID = P.OID AND PE.PRD_PART_OID=  P.OID\n           AND P.PART_TYPE IN (0,\n                               1,\n                               2,\n                               3,\n                               6)\n    UNION ALL\n    select   PE.OID as PEOID,  P.CODE  as PART_CODE,\n     DECODE (PE.SYMMETRY,  0,'P', 1,'S', 2,'C', 3,'') as SYMMETRY,\n           P.PART_TYPE,\n           SUBSTR (GET_BLOCK_CODE (P.BLOCK_OID), 1, 12) as BLOCK_CODE,\n           RPT_COPY_COUNT (P.OID) as NUM_EQ_PART,\n           SUBSTR (GET_PART_DESC (P.OID, 1), 1, 200) as PART_DESC,\n           'PL' as ELEM_TYPE,\n           SUBSTR (GET_MATERIAL_CODE (PA.MATERIAL_OID, 1), 1, 12) as MATERIAL,\n           RPT_INP_GET_PLT_DIMENSIONS (INP_PART_OID, 0) * 1000 as LENGTH,\n           RPT_INP_GET_PLT_DIMENSIONS (INP_PART_OID, 1) * 1000 as WIDTH,\n           PA.THICKNESS * 1000,\n           RPT_GET_PART_WEIGHT (P.OID) as WEIGHT_UNIT,\n           RPT_GET_PART_WEIGHT (P.OID) * RPT_COPY_COUNT (P.OID) as TOTAL_WEIGHT,\n           NULL  as NEST_ID,\n           0,\n           0,\n           0,\n           0\n      FROM PRD_EXPL_PART PE,V_PRD_PART_NO_NESTING P, INP_PLATE_ATT_DB PA\n     WHERE     PA.INP_PART_OID = P.OID AND PE.PRD_PART_OID=  P.OID\n           AND P.PART_TYPE IN (14,\n                               15,\n                               18,\n                               20,\n                               22,\n                               23,\n                               25,\n                               26)\n    UNION ALL\n    select   PE.OID as PEOID,  P.CODE  as PART_CODE,\n     DECODE (PE.SYMMETRY,  0,'P', 1,'S', 2,'C', 3,'') as SYMMETRY,\n           P.PART_TYPE,\n           SUBSTR (GET_BLOCK_CODE (P.BLOCK_OID), 1, 12) as BLOCK_CODE,\n           RPT_COPY_COUNT (P.OID) as NUM_EQ_PART,\n           SUBSTR (GET_PART_DESC (P.OID, 1), 1, 200) as PART_DESC,\n           SUBSTR (GET_SECT_TP (prf.std_profile_oid), 1, 2) as ELEM_TYPE,\n           SUBSTR (GET_MATERIAL_CODE (PRF.STD_PROFILE_OID, 2), 1, 12) as MATERIAL,\n           RPT_GET_PART_LENGTH (P.OID) * 1000 as LENGTH,\n           GET_PRF_W_HEIGHT (PRF.STD_PROFILE_OID) as WIDTH,\n           GET_PRF_W_THICK (PRF.STD_PROFILE_OID),\n           RPT_GET_PART_WEIGHT (P.OID) as WEIGHT_UNIT,\n           RPT_GET_PART_WEIGHT (P.OID) * RPT_COPY_COUNT (P.OID) as TOTAL_WEIGHT,\n           NULL  as NEST_ID,\n           0,\n           0,\n           0,\n           0\n      FROM PRD_EXPL_PART PE,V_PRD_PART_NO_NESTING P, INP_PROFILE_ATT_DB PRF\n     WHERE     PRF.INP_PART_OID = P.OID AND PE.PRD_PART_OID=  P.OID\n           AND P.PART_TYPE IN (16,\n                               19,\n                               21,\n                               24)\n    UNION ALL\n    select   PE.OID as PEOID,  P.CODE  as PART_CODE,\n     DECODE (PE.SYMMETRY,  0,'P', 1,'S', 2,'C', 3,'') as SYMMETRY,\n           P.PART_TYPE,\n           SUBSTR (GET_BLOCK_CODE (P.BLOCK_OID), 1, 12) as BLOCK_CODE,\n           RPT_COPY_COUNT (P.OID) as NUM_EQ_PART,\n           SUBSTR (GET_PART_DESC (P.OID, 1), 1, 200) as PART_DESC,\n           SUBSTR (GET_SECT_TP (PRF.STD_SECTION_OID), 1, 2) as ELEM_TYPE,\n           SUBSTR (GET_MATERIAL_CODE (PRF.STD_SECTION_OID, 2), 1, 12) as MATERIAL,\n           RPT_GET_PART_LENGTH (P.OID) * 1000 as LENGTH,\n           GET_PRF_W_HEIGHT (PRF.STD_SECTION_OID) as WIDTH,\n           GET_PRF_W_THICK (PRF.STD_SECTION_OID),\n           RPT_GET_PART_WEIGHT (P.OID) as WEIGHT_UNIT,\n           RPT_GET_PART_WEIGHT (P.OID) * RPT_COPY_COUNT (P.OID) as TOTAL_WEIGHT,\n           NULL  as NEST_ID,\n           0,\n           0,\n           0,\n           0\n      FROM PRD_EXPL_PART PE,V_PRD_PART_NO_NESTING P, INP_LC_ATT_DB PRF\n     WHERE PRF.INP_PART_OID = P.OID AND P.PART_TYPE = 17 AND PE.PRD_PART_OID=  P.OID\n    UNION ALL\n    select   PE.OID as PEOID,  P.CODE,\n     DECODE (PE.SYMMETRY,  0,'P', 1,'S', 2,'C', 3,'') as SYMMETRY,\n           P.PART_TYPE,\n           SUBSTR (GET_BLOCK_CODE (P.BLOCK_OID), 1, 12) as BLOCK_CODE,\n           1 as NUM_EQ_PART,\n           GET_PART_DESC (P.OID, 1) as PART_DESC,\n           'PL' as ELEM_TYPE,\n           PA.MATQ as MATERIAL,\n           RPT_AS_GET_PLT_DIMENSIONS (P.OID, 0) * 1000 as LENGTH,\n           RPT_AS_GET_PLT_DIMENSIONS (P.OID, 1) * 1000 as WIDTH,\n           PA.THICKNESS,\n           PE.WEIGHT as WEIGHT_UNIT,\n           PE.WEIGHT as TOTAL_WEIGHT,\n           NULL  as NEST_ID,\n           0,\n           0,\n           0,\n           0\n      FROM V_PRD_PART_NO_NESTING P, AS_STD_PART_PLATE PA, PRD_EXPL_PART PE\n     WHERE PA.OID = P.OID AND PE.PRD_PART_OID = P.OID AND P.PART_TYPE = 12\n    UNION ALL\n    select   PE.OID as PEOID,  P.CODE as PART_CODE,\n     DECODE (PE.SYMMETRY,  0,'P', 1,'S', 2,'C', 3,'') as SYMMETRY,\n           P.PART_TYPE,\n           SUBSTR (GET_BLOCK_CODE (P.BLOCK_OID), 1, 12),\n           1 as NUM_EQ_PART,\n           GET_PART_DESC (P.OID, 1) as PART_DESC,\n           'PL' as ELEM_TYPE,\n           PA.MATQ as MATERIAL,\n           RPT_AS_GET_PLT_DIMENSIONS (P.OID, 0) * 1000 as LENGTH,\n           RPT_AS_GET_PLT_DIMENSIONS (P.OID, 1) * 1000 as WIDTH,\n           PA.THICKNESS,\n           PE.WEIGHT as WEIGHT_UNIT,\n           PE.WEIGHT as TOTAL_WEIGHT,\n           NULL  as NEST_ID,\n           0,\n           0,\n           0,\n           0\n      FROM V_PRD_PART_NO_NESTING P, AS_PART_CONT_PLATE PA, PRD_EXPL_PART PE\n     WHERE PA.OID = P.OID AND PE.PRD_PART_OID = P.OID AND P.PART_TYPE = 12\n    UNION ALL\n    select   PE.OID as PEOID, P.CODE as PART_CODE,\n     DECODE (PE.SYMMETRY,  0,'P', 1,'S', 2,'C', 3,'') as SYMMETRY,\n           P.PART_TYPE,\n           SUBSTR (GET_BLOCK_CODE (P.BLOCK_OID), 1, 12) as BLOCK_CODE,\n           1 as NUM_EQ_PART,\n           GET_PART_DESC (P.OID, 1) as PART_DESC,\n           DECODE (STD.SECTION,\n                   -1, '',\n                   0, 'FS',\n                   1, 'AS',\n                   2, 'IS',\n                   3, 'TS',\n                   4, 'US',\n                   5, 'BS',\n                   6, 'ST',\n                   7, 'AT',\n                   8, 'OS',\n                   9, 'PS',\n                   10, 'RS',\n                   11, 'MC',\n                   12, 'DB',\n                   13, 'SR',\n                   14, 'HR',\n                   15, 'LI',\n                   16, 'ZL',\n                   17, 'TL',\n                   '') as ELEM_TYPE,\n           SUBSTR (GET_MATERIAL_CODE (STD.MATERIAL_OID, 1), 1, 12) as MATERIAL,\n           PRF.LENGTH as LENGTH,\n           STD.WEB_HEIGHT as WIDTH,\n           STD.WEB_THICKNESS,\n           PE.WEIGHT as WEIGHT_UNIT,\n           PE.WEIGHT as TOTAL_WEIGHT,\n           NULL  as NEST_ID,\n           0,\n           0,\n           0,\n           0\n      FROM V_PRD_PART_NO_NESTING  P,\n           AS_STD_PART_PROF       PRF,\n           STD_PROFILE            STD,\n           PRD_EXPL_PART          PE\n     WHERE     PRF.OID = P.OID\n           AND PE.PRD_PART_OID = P.OID\n           AND STD.KSE = PRF.KSE\n           AND P.PART_TYPE = 7\n\n)\n) PNL, BLOCK B\nwhere \nPNL.BLOCK_CODE=B.CODE AND\nB.DESCRIPTION like '%${drNum}%' AND PNL.PART_CODE='${partName}' \norder by PNL.PART_CODE,PNL.SYMMETRY"

  private def partsByDrawingNumAndPartName(drNum: String, partName: String) = s"select distinct\nP.PART_OID as PART_OID,\nP.PEOID as EXPL_OID,\nP.PART_CODE,\nP.SYMMETRY,\nP.PART_TYPE,\nP.BLOCK_CODE,\nP.BLOCK_CODE as DESCRIPTION,\nP.NUM_EQ_PART,\nP.PART_DESC,\nP.ELEM_TYPE,\nP.MATERIAL,\nP.LENGTH,\nP.WIDTH,\nP.THICKNESS,\nP.WEIGHT_UNIT,\nP.TOTAL_WEIGHT,\nP.NEST_ID,\nP.NEST_LENGTH,\nP.NEST_WIDTH,\nP.NUM_EQ_NEST,\nP.WH,\nP.WT,\nP.FH,\nP.FT\nfrom\n(\nselect \nP.OID as PART_OID,  \nPE.OID as PEOID, \nP.CODE  as PART_CODE,      \nDECODE (PE.SYMMETRY,  0,'P', 1,'S', 2,'C', 3,'') as SYMMETRY,            \nP.PART_TYPE,\n B.CODE as BLOCK_CODE,\nRPT_COPY_COUNT (P.OID) as NUM_EQ_PART,\nSUBSTR (GET_PART_DESC (P.OID, 1), 1, 200) as PART_DESC,            \nSUBSTR (GET_SECT_TP (prf.std_profile_oid), 1, 2) as ELEM_TYPE,\nSUBSTR (GET_MATERIAL_CODE (PRF.STD_PROFILE_OID, 2), 1, 12) as MATERIAL,\nRPT_GET_PART_LENGTH (P.OID) * 1000 as LENGTH,            \nSTD.WEB_HEIGHT as WIDTH,\nSTD.WEB_THICKNESS as THICKNESS,\nRPT_GET_PART_WEIGHT (P.OID) as WEIGHT_UNIT,            \nRPT_GET_PART_WEIGHT (P.OID) * RPT_COPY_COUNT (P.OID) as TOTAL_WEIGHT,\nSUBSTR (GET_NEST_ID (NP.NESTING_OID, NP.NESTING_BLOCK), 1, 15)  as NEST_ID,            \nNP.NUM_PART_NEST,\nNP.NEST_LENGTH,\nNP.NEST_WIDTH,\nNP.NUM_EQ_NEST,\nSTD.WEB_HEIGHT as WH,\nSTD.WEB_THICKNESS as WT,\nSTD.FLANGE_HEIGHT as FH,\nSTD.FLANGE_THICKNESS as FT\nFROM \nPRD_EXPL_PART PE, PRD_PART P, INP_PROFILE_ATT_DB PRF, PRD_NEST_PART PNP, BLOCK B,STD_PROFILE STD, \n        (\n              select \n                     N.PART_OID,\n                     N.NESTING_OID,\n                     N.SYMM_CODE,\n                     NG.ID_SEQ_BLOCK as NESTING_BLOCK,\n                     COUNT (*) * GET_NUM_EQ_NEST (NESTING_OID) as NUM_PART_NEST,\n                     GET_NEST_HEIGHT (NESTING_OID) as NEST_LENGTH,\n                     GET_NEST_WIDTH (NESTING_OID) as NEST_WIDTH,\n                     GET_NUM_EQ_NEST (NESTING_OID) as NUM_EQ_NEST\n                        from\n                        PRD_NEST_PART N, PRD_NEST_GEN NG\n                        where \n                         NG.OID = N.NESTING_OID\n                         GROUP BY PART_OID, NESTING_OID, SYMM_CODE,  NG.ID_SEQ_BLOCK\n        )   NP  \nWHERE  \nNP.part_oid=P.OID AND\nNP.SYMM_CODE=PE.SYMMETRY AND\nPRF.INP_PART_OID = P.OID \nAND PE.PRD_PART_OID= P.OID \nAND PNP.PART_OID=P.OID \nAND PNP.SYMM_CODE=PE.SYMMETRY           \nAND P.PART_TYPE IN (16,19,21,24)  \nAND P.BLOCK_OID=B.OID\nAND PRF.STD_PROFILE_OID=STD.OID\nand B.DESCRIPTION like '%${drNum}%'\n\nUNION ALL\n select\n P.OID as PART_OID,       \n PE.OID as PEOID,\n P.CODE as PART_CODE,\n           DECODE (PE.SYMMETRY,  0,'P', 1,'S', 2,'C', 3,'') as SYMMETRY,\n           P.PART_TYPE,\n           B.CODE as BLOCK_CODE,\n           RPT_COPY_COUNT (P.OID) as NUM_EQ_PART,\n           GET_PART_DESC (P.OID, 1) as PART_DESC,\n           'PL' as ELEM_TYPE,\n           SUBSTR (GET_MATERIAL_CODE (PA.MATERIAL_OID, 1), 1, 12) as MATERIAL,\n           RPT_GET_SD_PLATE_DIM (P.OID, 0) as LENGTH,\n           RPT_GET_SD_PLATE_DIM (P.OID, 1) as WIDTH,\n           PA.THICKNESS,\n           RPT_GET_PART_WEIGHT (P.OID) as WEIGHT_UNIT,\n           RPT_GET_PART_WEIGHT (P.OID) * RPT_COPY_COUNT (P.OID) as TOTAL_WEIGHT,\n           SUBSTR (GET_NEST_ID (NP.NESTING_OID, NP.NESTING_BLOCK), 1, 15) as NEST_ID ,\n           NP.NUM_PART_NEST,\n           NP.NEST_LENGTH,\n           NP.NEST_WIDTH,\n           NP.NUM_EQ_NEST,\n           0 as WH,\n            PA.THICKNESS as WT,\n            0 as FH,\n            0 as FT\n      FROM PRD_EXPL_PART PE,  PRD_PART P, V_RPT_SHDK_PLATE_ATT PA, PRD_NEST_PART PNP, BLOCK B,\n        (\n              select \n                     N.PART_OID,\n                     N.NESTING_OID,\n                     N.SYMM_CODE,\n                     NG.ID_SEQ_BLOCK as NESTING_BLOCK,\n                     COUNT (*) * GET_NUM_EQ_NEST (NESTING_OID) as NUM_PART_NEST,\n                     GET_NEST_HEIGHT (NESTING_OID) as NEST_LENGTH,\n                     GET_NEST_WIDTH (NESTING_OID) as NEST_WIDTH,\n                     GET_NUM_EQ_NEST (NESTING_OID) as NUM_EQ_NEST\n                        from\n                        PRD_NEST_PART N, PRD_NEST_GEN NG\n                        where \n                         NG.OID = N.NESTING_OID\n                         GROUP BY PART_OID, NESTING_OID, SYMM_CODE,  NG.ID_SEQ_BLOCK\n        )   NP  \n     WHERE \n         NP.part_oid=P.OID AND NP.SYMM_CODE=PE.SYMMETRY AND\n     PA.PRD_PART_OID = P.OID AND PE.PRD_PART_OID =PA.PRD_PART_OID\n           AND PNP.PART_OID=P.OID AND PNP.SYMM_CODE=PE.SYMMETRY\n           AND P.PART_TYPE IN (9, 10)\n           AND P.BLOCK_OID=B.OID\n           and B.DESCRIPTION like '%${drNum}%' \n           \n                      UNION ALL\n    select  P.OID as PART_OID,   PE.OID as PEOID, P.CODE  as PART_CODE,\n     DECODE (PE.SYMMETRY,  0,'P', 1,'S', 2,'C', 3,'') as SYMMETRY,\n           P.PART_TYPE,\n           B.CODE as BLOCK_CODE,\n           RPT_COPY_COUNT (P.OID) as NUM_EQ_PART,\n           GET_PART_DESC (P.OID, 1) as PART_DESC,\n           SUBSTR (GET_SECT_TP (prf.std_profile_oid), 1, 2) as ELEM_TYPE,\n           SUBSTR (GET_MATERIAL_CODE (PRF.STD_PROFILE_OID, 2), 1, 12) as MATERIAL,\n           PRF.LENGTH * 1000 as LENGTH,\n           STD.WEB_HEIGHT as WIDTH,\n           STD.WEB_THICKNESS  as THICKNESS,\n           RPT_GET_PART_WEIGHT (P.OID) as WEIGHT_UNIT,\n           RPT_GET_PART_WEIGHT (P.OID) * RPT_COPY_COUNT (P.OID)  as TOTAL_WEIGHT,\n           SUBSTR (GET_NEST_ID (NP.NESTING_OID, NP.NESTING_BLOCK), 1, 15) as NEST_ID,\n           NP.NUM_PART_NEST,\n           NP.NEST_LENGTH,\n           NP.NEST_WIDTH,\n           NP.NUM_EQ_NEST,\n            STD.WEB_HEIGHT as WH,\n            STD.WEB_THICKNESS as WT,\n            STD.FLANGE_HEIGHT as FH,\n            STD.FLANGE_THICKNESS as FT\n      FROM PRD_EXPL_PART PE, PRD_PART P, PRD_PROFILE PRF,  PRD_NEST_PART PNP, BLOCK B,STD_PROFILE STD, \n        (\n              select \n                     N.PART_OID,\n                     N.NESTING_OID,\n                     N.SYMM_CODE,\n                     NG.ID_SEQ_BLOCK as NESTING_BLOCK,\n                     COUNT (*) * GET_NUM_EQ_NEST (NESTING_OID) as NUM_PART_NEST,\n                     GET_NEST_HEIGHT (NESTING_OID) as NEST_LENGTH,\n                     GET_NEST_WIDTH (NESTING_OID) as NEST_WIDTH,\n                     GET_NUM_EQ_NEST (NESTING_OID) as NUM_EQ_NEST\n                        from\n                        PRD_NEST_PART N, PRD_NEST_GEN NG\n                        where \n                         NG.OID = N.NESTING_OID\n                         GROUP BY PART_OID, NESTING_OID, SYMM_CODE,  NG.ID_SEQ_BLOCK\n        )   NP \n     WHERE     \n     NP.part_oid=P.OID AND NP.SYMM_CODE=PE.SYMMETRY AND\n     PRF.PRD_PART_OID = P.OID AND PE.PRD_PART_OID=PRF.PRD_PART_OID\n           AND PNP.PART_OID=P.OID AND PNP.SYMM_CODE=PE.SYMMETRY\n           AND P.PART_TYPE IN (0, 1,2,3,6)\n                               AND P.BLOCK_OID=B.OID\n                               AND PRF.STD_PROFILE_OID=STD.OID\n          and B.DESCRIPTION like '%${drNum}%' \n                    UNION ALL\nselect P.OID as PART_OID,   PE.OID as PEOID, P.CODE  as PART_CODE,\n     DECODE (PE.SYMMETRY,  0,'P', 1,'S', 2,'C', 3,'') as SYMMETRY,\n           P.PART_TYPE,\n            B.CODE as BLOCK_CODE,\n           RPT_COPY_COUNT (P.OID) as NUM_EQ_PART,\n           SUBSTR (GET_PART_DESC (P.OID, 1), 1, 200) as PART_DESC,\n           'PL' as ELEM_TYPE,\n           SUBSTR (GET_MATERIAL_CODE (PA.MATERIAL_OID, 1), 1, 12) as MATERIAL,\n           RPT_INP_GET_PLT_DIMENSIONS (P.OID, 0) * 1000 as LENGTH,\n           RPT_INP_GET_PLT_DIMENSIONS (P.OID, 1) * 1000 as WIDTH,\n           PA.THICKNESS * 1000,\n           RPT_GET_PART_WEIGHT (P.OID) as WEIGHT_UNIT,\n           RPT_GET_PART_WEIGHT (P.OID) * RPT_COPY_COUNT (P.OID) as TOTAL_WEIGHT,\n           SUBSTR (GET_NEST_ID (NP.NESTING_OID, NP.NESTING_BLOCK), 1, 15) as NEST_ID,\n           NP.NUM_PART_NEST,\n           NP.NEST_LENGTH,\n           NP.NEST_WIDTH,\n           NP.NUM_EQ_NEST,\n           0 as WH,\n            PA.THICKNESS * 1000 as WT,\n            0 as FH,\n            0 as FT\n      FROM PRD_EXPL_PART PE, PRD_PART P, INP_PLATE_ATT_DB PA,  PRD_NEST_PART PNP, BLOCK B,\n (\n              select \n                     N.PART_OID,\n                     N.NESTING_OID,\n                     N.SYMM_CODE,\n                     NG.ID_SEQ_BLOCK as NESTING_BLOCK,\n                     COUNT (*) * GET_NUM_EQ_NEST (NESTING_OID) as NUM_PART_NEST,\n                     GET_NEST_HEIGHT (NESTING_OID) as NEST_LENGTH,\n                     GET_NEST_WIDTH (NESTING_OID) as NEST_WIDTH,\n                     GET_NUM_EQ_NEST (NESTING_OID) as NUM_EQ_NEST\n                        from\n                        PRD_NEST_PART N, PRD_NEST_GEN NG\n                        where \n                         NG.OID = N.NESTING_OID\n                         GROUP BY PART_OID, NESTING_OID, SYMM_CODE,  NG.ID_SEQ_BLOCK\n        )   NP  \n     WHERE  NP.part_oid=P.OID AND NP.SYMM_CODE=PE.SYMMETRY AND   PA.INP_PART_OID = P.OID AND PE.PRD_PART_OID=P.OID\n           AND PNP.PART_OID=P.OID AND PNP.SYMM_CODE=PE.SYMMETRY \n           AND P.PART_TYPE IN (14,\n                               15,\n                               18,\n                               20,\n                               22,\n                               23,\n                               25,\n                               26)\n                               AND P.BLOCK_OID=B.OID\n          and B.DESCRIPTION like '%${drNum}%' \n                   UNION ALL\nselect P.OID as PART_OID,   PE.OID as PEOID,  P.CODE  as PART_CODE,\n     DECODE (PE.SYMMETRY,  0,'P', 1,'S', 2,'C', 3,'') as SYMMETRY,\n           P.PART_TYPE,\n           B.CODE as BLOCK_CODE,\n           RPT_COPY_COUNT (P.OID) as NUM_EQ_PART,\n           SUBSTR (GET_PART_DESC (P.OID, 1), 1, 200) as PART_DESC,\n           SUBSTR (GET_SECT_TP (PRF.STD_SECTION_OID), 1, 2) as ELEM_TYPE,\n           SUBSTR (GET_MATERIAL_CODE (PRF.STD_SECTION_OID, 2), 1, 12) as MATERIAL,\n           RPT_GET_PART_LENGTH (P.OID) * 1000 as LENGTH,\n           GET_PRF_W_HEIGHT (PRF.STD_SECTION_OID) as WIDTH,\n           GET_PRF_W_THICK (PRF.STD_SECTION_OID),\n           RPT_GET_PART_WEIGHT (P.OID) as WEIGHT_UNIT,\n           RPT_GET_PART_WEIGHT (P.OID) * RPT_COPY_COUNT (P.OID) as TOTAL_WEIGHT,\n           SUBSTR (GET_NEST_ID (NP.NESTING_OID, NP.NESTING_BLOCK), 1, 15)  as NEST_ID,\n           NP.NUM_PART_NEST,\n           NP.NEST_LENGTH,\n           NP.NEST_WIDTH,\n           NP.NUM_EQ_NEST,\n            0 as WH,\n            GET_PRF_W_THICK (PRF.STD_SECTION_OID) as WT,\n            0 as FH,\n            0 as FT\n      FROM PRD_EXPL_PART PE, PRD_PART P, INP_LC_ATT_DB PRF,  PRD_NEST_PART PNP, BLOCK B,\n        (\n              select \n                     N.PART_OID,\n                     N.NESTING_OID,\n                     N.SYMM_CODE,\n                     NG.ID_SEQ_BLOCK as NESTING_BLOCK,\n                     COUNT (*) * GET_NUM_EQ_NEST (NESTING_OID) as NUM_PART_NEST,\n                     GET_NEST_HEIGHT (NESTING_OID) as NEST_LENGTH,\n                     GET_NEST_WIDTH (NESTING_OID) as NEST_WIDTH,\n                     GET_NUM_EQ_NEST (NESTING_OID) as NUM_EQ_NEST\n                        from\n                        PRD_NEST_PART N, PRD_NEST_GEN NG\n                        where \n                         NG.OID = N.NESTING_OID\n                         GROUP BY PART_OID, NESTING_OID, SYMM_CODE,  NG.ID_SEQ_BLOCK\n        )   NP \n     WHERE  NP.part_oid=P.OID AND NP.SYMM_CODE=PE.SYMMETRY AND PRF.INP_PART_OID = P.OID AND PE.PRD_PART_OID=  P.OID\n           AND PNP.PART_OID=P.OID AND PNP.SYMM_CODE=PE.SYMMETRY \n           AND P.PART_TYPE in (17) AND P.BLOCK_OID=B.OID\n          and B.DESCRIPTION like '%${drNum}%' \n          \n                    UNION ALL\n select P.OID as PART_OID,   PE.OID as PEOID, P.CODE  as PART_CODE,\n     DECODE (PE.SYMMETRY,  0,'P', 1,'S', 2,'C', 3,'') as SYMMETRY,\n           P.PART_TYPE,\n            B.CODE as BLOCK_CODE,\n           1 as NUM_EQ_PART,\n           GET_PART_DESC (P.OID, 1) as PART_DESC,\n           'PL' as ELEM_TYPE,\n           PA.MATQ as MATERIAL,\n           RPT_AS_GET_PLT_DIMENSIONS (P.OID, 0) * 1000 as LENGTH,\n           RPT_AS_GET_PLT_DIMENSIONS (P.OID, 1) * 1000 as WIDTH,\n           PA.THICKNESS,\n           PE.WEIGHT as WEIGHT_UNIT,\n           PE.WEIGHT as TOTAL_WEIGHT,\n           SUBSTR (GET_NEST_ID (NP.NESTING_OID, NP.NESTING_BLOCK), 1, 15)  as NEST_ID,\n           NP.NUM_PART_NEST,\n           NP.NEST_LENGTH,\n           NP.NEST_WIDTH,\n           NP.NUM_EQ_NEST,\n            0 as WH,\n            PA.THICKNESS as WT,\n            0 as FH,\n            0 as FT\n      FROM PRD_PART               P,\n           AS_STD_PART_PLATE      PA,\n           PRD_EXPL_PART          PE , PRD_NEST_PART PNP , BLOCK B,\n        (\n              select \n                     N.PART_OID,\n                     N.NESTING_OID,\n                     N.SYMM_CODE,\n                     NG.ID_SEQ_BLOCK as NESTING_BLOCK,\n                     COUNT (*) * GET_NUM_EQ_NEST (NESTING_OID) as NUM_PART_NEST,\n                     GET_NEST_HEIGHT (NESTING_OID) as NEST_LENGTH,\n                     GET_NEST_WIDTH (NESTING_OID) as NEST_WIDTH,\n                     GET_NUM_EQ_NEST (NESTING_OID) as NUM_EQ_NEST\n                        from\n                        PRD_NEST_PART N, PRD_NEST_GEN NG\n                        where \n                         NG.OID = N.NESTING_OID\n                         GROUP BY PART_OID, NESTING_OID, SYMM_CODE,  NG.ID_SEQ_BLOCK\n        )   NP \n     WHERE   NP.part_oid=P.OID AND   NP.SYMM_CODE=PE.SYMMETRY AND  PA.OID = P.OID\n           AND PNP.PART_OID=P.OID AND PNP.SYMM_CODE=PE.SYMMETRY \n           AND PE.PRD_PART_OID = P.OID\n           AND P.PART_TYPE = 12 AND P.BLOCK_OID=B.OID\n          and B.DESCRIPTION like '%${drNum}%' \n          \n                    UNION ALL\nselect P.OID as PART_OID,   PE.OID as PEOID,  P.CODE  as PART_CODE,\n     DECODE (PE.SYMMETRY,  0,'P', 1,'S', 2,'C', 3,'') as SYMMETRY,\n           P.PART_TYPE,\n            B.CODE as BLOCK_CODE,\n           1 as NUM_EQ_PART,\n           GET_PART_DESC (P.OID, 1) as PART_DESC,\n           DECODE (STD.SECTION,\n                   -1, '',\n                   0, 'FS',\n                   1, 'AS',\n                   2, 'IS',\n                   3, 'TS',\n                   4, 'US',\n                   5, 'BS',\n                   6, 'ST',\n                   7, 'AT',\n                   8, 'OS',\n                   9, 'PS',\n                   10, 'RS',\n                   11, 'MC',\n                   12, 'DB',\n                   13, 'SR',\n                   14, 'HR',\n                   15, 'LI',\n                   16, 'ZL',\n                   17, 'TL',\n                   '') as ELEM_TYPE,\n           SUBSTR (GET_MATERIAL_CODE (STD.MATERIAL_OID, 1), 1, 12) as MATERIAL,\n           PRF.LENGTH as LENGTH,\n           STD.WEB_HEIGHT as WIDTH,\n           STD.WEB_THICKNESS,\n           PE.WEIGHT as WEIGHT_UNIT,\n           PE.WEIGHT as TOTAL_WEIGHT,\n           SUBSTR (GET_NEST_ID (NP.NESTING_OID, NP.NESTING_BLOCK), 1, 15)  as NEST_ID,\n           NP.NUM_PART_NEST,\n           NP.NEST_LENGTH,\n           NP.NEST_WIDTH,\n           NP.NUM_EQ_NEST,\n            STD.WEB_HEIGHT as WH,\n            STD.WEB_THICKNESS as WT,\n            STD.FLANGE_HEIGHT as FH,\n            STD.FLANGE_THICKNESS as FT\n      FROM PRD_PART               P,\n           AS_STD_PART_PROF       PRF,\n           STD_PROFILE            STD,\n           PRD_EXPL_PART          PE, PRD_NEST_PART PNP, BLOCK B,\n        (\n              select \n                     N.PART_OID,\n                     N.NESTING_OID,\n                     N.SYMM_CODE,\n                     NG.ID_SEQ_BLOCK as NESTING_BLOCK,\n                     COUNT (*) * GET_NUM_EQ_NEST (NESTING_OID) as NUM_PART_NEST,\n                     GET_NEST_HEIGHT (NESTING_OID) as NEST_LENGTH,\n                     GET_NEST_WIDTH (NESTING_OID) as NEST_WIDTH,\n                     GET_NUM_EQ_NEST (NESTING_OID) as NUM_EQ_NEST\n                        from\n                        PRD_NEST_PART N, PRD_NEST_GEN NG\n                        where \n                         NG.OID = N.NESTING_OID\n                         GROUP BY PART_OID, NESTING_OID, SYMM_CODE,  NG.ID_SEQ_BLOCK\n        )   NP \n     WHERE  NP.part_oid=P.OID AND  NP.SYMM_CODE=PE.SYMMETRY AND   PRF.OID = P.OID\n           AND PE.PRD_PART_OID = P.OID\n           AND STD.KSE = PRF.KSE\n           AND PNP.PART_OID=P.OID AND PNP.SYMM_CODE=PE.SYMMETRY\n           AND P.PART_TYPE = 7 AND P.BLOCK_OID=B.OID\n          and B.DESCRIPTION like '%${drNum}%' \n          \n          \n          UNION ALL\n select P.OID as PART_OID,   PE.OID as PEOID,  P.CODE  as PART_CODE,\n     DECODE (PE.SYMMETRY,  0,'P', 1,'S', 2,'C', 3,'') as SYMMETRY,\n           P.PART_TYPE,\n            B.CODE as BLOCK_CODE,\n           RPT_COPY_COUNT (P.OID) as NUM_EQ_PART,\n           GET_PART_DESC (P.OID, 1) as PART_DESC,\n           'PL' as ELEM_TYPE,\n           SUBSTR (GET_MATERIAL_CODE (PA.MATERIAL_OID, 1), 1, 12) as MATERIAL,\n           RPT_GET_SD_PLATE_DIM (P.OID, 0) as LENGTH,\n           RPT_GET_SD_PLATE_DIM (P.OID, 1) as WIDTH,\n           PA.THICKNESS,\n           RPT_GET_PART_WEIGHT (P.OID) as WEIGHT_UNIT,\n           RPT_GET_PART_WEIGHT (P.OID) * RPT_COPY_COUNT (P.OID) as TOTAL_WEIGHT,\n           NULL  as NEST_ID,\n           0,\n           0,\n           0,\n           0,\n            0 as WH,\n            PA.THICKNESS as WT,\n            0 as FH,\n            0 as FT\n      FROM V_RPT_PART_NO_NESTING_SD P, V_RPT_SHDK_PLATE_ATT PA,PRD_EXPL_PART PE, BLOCK B\n     WHERE PA.PRD_PART_OID = P.OID AND PE.PRD_PART_OID=  P.OID AND P.BLOCK_OID=B.OID\n          and B.DESCRIPTION like '%${drNum}%' \n          \n          UNION ALL\n    select P.OID as PART_OID,   PE.OID as PEOID,  P.CODE  as PART_CODE,\n     DECODE (PE.SYMMETRY,  0,'P', 1,'S', 2,'C', 3,'') as SYMMETRY,\n           P.PART_TYPE,\n          B.CODE as BLOCK_CODE,\n           RPT_COPY_COUNT (P.OID) as NUM_EQ_PART,\n           GET_PART_DESC (P.OID, 1) as PART_DESC,\n           SUBSTR (GET_SECT_TP (prf.std_profile_oid), 1, 2) as ELEM_TYPE,\n           SUBSTR (GET_MATERIAL_CODE (PRF.STD_PROFILE_OID, 2), 1, 12) as MATERIAL,\n           PRF.LENGTH * 1000 as LENGTH,\n           STD.WEB_HEIGHT as WIDTH,\n           STD.WEB_THICKNESS as THICKNESS,\n           RPT_GET_PART_WEIGHT (P.OID) as WEIGHT_UNIT,\n           RPT_GET_PART_WEIGHT (P.OID) * RPT_COPY_COUNT (P.OID) as TOTAL_WEIGHT,\n           NULL  as NEST_ID,\n           0,\n           0,\n           0,\n           0,\n            STD.WEB_HEIGHT as WH,\n            STD.WEB_THICKNESS as WT,\n            STD.FLANGE_HEIGHT as FH,\n            STD.FLANGE_THICKNESS as FT\n      FROM PRD_EXPL_PART PE, V_PRD_PART_NO_NESTING P, PRD_PROFILE PRF, BLOCK B,STD_PROFILE STD\n     WHERE     PRF.PRD_PART_OID = P.OID AND PE.PRD_PART_OID=  P.OID\n           AND P.PART_TYPE IN (0,\n                               1,\n                               2,\n                               3,\n                               6)\n                               AND PRF.STD_PROFILE_OID=STD.OID\n                               AND P.BLOCK_OID=B.OID\n          and B.DESCRIPTION like '%${drNum}%' \n          \n          UNION ALL\n    select P.OID as PART_OID,   PE.OID as PEOID,  P.CODE  as PART_CODE,\n     DECODE (PE.SYMMETRY,  0,'P', 1,'S', 2,'C', 3,'') as SYMMETRY,\n           P.PART_TYPE,\n            B.CODE as BLOCK_CODE,\n           RPT_COPY_COUNT (P.OID) as NUM_EQ_PART,\n           SUBSTR (GET_PART_DESC (P.OID, 1), 1, 200) as PART_DESC,\n           'PL' as ELEM_TYPE,\n           SUBSTR (GET_MATERIAL_CODE (PA.MATERIAL_OID, 1), 1, 12) as MATERIAL,\n           RPT_INP_GET_PLT_DIMENSIONS (INP_PART_OID, 0) * 1000 as LENGTH,\n           RPT_INP_GET_PLT_DIMENSIONS (INP_PART_OID, 1) * 1000 as WIDTH,\n           PA.THICKNESS * 1000,\n           RPT_GET_PART_WEIGHT (P.OID) as WEIGHT_UNIT,\n           RPT_GET_PART_WEIGHT (P.OID) * RPT_COPY_COUNT (P.OID) as TOTAL_WEIGHT,\n           NULL  as NEST_ID,\n           0,\n           0,\n           0,\n           0,\n            0 as WH,\n            PA.THICKNESS as WT,\n            0 as FH,\n            0 as FT\n      FROM PRD_EXPL_PART PE,V_PRD_PART_NO_NESTING P, INP_PLATE_ATT_DB PA, BLOCK B\n     WHERE     PA.INP_PART_OID = P.OID AND PE.PRD_PART_OID=  P.OID\n           AND P.PART_TYPE IN (14,\n                               15,\n                               18,\n                               20,\n                               22,\n                               23,\n                               25,\n                               26)AND P.BLOCK_OID=B.OID\n          and B.DESCRIPTION like '%${drNum}%' \n          \n          UNION ALL\nselect P.OID as PART_OID,   PE.OID as PEOID,  P.CODE  as PART_CODE,\n     DECODE (PE.SYMMETRY,  0,'P', 1,'S', 2,'C', 3,'') as SYMMETRY,\n           P.PART_TYPE,\n           B.CODE as BLOCK_CODE,\n           RPT_COPY_COUNT (P.OID) as NUM_EQ_PART,\n           SUBSTR (GET_PART_DESC (P.OID, 1), 1, 200) as PART_DESC,\n           SUBSTR (GET_SECT_TP (prf.std_profile_oid), 1, 2) as ELEM_TYPE,\n           SUBSTR (GET_MATERIAL_CODE (PRF.STD_PROFILE_OID, 2), 1, 12) as MATERIAL,\n           RPT_GET_PART_LENGTH (P.OID) * 1000 as LENGTH,\n           STD.WEB_HEIGHT as WIDTH,\n           STD.WEB_THICKNESS,\n           RPT_GET_PART_WEIGHT (P.OID) as WEIGHT_UNIT,\n           RPT_GET_PART_WEIGHT (P.OID) * RPT_COPY_COUNT (P.OID) as TOTAL_WEIGHT,\n           NULL  as NEST_ID,\n           0,\n           0,\n           0,\n           0,\n            STD.WEB_HEIGHT as WH,\n            STD.WEB_THICKNESS as WT,\n            STD.FLANGE_HEIGHT as FH,\n            STD.FLANGE_THICKNESS as FT\n      FROM PRD_EXPL_PART PE,V_PRD_PART_NO_NESTING P, INP_PROFILE_ATT_DB PRF, BLOCK B,STD_PROFILE STD\n     WHERE     PRF.INP_PART_OID = P.OID AND PE.PRD_PART_OID=  P.OID AND PRF.STD_PROFILE_OID=STD.OID\n           AND P.PART_TYPE IN (16,\n                               19,\n                               21,\n                               24)AND P.BLOCK_OID=B.OID\n          and B.DESCRIPTION like '%${drNum}%' \n          UNION ALL\n select P.OID as PART_OID,   PE.OID as PEOID,  P.CODE  as PART_CODE,\n     DECODE (PE.SYMMETRY,  0,'P', 1,'S', 2,'C', 3,'') as SYMMETRY,\n           P.PART_TYPE,\n           B.CODE as BLOCK_CODE,\n           RPT_COPY_COUNT (P.OID) as NUM_EQ_PART,\n           SUBSTR (GET_PART_DESC (P.OID, 1), 1, 200) as PART_DESC,\n           SUBSTR (GET_SECT_TP (PRF.STD_SECTION_OID), 1, 2) as ELEM_TYPE,\n           SUBSTR (GET_MATERIAL_CODE (PRF.STD_SECTION_OID, 2), 1, 12) as MATERIAL,\n           RPT_GET_PART_LENGTH (P.OID) * 1000 as LENGTH,\n           GET_PRF_W_HEIGHT (PRF.STD_SECTION_OID) as WIDTH,\n           GET_PRF_W_THICK (PRF.STD_SECTION_OID),\n           RPT_GET_PART_WEIGHT (P.OID) as WEIGHT_UNIT,\n           RPT_GET_PART_WEIGHT (P.OID) * RPT_COPY_COUNT (P.OID) as TOTAL_WEIGHT,\n           NULL  as NEST_ID,\n           0,\n           0,\n           0,\n           0,\n            0 as WH,\n            GET_PRF_W_THICK (PRF.STD_SECTION_OID) as WT,\n            0 as FH,\n            0 as FT\n      FROM PRD_EXPL_PART PE,V_PRD_PART_NO_NESTING P, INP_LC_ATT_DB PRF, BLOCK B\n     WHERE PRF.INP_PART_OID = P.OID AND P.PART_TYPE = 17 AND PE.PRD_PART_OID=  P.OID AND P.BLOCK_OID=B.OID\n          and B.DESCRIPTION like '%${drNum}%' \n          \n          UNION ALL\n select P.OID as PART_OID,   PE.OID as PEOID,  P.CODE,\n     DECODE (PE.SYMMETRY,  0,'P', 1,'S', 2,'C', 3,'') as SYMMETRY,\n           P.PART_TYPE,\n            B.CODE as BLOCK_CODE,\n           1 as NUM_EQ_PART,\n           GET_PART_DESC (P.OID, 1) as PART_DESC,\n           'PL' as ELEM_TYPE,\n           PA.MATQ as MATERIAL,\n           RPT_AS_GET_PLT_DIMENSIONS (P.OID, 0) * 1000 as LENGTH,\n           RPT_AS_GET_PLT_DIMENSIONS (P.OID, 1) * 1000 as WIDTH,\n           PA.THICKNESS,\n           PE.WEIGHT as WEIGHT_UNIT,\n           PE.WEIGHT as TOTAL_WEIGHT,\n           NULL  as NEST_ID,\n           0,\n           0,\n           0,\n           0,\n            0 as WH,\n            PA.THICKNESS as WT,\n            0 as FH,\n            0 as FT\n      FROM V_PRD_PART_NO_NESTING P, AS_STD_PART_PLATE PA, PRD_EXPL_PART PE, BLOCK B\n     WHERE PA.OID = P.OID AND PE.PRD_PART_OID = P.OID AND P.PART_TYPE = 12  AND P.BLOCK_OID=B.OID\n          and B.DESCRIPTION like '%${drNum}%' \n          UNION ALL\nselect  PE.PRD_PART_OID as PART_OID,  PE.OID as PEOID,  P.CODE as PART_CODE,\n     DECODE (PE.SYMMETRY,  0,'P', 1,'S', 2,'C', 3,'') as SYMMETRY,\n           P.PART_TYPE,\n         B.CODE as BLOCK_CODE,\n           1 as NUM_EQ_PART,\n           GET_PART_DESC (P.OID, 1) as PART_DESC,\n           'PL' as ELEM_TYPE,\n           PA.MATQ as MATERIAL,\n           RPT_AS_GET_PLT_DIMENSIONS (P.OID, 0) * 1000 as LENGTH,\n           RPT_AS_GET_PLT_DIMENSIONS (P.OID, 1) * 1000 as WIDTH,\n           PA.THICKNESS,\n           PE.WEIGHT as WEIGHT_UNIT,\n           PE.WEIGHT as TOTAL_WEIGHT,\n           NULL  as NEST_ID,\n           0,\n           0,\n           0,\n           0,\n            0 as WH,\n            PA.THICKNESS as WT,\n            0 as FH,\n            0 as FT\n      FROM V_PRD_PART_NO_NESTING P, AS_PART_CONT_PLATE PA, PRD_EXPL_PART PE, BLOCK B\n     WHERE PA.OID = P.OID AND PE.PRD_PART_OID = P.OID AND P.PART_TYPE = 12  AND P.BLOCK_OID=B.OID\n          and B.DESCRIPTION like '%${drNum}%' \n          UNION ALL\nselect P.OID as PART_OID,   PE.OID as PEOID, P.CODE as PART_CODE,\n     DECODE (PE.SYMMETRY,  0,'P', 1,'S', 2,'C', 3,'') as SYMMETRY,\n           P.PART_TYPE,\n           B.CODE as BLOCK_CODE,\n           1 as NUM_EQ_PART,\n           GET_PART_DESC (P.OID, 1) as PART_DESC,\n           DECODE (STD.SECTION,\n                   -1, '',\n                   0, 'FS',\n                   1, 'AS',\n                   2, 'IS',\n                   3, 'TS',\n                   4, 'US',\n                   5, 'BS',\n                   6, 'ST',\n                   7, 'AT',\n                   8, 'OS',\n                   9, 'PS',\n                   10, 'RS',\n                   11, 'MC',\n                   12, 'DB',\n                   13, 'SR',\n                   14, 'HR',\n                   15, 'LI',\n                   16, 'ZL',\n                   17, 'TL',\n                   '') as ELEM_TYPE,\n           SUBSTR (GET_MATERIAL_CODE (STD.MATERIAL_OID, 1), 1, 12) as MATERIAL,\n           PRF.LENGTH as LENGTH,\n           STD.WEB_HEIGHT as WIDTH,\n           STD.WEB_THICKNESS,\n           PE.WEIGHT as WEIGHT_UNIT,\n           PE.WEIGHT as TOTAL_WEIGHT,\n           NULL  as NEST_ID,\n           0,\n           0,\n           0,\n           0,\n            STD.WEB_HEIGHT as WH,\n            STD.WEB_THICKNESS as WT,\n            STD.FLANGE_HEIGHT as FH,\n            STD.FLANGE_THICKNESS as FT\n      FROM V_PRD_PART_NO_NESTING  P,\n           AS_STD_PART_PROF       PRF,\n           STD_PROFILE            STD,\n           PRD_EXPL_PART          PE, BLOCK B\n     WHERE     PRF.OID = P.OID\n           AND PE.PRD_PART_OID = P.OID\n           AND STD.KSE = PRF.KSE\n           AND P.PART_TYPE = 7\n             AND P.BLOCK_OID=B.OID\n          and B.DESCRIPTION like '%${drNum}%' \n                  ) P\n                  where p.part_code='${partName}'\norder by P.PART_CODE,P.SYMMETRY"

  def ForanPartLabelByDrawingNumAndPartName(project: String, drNum: String, partName: String): List[PrdPart] = {
    ConnectionManager.connectionByProject(project) match {
      case Some(connection) => {
        try {
          connection.setAutoCommit(false)
          val stmt: Statement = connection.createStatement()
          val sql = partsByDrawingNumAndPartName(drNum,partName)
          val rs: ResultSet = stmt.executeQuery(sql)
          val ret = ListBuffer.empty[PrdPart]
          while (rs.next()) {
            ret += PrdPart(
              Option(rs.getInt("PART_OID")).getOrElse(0),
              Option(rs.getInt("EXPL_OID")).getOrElse(0),
              Option(rs.getString("PART_CODE")).getOrElse(""),
              Option(rs.getString("SYMMETRY")).getOrElse(""),
              Option(rs.getInt("PART_TYPE")).getOrElse(0),
              Option(rs.getString("BLOCK_CODE")).getOrElse(""),
              Option(rs.getString("DESCRIPTION")).getOrElse(""),
              Option(rs.getInt("NUM_EQ_PART")).getOrElse(0),
              Option(rs.getString("PART_DESC")).getOrElse(""),
              Option(rs.getString("ELEM_TYPE")).getOrElse(""),
              Option(rs.getString("MATERIAL")).getOrElse(""),
              Option(rs.getDouble("LENGTH")).getOrElse(0.0),
              Option(rs.getDouble("WIDTH")).getOrElse(0.0),
              Option(rs.getDouble("THICKNESS")).getOrElse(0.0),
              Option(rs.getDouble("WEIGHT_UNIT")).getOrElse(0.0),
              Option(rs.getDouble("TOTAL_WEIGHT")).getOrElse(0.0),
              Option(rs.getString("NEST_ID")).getOrElse(""),
              Option(rs.getDouble("NEST_LENGTH")).getOrElse(0.0),
              Option(rs.getDouble("NEST_WIDTH")).getOrElse(0.0),
              Option(rs.getInt("NUM_EQ_NEST")).getOrElse(0),
              Option(rs.getDouble("WH")).getOrElse(0.0),
              Option(rs.getDouble("WT")).getOrElse(0.0),
              Option(rs.getDouble("FH")).getOrElse(0.0),
              Option(rs.getDouble("FT")).getOrElse(0.0)
            )
          }

          stmt.close()
          connection.close()
          ret.toList
        }
        catch {
          case _: Throwable =>
            connection.close()
            List.empty[PrdPart]
        }
      }
      case None => List.empty[PrdPart]
    }
  }


  def ForanPartsByDrawingNum(project: String, drNum: String): List[PrdPart] = {
    ConnectionManager.connectionByProject(project) match {
      case Some(connection) => {
        try {
          connection.setAutoCommit(false)
          val stmt: Statement = connection.createStatement()
          val sql = partsByDrawingNum(drNum)
          val rs: ResultSet = stmt.executeQuery(sql)
          val ret = ListBuffer.empty[PrdPart]
          while (rs.next()) {
            ret += PrdPart(
              Option(rs.getInt("PART_OID")).getOrElse(0),
              Option(rs.getInt("QTY")).getOrElse(0),
              Option(rs.getString("PART_CODE")).getOrElse(""),
              Option(rs.getString("SYMMETRY")).getOrElse(""),
              Option(rs.getInt("PART_TYPE")).getOrElse(0),
              Option(rs.getString("BLOCK_CODE")).getOrElse(""),
              Option(rs.getString("DESCRIPTION")).getOrElse(""),
              Option(rs.getInt("NUM_EQ_PART")).getOrElse(0),
              Option(rs.getString("PART_DESC")).getOrElse(""),
              Option(rs.getString("ELEM_TYPE")).getOrElse(""),
              Option(rs.getString("MATERIAL")).getOrElse(""),
              Option(rs.getDouble("LENGTH")).getOrElse(0.0),
              Option(rs.getDouble("WIDTH")).getOrElse(0.0),
              Option(rs.getDouble("THICKNESS")).getOrElse(0.0),
              Option(rs.getDouble("WEIGHT_UNIT")).getOrElse(0.0),
              Option(rs.getDouble("TOTAL_WEIGHT")).getOrElse(0.0),
              Option(rs.getString("NEST_ID")).getOrElse(""),
              Option(rs.getDouble("NEST_LENGTH")).getOrElse(0.0),
              Option(rs.getDouble("NEST_WIDTH")).getOrElse(0.0),
              Option(rs.getInt("NUM_EQ_NEST")).getOrElse(0),
              Option(rs.getDouble("WH")).getOrElse(0.0),
              Option(rs.getDouble("WT")).getOrElse(0.0),
              Option(rs.getDouble("FH")).getOrElse(0.0),
              Option(rs.getDouble("FT")).getOrElse(0.0),
              Option(rs.getString("STRGROUP")).getOrElse(""),
              Option(rs.getString("STOCK_CODE")).getOrElse("")
            )
          }

          stmt.close()
          connection.close()
          ret.toList
        }
        catch {
          case _: Throwable =>
            connection.close()
            List.empty[PrdPart]
        }
      }
      case None => List.empty[PrdPart]
    }
  }


}
