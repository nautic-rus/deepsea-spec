package local.hull

import local.hull.PartManager.PrdPart
import local.sql.ConnectionManager

import java.sql.{ResultSet, Statement}
import scala.collection.mutable.ListBuffer

trait PartHelper {

  //private def partsByDrawingNum(drNum: String): String = s"select\n(select OID from V_PRD_PART where BLOCK_NAME=PNL.BLOCK_CODE AND PART_NAME=PNL.PART_CODE) as OID,\nPNL.PART_CODE,\nPNL.PART_TYPE,\nPNL.BLOCK_CODE,\nB.DESCRIPTION,\nPNL.NUM_EQ_PART,\nPNL.PART_DESC,\nPNL.ELEM_TYPE,\nPNL.MATERIAL,\nPNL.LENGTH,\nPNL.WIDTH,\nPNL.THICKNESS,\nPNL.WEIGHT_UNIT,\nPNL.TOTAL_WEIGHT,\nPNL.NEST_ID,\nPNL.NUM_PART_NEST,\nPNL.NEST_LENGTH,\nPNL.NEST_WIDTH,\nPNL.NUM_EQ_NEST,\n(select KSE_KPL from V_PRD_PLPRF_MAT where NEST_ID=PNL.NEST_ID) as KSE_KPL,\n(select STOCK_CODE0 from STD_PROFILE where kse=(select KSE_KPL from V_PRD_PLPRF_MAT where NEST_ID=PNL.NEST_ID)) as STOCK1,\n(select STORAGE_CODE from STD_PLATE where kpl=(select KSE_KPL from V_PRD_PLPRF_MAT where NEST_ID=PNL.NEST_ID)) as STOCK2\nfrom V_PRD_PART_NEST_LIST PNL, BLOCK B\nwhere \nPNL.BLOCK_CODE=B.CODE AND\nB.DESCRIPTION like '%${drNum}%'"


  private def partsByDrawingNum(drNum: String): String = s"select distinct\n(select OID from V_PRD_PART where BLOCK_NAME=PNL.BLOCK_CODE AND PART_NAME=PNL.PART_CODE) as PART_OID,\nPNL.PEOID as EXPL_OID,\nPNL.PART_CODE,\nPNL.SYMMETRY,\nPNL.PART_TYPE,\nPNL.BLOCK_CODE,\nB.DESCRIPTION,\nPNL.NUM_EQ_PART,\nPNL.PART_DESC,\nPNL.ELEM_TYPE,\nPNL.MATERIAL,\nPNL.LENGTH,\nPNL.WIDTH,\nPNL.THICKNESS,\nPNL.WEIGHT_UNIT,\nPNL.TOTAL_WEIGHT,\nPNL.NEST_ID,\nPNL.NUM_PART_NEST,\nPNL.NEST_LENGTH,\nPNL.NEST_WIDTH,\nPNL.NUM_EQ_NEST,\n(select KSE_KPL from V_PRD_PLPRF_MAT where NEST_ID=PNL.NEST_ID) as KSE_KPL,\n(select STOCK_CODE0 from STD_PROFILE where kse=(select KSE_KPL from V_PRD_PLPRF_MAT where NEST_ID=PNL.NEST_ID)) as STOCK1,\n(select STORAGE_CODE from STD_PLATE where kpl=(select KSE_KPL from V_PRD_PLPRF_MAT where NEST_ID=PNL.NEST_ID)) as STOCK2\nfrom\n(\nselect   \n    PEOID,\n    PART_CODE,\n    SYMMETRY,\n    PART_TYPE,\n    BLOCK_CODE,\n    NUM_EQ_PART,\n    PART_DESC,\n    ELEM_TYPE,\n    MATERIAL,\n    LENGTH,\n    WIDTH,\n    THICKNESS,\n    WEIGHT_UNIT,\n    TOTAL_WEIGHT,\n    NEST_ID,\n    NUM_PART_NEST,\n    NEST_LENGTH,\n    NEST_WIDTH,\n    NUM_EQ_NEST\nfrom \n(\n select      \n PE.OID as PEOID,\n P.CODE as PART_CODE,\n           DECODE (PE.SYMMETRY,  0,'P', 1,'S', 2,'C', 3,'') as SYMMETRY,\n           P.PART_TYPE,\n           SUBSTR (GET_BLOCK_CODE (P.BLOCK_OID), 1, 12) as BLOCK_CODE,\n           RPT_COPY_COUNT (P.OID) as NUM_EQ_PART,\n           GET_PART_DESC (P.OID, 1) as PART_DESC,\n           'PL' as ELEM_TYPE,\n           SUBSTR (GET_MATERIAL_CODE (PA.MATERIAL_OID, 1), 1, 12) as MATERIAL,\n           RPT_GET_SD_PLATE_DIM (P.OID, 0) as LENGTH,\n           RPT_GET_SD_PLATE_DIM (P.OID, 1) as WIDTH,\n           PA.THICKNESS,\n           RPT_GET_PART_WEIGHT (P.OID) as WEIGHT_UNIT,\n           RPT_GET_PART_WEIGHT (P.OID) * RPT_COPY_COUNT (P.OID) as TOTAL_WEIGHT,\n           SUBSTR (GET_NEST_ID (NP.NESTING_OID, NP.NESTING_BLOCK), 1, 15) as NEST_ID ,\n           NP.NUM_PART_NEST,\n           NP.NEST_LENGTH,\n           NP.NEST_WIDTH,\n           NP.NUM_EQ_NEST\n      FROM PRD_EXPL_PART PE,  PRD_PART P, V_RPT_SHDK_PLATE_ATT PA, V_RPT_NEST_PART_GROUP NP, PRD_NEST_PART PNP\n     WHERE     PA.PRD_PART_OID = P.OID AND PE.PRD_PART_OID =PA.PRD_PART_OID\n           AND PNP.PART_OID=P.OID AND PNP.SYMM_CODE=PE.SYMMETRY AND NP.NESTING_OID = PNP.NESTING_OID\n           AND P.PART_TYPE IN (9, 10)\n    UNION ALL\n    select    PE.OID as PEOID, P.CODE  as PART_CODE,\n     DECODE (PE.SYMMETRY,  0,'P', 1,'S', 2,'C', 3,'') as SYMMETRY,\n           P.PART_TYPE,\n           SUBSTR (GET_BLOCK_CODE (P.BLOCK_OID), 1, 12) as BLOCK_CODE,\n           RPT_COPY_COUNT (P.OID) as NUM_EQ_PART,\n           GET_PART_DESC (P.OID, 1) as PART_DESC,\n           SUBSTR (GET_SECT_TP (prf.std_profile_oid), 1, 2) as ELEM_TYPE,\n           SUBSTR (GET_MATERIAL_CODE (PRF.STD_PROFILE_OID, 2), 1, 12) as MATERIAL,\n           PRF.LENGTH * 1000 as LENGTH,\n           GET_PRF_W_HEIGHT (PRF.STD_PROFILE_OID) as WIDTH,\n           GET_PRF_W_THICK (PRF.STD_PROFILE_OID),\n           RPT_GET_PART_WEIGHT (P.OID) as WEIGHT_UNIT,\n           RPT_GET_PART_WEIGHT (P.OID) * RPT_COPY_COUNT (P.OID)  as TOTAL_WEIGHT,\n           SUBSTR (GET_NEST_ID (NP.NESTING_OID, NP.NESTING_BLOCK), 1, 15) as NEST_ID,\n           NP.NUM_PART_NEST,\n           NP.NEST_LENGTH,\n           NP.NEST_WIDTH,\n           NP.NUM_EQ_NEST\n      FROM PRD_EXPL_PART PE, PRD_PART P, PRD_PROFILE PRF, V_RPT_NEST_PART_GROUP NP, PRD_NEST_PART PNP\n     WHERE     PRF.PRD_PART_OID = P.OID AND PE.PRD_PART_OID=PRF.PRD_PART_OID\n           AND PNP.PART_OID=P.OID AND PNP.SYMM_CODE=PE.SYMMETRY AND NP.NESTING_OID = PNP.NESTING_OID\n           AND P.PART_TYPE IN (0,\n                               1,\n                               2,\n                               3,\n                               6)\n    UNION ALL\n    select   PE.OID as PEOID, P.CODE  as PART_CODE,\n     DECODE (PE.SYMMETRY,  0,'P', 1,'S', 2,'C', 3,'') as SYMMETRY,\n           P.PART_TYPE,\n           SUBSTR (GET_BLOCK_CODE (P.BLOCK_OID), 1, 12) as BLOCK_CODE,\n           RPT_COPY_COUNT (P.OID) as NUM_EQ_PART,\n           SUBSTR (GET_PART_DESC (P.OID, 1), 1, 200) as PART_DESC,\n           'PL' as ELEM_TYPE,\n           SUBSTR (GET_MATERIAL_CODE (PA.MATERIAL_OID, 1), 1, 12) as MATERIAL,\n           RPT_INP_GET_PLT_DIMENSIONS (P.OID, 0) * 1000 as LENGTH,\n           RPT_INP_GET_PLT_DIMENSIONS (P.OID, 1) * 1000 as WIDTH,\n           PA.THICKNESS * 1000,\n           RPT_GET_PART_WEIGHT (P.OID) as WEIGHT_UNIT,\n           RPT_GET_PART_WEIGHT (P.OID) * RPT_COPY_COUNT (P.OID) as TOTAL_WEIGHT,\n           SUBSTR (GET_NEST_ID (NP.NESTING_OID, NP.NESTING_BLOCK), 1, 15) as NEST_ID,\n           NP.NUM_PART_NEST,\n           NP.NEST_LENGTH,\n           NP.NEST_WIDTH,\n           NP.NUM_EQ_NEST\n      FROM PRD_EXPL_PART PE, PRD_PART P, INP_PLATE_ATT_DB PA, V_RPT_NEST_PART_GROUP NP, PRD_NEST_PART PNP\n     WHERE     PA.INP_PART_OID = P.OID AND PE.PRD_PART_OID=P.OID\n           AND PNP.PART_OID=P.OID AND PNP.SYMM_CODE=PE.SYMMETRY AND NP.NESTING_OID = PNP.NESTING_OID\n           AND P.PART_TYPE IN (14,\n                               15,\n                               18,\n                               20,\n                               22,\n                               23,\n                               25,\n                               26)\n    UNION ALL\n    select   PE.OID as PEOID, P.CODE  as PART_CODE,\n     DECODE (PE.SYMMETRY,  0,'P', 1,'S', 2,'C', 3,'') as SYMMETRY,\n           P.PART_TYPE,\n           SUBSTR (GET_BLOCK_CODE (P.BLOCK_OID), 1, 12) as BLOCK_CODE,\n           RPT_COPY_COUNT (P.OID) as NUM_EQ_PART,\n           SUBSTR (GET_PART_DESC (P.OID, 1), 1, 200) as PART_DESC,\n           SUBSTR (GET_SECT_TP (prf.std_profile_oid), 1, 2) as ELEM_TYPE,\n           SUBSTR (GET_MATERIAL_CODE (PRF.STD_PROFILE_OID, 2), 1, 12) as MATERIAL,\n           RPT_GET_PART_LENGTH (P.OID) * 1000 as LENGTH,\n           GET_PRF_W_HEIGHT (PRF.STD_PROFILE_OID) as WIDTH,\n           GET_PRF_W_THICK (PRF.STD_PROFILE_OID),\n           RPT_GET_PART_WEIGHT (P.OID) as WEIGHT_UNIT,\n           RPT_GET_PART_WEIGHT (P.OID) * RPT_COPY_COUNT (P.OID) as TOTAL_WEIGHT,\n           SUBSTR (GET_NEST_ID (NP.NESTING_OID, NP.NESTING_BLOCK), 1, 15)  as NEST_ID,\n           NP.NUM_PART_NEST,\n           NP.NEST_LENGTH,\n           NP.NEST_WIDTH,\n           NP.NUM_EQ_NEST\n      FROM PRD_EXPL_PART PE, PRD_PART P, INP_PROFILE_ATT_DB PRF, V_RPT_NEST_PART_GROUP NP, PRD_NEST_PART PNP\n     WHERE     PRF.INP_PART_OID = P.OID AND PE.PRD_PART_OID= P.OID\n           AND PNP.PART_OID=P.OID AND PNP.SYMM_CODE=PE.SYMMETRY AND NP.NESTING_OID = PNP.NESTING_OID\n           AND P.PART_TYPE IN (16,\n                               19,\n                               21,\n                               24)\n    UNION ALL\n    select   PE.OID as PEOID,  P.CODE  as PART_CODE,\n     DECODE (PE.SYMMETRY,  0,'P', 1,'S', 2,'C', 3,'') as SYMMETRY,\n           P.PART_TYPE,\n           SUBSTR (GET_BLOCK_CODE (P.BLOCK_OID), 1, 12) as BLOCK_CODE,\n           RPT_COPY_COUNT (P.OID) as NUM_EQ_PART,\n           SUBSTR (GET_PART_DESC (P.OID, 1), 1, 200) as PART_DESC,\n           SUBSTR (GET_SECT_TP (PRF.STD_SECTION_OID), 1, 2) as ELEM_TYPE,\n           SUBSTR (GET_MATERIAL_CODE (PRF.STD_SECTION_OID, 2), 1, 12) as MATERIAL,\n           RPT_GET_PART_LENGTH (P.OID) * 1000 as LENGTH,\n           GET_PRF_W_HEIGHT (PRF.STD_SECTION_OID) as WIDTH,\n           GET_PRF_W_THICK (PRF.STD_SECTION_OID),\n           RPT_GET_PART_WEIGHT (P.OID) as WEIGHT_UNIT,\n           RPT_GET_PART_WEIGHT (P.OID) * RPT_COPY_COUNT (P.OID) as TOTAL_WEIGHT,\n           SUBSTR (GET_NEST_ID (NP.NESTING_OID, NP.NESTING_BLOCK), 1, 15)  as NEST_ID,\n           NP.NUM_PART_NEST,\n           NP.NEST_LENGTH,\n           NP.NEST_WIDTH,\n           NP.NUM_EQ_NEST\n      FROM PRD_EXPL_PART PE, PRD_PART P, INP_LC_ATT_DB PRF, V_RPT_NEST_PART_GROUP NP, PRD_NEST_PART PNP\n     WHERE     PRF.INP_PART_OID = P.OID AND PE.PRD_PART_OID=  P.OID\n           AND PNP.PART_OID=P.OID AND PNP.SYMM_CODE=PE.SYMMETRY AND NP.NESTING_OID = PNP.NESTING_OID\n           AND P.PART_TYPE = 17\n    UNION ALL\n    select   PE.OID as PEOID, P.CODE  as PART_CODE,\n     DECODE (PE.SYMMETRY,  0,'P', 1,'S', 2,'C', 3,'') as SYMMETRY,\n           P.PART_TYPE,\n           SUBSTR (GET_BLOCK_CODE (P.BLOCK_OID), 1, 12) as BLOCK_CODE,\n           1 as NUM_EQ_PART,\n           GET_PART_DESC (P.OID, 1) as PART_DESC,\n           'PL' as ELEM_TYPE,\n           PA.MATQ as MATERIAL,\n           RPT_AS_GET_PLT_DIMENSIONS (P.OID, 0) * 1000 as LENGTH,\n           RPT_AS_GET_PLT_DIMENSIONS (P.OID, 1) * 1000 as WIDTH,\n           PA.THICKNESS,\n           PE.WEIGHT as WEIGHT_UNIT,\n           PE.WEIGHT as TOTAL_WEIGHT,\n           SUBSTR (GET_NEST_ID (NP.NESTING_OID, NP.NESTING_BLOCK), 1, 15)  as NEST_ID,\n           NP.NUM_PART_NEST,\n           NP.NEST_LENGTH,\n           NP.NEST_WIDTH,\n           NP.NUM_EQ_NEST\n      FROM PRD_PART               P,\n           AS_STD_PART_PLATE      PA,\n           V_RPT_NEST_PART_GROUP  NP,\n           PRD_EXPL_PART          PE , PRD_NEST_PART PNP\n     WHERE     PA.OID = P.OID\n           AND PNP.PART_OID=P.OID AND PNP.SYMM_CODE=PE.SYMMETRY AND NP.NESTING_OID = PNP.NESTING_OID\n           AND PE.PRD_PART_OID = P.OID\n           AND P.PART_TYPE = 12\n    UNION ALL\n    select   PE.OID as PEOID,  P.CODE  as PART_CODE,\n     DECODE (PE.SYMMETRY,  0,'P', 1,'S', 2,'C', 3,'') as SYMMETRY,\n           P.PART_TYPE,\n           SUBSTR (GET_BLOCK_CODE (P.BLOCK_OID), 1, 12) as BLOCK_CODE,\n           1 as NUM_EQ_PART,\n           GET_PART_DESC (P.OID, 1) as PART_DESC,\n           'PL' as ELEM_TYPE,\n           PA.MATQ as MATERIAL,\n           RPT_AS_GET_PLT_DIMENSIONS (P.OID, 0) * 1000 as LENGTH,\n           RPT_AS_GET_PLT_DIMENSIONS (P.OID, 1) * 1000 as WIDTH,\n           PA.THICKNESS,\n           PE.WEIGHT as WEIGHT_UNIT,\n           PE.WEIGHT as TOTAL_WEIGHT,\n           SUBSTR (GET_NEST_ID (NP.NESTING_OID, NP.NESTING_BLOCK), 1, 15)  as NEST_ID,\n           NP.NUM_PART_NEST,\n           NP.NEST_LENGTH,\n           NP.NEST_WIDTH,\n           NP.NUM_EQ_NEST\n      FROM PRD_PART               P,\n           AS_PART_CONT_PLATE     PA,\n           V_RPT_NEST_PART_GROUP  NP,\n           PRD_EXPL_PART          PE, PRD_NEST_PART PNP\n     WHERE     PA.OID = P.OID\n           AND PNP.PART_OID=P.OID AND PNP.SYMM_CODE=PE.SYMMETRY AND NP.NESTING_OID = PNP.NESTING_OID\n           AND PE.PRD_PART_OID = P.OID\n           AND P.PART_TYPE = 12\n    UNION ALL\n    select   PE.OID as PEOID,  P.CODE  as PART_CODE,\n     DECODE (PE.SYMMETRY,  0,'P', 1,'S', 2,'C', 3,'') as SYMMETRY,\n           P.PART_TYPE,\n           SUBSTR (GET_BLOCK_CODE (P.BLOCK_OID), 1, 12) as BLOCK_CODE,\n           1 as NUM_EQ_PART,\n           GET_PART_DESC (P.OID, 1) as PART_DESC,\n           DECODE (STD.SECTION,\n                   -1, '',\n                   0, 'FS',\n                   1, 'AS',\n                   2, 'IS',\n                   3, 'TS',\n                   4, 'US',\n                   5, 'BS',\n                   6, 'ST',\n                   7, 'AT',\n                   8, 'OS',\n                   9, 'PS',\n                   10, 'RS',\n                   11, 'MC',\n                   12, 'DB',\n                   13, 'SR',\n                   14, 'HR',\n                   15, 'LI',\n                   16, 'ZL',\n                   17, 'TL',\n                   '') as ELEM_TYPE,\n           SUBSTR (GET_MATERIAL_CODE (STD.MATERIAL_OID, 1), 1, 12) as MATERIAL,\n           PRF.LENGTH as LENGTH,\n           STD.WEB_HEIGHT as WIDTH,\n           STD.WEB_THICKNESS,\n           PE.WEIGHT as WEIGHT_UNIT,\n           PE.WEIGHT as TOTAL_WEIGHT,\n           SUBSTR (GET_NEST_ID (NP.NESTING_OID, NP.NESTING_BLOCK), 1, 15)  as NEST_ID,\n           NP.NUM_PART_NEST,\n           NP.NEST_LENGTH,\n           NP.NEST_WIDTH,\n           NP.NUM_EQ_NEST\n      FROM PRD_PART               P,\n           AS_STD_PART_PROF       PRF,\n           V_RPT_NEST_PART_GROUP  NP,\n           STD_PROFILE            STD,\n           PRD_EXPL_PART          PE, PRD_NEST_PART PNP\n     WHERE     PRF.OID = P.OID\n           AND PE.PRD_PART_OID = P.OID\n           AND STD.KSE = PRF.KSE\n           AND PNP.PART_OID=P.OID AND PNP.SYMM_CODE=PE.SYMMETRY AND NP.NESTING_OID = PNP.NESTING_OID\n           AND P.PART_TYPE = 7\n    UNION ALL\n    select   PE.OID as PEOID,  P.CODE  as PART_CODE,\n     DECODE (PE.SYMMETRY,  0,'P', 1,'S', 2,'C', 3,'') as SYMMETRY,\n           P.PART_TYPE,\n           SUBSTR (GET_BLOCK_CODE (P.BLOCK_OID), 1, 12) as BLOCK_CODE,\n           RPT_COPY_COUNT (P.OID) as NUM_EQ_PART,\n           GET_PART_DESC (P.OID, 1) as PART_DESC,\n           'PL' as ELEM_TYPE,\n           SUBSTR (GET_MATERIAL_CODE (PA.MATERIAL_OID, 1), 1, 12) as MATERIAL,\n           RPT_GET_SD_PLATE_DIM (P.OID, 0) as LENGTH,\n           RPT_GET_SD_PLATE_DIM (P.OID, 1) as WIDTH,\n           PA.THICKNESS,\n           RPT_GET_PART_WEIGHT (P.OID) as WEIGHT_UNIT,\n           RPT_GET_PART_WEIGHT (P.OID) * RPT_COPY_COUNT (P.OID) as TOTAL_WEIGHT,\n           NULL  as NEST_ID,\n           0,\n           0,\n           0,\n           0\n      FROM V_RPT_PART_NO_NESTING_SD P, V_RPT_SHDK_PLATE_ATT PA,PRD_EXPL_PART          PE\n     WHERE PA.PRD_PART_OID = P.OID AND PE.PRD_PART_OID=  P.OID\n    UNION ALL\n    select   PE.OID as PEOID,  P.CODE  as PART_CODE,\n     DECODE (PE.SYMMETRY,  0,'P', 1,'S', 2,'C', 3,'') as SYMMETRY,\n           P.PART_TYPE,\n           SUBSTR (GET_BLOCK_CODE (P.BLOCK_OID), 1, 12) as BLOCK_CODE,\n           RPT_COPY_COUNT (P.OID) as NUM_EQ_PART,\n           GET_PART_DESC (P.OID, 1) as PART_DESC,\n           SUBSTR (GET_SECT_TP (prf.std_profile_oid), 1, 2) as ELEM_TYPE,\n           SUBSTR (GET_MATERIAL_CODE (PRF.STD_PROFILE_OID, 2), 1, 12) as MATERIAL,\n           PRF.LENGTH * 1000 as LENGTH,\n           GET_PRF_W_HEIGHT (PRF.STD_PROFILE_OID) as WIDTH,\n           GET_PRF_W_THICK (PRF.STD_PROFILE_OID),\n           RPT_GET_PART_WEIGHT (P.OID) as WEIGHT_UNIT,\n           RPT_GET_PART_WEIGHT (P.OID) * RPT_COPY_COUNT (P.OID) as TOTAL_WEIGHT,\n           NULL  as NEST_ID,\n           0,\n           0,\n           0,\n           0\n      FROM PRD_EXPL_PART PE, V_PRD_PART_NO_NESTING P, PRD_PROFILE PRF\n     WHERE     PRF.PRD_PART_OID = P.OID AND PE.PRD_PART_OID=  P.OID\n           AND P.PART_TYPE IN (0,\n                               1,\n                               2,\n                               3,\n                               6)\n    UNION ALL\n    select   PE.OID as PEOID,  P.CODE  as PART_CODE,\n     DECODE (PE.SYMMETRY,  0,'P', 1,'S', 2,'C', 3,'') as SYMMETRY,\n           P.PART_TYPE,\n           SUBSTR (GET_BLOCK_CODE (P.BLOCK_OID), 1, 12) as BLOCK_CODE,\n           RPT_COPY_COUNT (P.OID) as NUM_EQ_PART,\n           SUBSTR (GET_PART_DESC (P.OID, 1), 1, 200) as PART_DESC,\n           'PL' as ELEM_TYPE,\n           SUBSTR (GET_MATERIAL_CODE (PA.MATERIAL_OID, 1), 1, 12) as MATERIAL,\n           RPT_INP_GET_PLT_DIMENSIONS (INP_PART_OID, 0) * 1000 as LENGTH,\n           RPT_INP_GET_PLT_DIMENSIONS (INP_PART_OID, 1) * 1000 as WIDTH,\n           PA.THICKNESS * 1000,\n           RPT_GET_PART_WEIGHT (P.OID) as WEIGHT_UNIT,\n           RPT_GET_PART_WEIGHT (P.OID) * RPT_COPY_COUNT (P.OID) as TOTAL_WEIGHT,\n           NULL  as NEST_ID,\n           0,\n           0,\n           0,\n           0\n      FROM PRD_EXPL_PART PE,V_PRD_PART_NO_NESTING P, INP_PLATE_ATT_DB PA\n     WHERE     PA.INP_PART_OID = P.OID AND PE.PRD_PART_OID=  P.OID\n           AND P.PART_TYPE IN (14,\n                               15,\n                               18,\n                               20,\n                               22,\n                               23,\n                               25,\n                               26)\n    UNION ALL\n    select   PE.OID as PEOID,  P.CODE  as PART_CODE,\n     DECODE (PE.SYMMETRY,  0,'P', 1,'S', 2,'C', 3,'') as SYMMETRY,\n           P.PART_TYPE,\n           SUBSTR (GET_BLOCK_CODE (P.BLOCK_OID), 1, 12) as BLOCK_CODE,\n           RPT_COPY_COUNT (P.OID) as NUM_EQ_PART,\n           SUBSTR (GET_PART_DESC (P.OID, 1), 1, 200) as PART_DESC,\n           SUBSTR (GET_SECT_TP (prf.std_profile_oid), 1, 2) as ELEM_TYPE,\n           SUBSTR (GET_MATERIAL_CODE (PRF.STD_PROFILE_OID, 2), 1, 12) as MATERIAL,\n           RPT_GET_PART_LENGTH (P.OID) * 1000 as LENGTH,\n           GET_PRF_W_HEIGHT (PRF.STD_PROFILE_OID) as WIDTH,\n           GET_PRF_W_THICK (PRF.STD_PROFILE_OID),\n           RPT_GET_PART_WEIGHT (P.OID) as WEIGHT_UNIT,\n           RPT_GET_PART_WEIGHT (P.OID) * RPT_COPY_COUNT (P.OID) as TOTAL_WEIGHT,\n           NULL  as NEST_ID,\n           0,\n           0,\n           0,\n           0\n      FROM PRD_EXPL_PART PE,V_PRD_PART_NO_NESTING P, INP_PROFILE_ATT_DB PRF\n     WHERE     PRF.INP_PART_OID = P.OID AND PE.PRD_PART_OID=  P.OID\n           AND P.PART_TYPE IN (16,\n                               19,\n                               21,\n                               24)\n    UNION ALL\n    select   PE.OID as PEOID,  P.CODE  as PART_CODE,\n     DECODE (PE.SYMMETRY,  0,'P', 1,'S', 2,'C', 3,'') as SYMMETRY,\n           P.PART_TYPE,\n           SUBSTR (GET_BLOCK_CODE (P.BLOCK_OID), 1, 12) as BLOCK_CODE,\n           RPT_COPY_COUNT (P.OID) as NUM_EQ_PART,\n           SUBSTR (GET_PART_DESC (P.OID, 1), 1, 200) as PART_DESC,\n           SUBSTR (GET_SECT_TP (PRF.STD_SECTION_OID), 1, 2) as ELEM_TYPE,\n           SUBSTR (GET_MATERIAL_CODE (PRF.STD_SECTION_OID, 2), 1, 12) as MATERIAL,\n           RPT_GET_PART_LENGTH (P.OID) * 1000 as LENGTH,\n           GET_PRF_W_HEIGHT (PRF.STD_SECTION_OID) as WIDTH,\n           GET_PRF_W_THICK (PRF.STD_SECTION_OID),\n           RPT_GET_PART_WEIGHT (P.OID) as WEIGHT_UNIT,\n           RPT_GET_PART_WEIGHT (P.OID) * RPT_COPY_COUNT (P.OID) as TOTAL_WEIGHT,\n           NULL  as NEST_ID,\n           0,\n           0,\n           0,\n           0\n      FROM PRD_EXPL_PART PE,V_PRD_PART_NO_NESTING P, INP_LC_ATT_DB PRF\n     WHERE PRF.INP_PART_OID = P.OID AND P.PART_TYPE = 17 AND PE.PRD_PART_OID=  P.OID\n    UNION ALL\n    select   PE.OID as PEOID,  P.CODE,\n     DECODE (PE.SYMMETRY,  0,'P', 1,'S', 2,'C', 3,'') as SYMMETRY,\n           P.PART_TYPE,\n           SUBSTR (GET_BLOCK_CODE (P.BLOCK_OID), 1, 12) as BLOCK_CODE,\n           1 as NUM_EQ_PART,\n           GET_PART_DESC (P.OID, 1) as PART_DESC,\n           'PL' as ELEM_TYPE,\n           PA.MATQ as MATERIAL,\n           RPT_AS_GET_PLT_DIMENSIONS (P.OID, 0) * 1000 as LENGTH,\n           RPT_AS_GET_PLT_DIMENSIONS (P.OID, 1) * 1000 as WIDTH,\n           PA.THICKNESS,\n           PE.WEIGHT as WEIGHT_UNIT,\n           PE.WEIGHT as TOTAL_WEIGHT,\n           NULL  as NEST_ID,\n           0,\n           0,\n           0,\n           0\n      FROM V_PRD_PART_NO_NESTING P, AS_STD_PART_PLATE PA, PRD_EXPL_PART PE\n     WHERE PA.OID = P.OID AND PE.PRD_PART_OID = P.OID AND P.PART_TYPE = 12\n    UNION ALL\n    select   PE.OID as PEOID,  P.CODE as PART_CODE,\n     DECODE (PE.SYMMETRY,  0,'P', 1,'S', 2,'C', 3,'') as SYMMETRY,\n           P.PART_TYPE,\n           SUBSTR (GET_BLOCK_CODE (P.BLOCK_OID), 1, 12),\n           1 as NUM_EQ_PART,\n           GET_PART_DESC (P.OID, 1) as PART_DESC,\n           'PL' as ELEM_TYPE,\n           PA.MATQ as MATERIAL,\n           RPT_AS_GET_PLT_DIMENSIONS (P.OID, 0) * 1000 as LENGTH,\n           RPT_AS_GET_PLT_DIMENSIONS (P.OID, 1) * 1000 as WIDTH,\n           PA.THICKNESS,\n           PE.WEIGHT as WEIGHT_UNIT,\n           PE.WEIGHT as TOTAL_WEIGHT,\n           NULL  as NEST_ID,\n           0,\n           0,\n           0,\n           0\n      FROM V_PRD_PART_NO_NESTING P, AS_PART_CONT_PLATE PA, PRD_EXPL_PART PE\n     WHERE PA.OID = P.OID AND PE.PRD_PART_OID = P.OID AND P.PART_TYPE = 12\n    UNION ALL\n    select   PE.OID as PEOID, P.CODE as PART_CODE,\n     DECODE (PE.SYMMETRY,  0,'P', 1,'S', 2,'C', 3,'') as SYMMETRY,\n           P.PART_TYPE,\n           SUBSTR (GET_BLOCK_CODE (P.BLOCK_OID), 1, 12) as BLOCK_CODE,\n           1 as NUM_EQ_PART,\n           GET_PART_DESC (P.OID, 1) as PART_DESC,\n           DECODE (STD.SECTION,\n                   -1, '',\n                   0, 'FS',\n                   1, 'AS',\n                   2, 'IS',\n                   3, 'TS',\n                   4, 'US',\n                   5, 'BS',\n                   6, 'ST',\n                   7, 'AT',\n                   8, 'OS',\n                   9, 'PS',\n                   10, 'RS',\n                   11, 'MC',\n                   12, 'DB',\n                   13, 'SR',\n                   14, 'HR',\n                   15, 'LI',\n                   16, 'ZL',\n                   17, 'TL',\n                   '') as ELEM_TYPE,\n           SUBSTR (GET_MATERIAL_CODE (STD.MATERIAL_OID, 1), 1, 12) as MATERIAL,\n           PRF.LENGTH as LENGTH,\n           STD.WEB_HEIGHT as WIDTH,\n           STD.WEB_THICKNESS,\n           PE.WEIGHT as WEIGHT_UNIT,\n           PE.WEIGHT as TOTAL_WEIGHT,\n           NULL  as NEST_ID,\n           0,\n           0,\n           0,\n           0\n      FROM V_PRD_PART_NO_NESTING  P,\n           AS_STD_PART_PROF       PRF,\n           STD_PROFILE            STD,\n           PRD_EXPL_PART          PE\n     WHERE     PRF.OID = P.OID\n           AND PE.PRD_PART_OID = P.OID\n           AND STD.KSE = PRF.KSE\n           AND P.PART_TYPE = 7\n\n)\n) PNL, BLOCK B\nwhere \nPNL.BLOCK_CODE=B.CODE AND\nB.DESCRIPTION like '%${drNum}%' \norder by PNL.PART_CODE,PNL.SYMMETRY"

  private def partsByDrawingNumAndPartName(drNum: String, partName: String) = s"select distinct\n(select OID from V_PRD_PART where BLOCK_NAME=PNL.BLOCK_CODE AND PART_NAME=PNL.PART_CODE) as PART_OID,\nPNL.PEOID as EXPL_OID,\nPNL.PART_CODE,\nPNL.SYMMETRY,\nPNL.PART_TYPE,\nPNL.BLOCK_CODE,\nB.DESCRIPTION,\nPNL.NUM_EQ_PART,\nPNL.PART_DESC,\nPNL.ELEM_TYPE,\nPNL.MATERIAL,\nPNL.LENGTH,\nPNL.WIDTH,\nPNL.THICKNESS,\nPNL.WEIGHT_UNIT,\nPNL.TOTAL_WEIGHT,\nPNL.NEST_ID,\nPNL.NUM_PART_NEST,\nPNL.NEST_LENGTH,\nPNL.NEST_WIDTH,\nPNL.NUM_EQ_NEST,\n(select KSE_KPL from V_PRD_PLPRF_MAT where NEST_ID=PNL.NEST_ID) as KSE_KPL,\n(select STOCK_CODE0 from STD_PROFILE where kse=(select KSE_KPL from V_PRD_PLPRF_MAT where NEST_ID=PNL.NEST_ID)) as STOCK1,\n(select STORAGE_CODE from STD_PLATE where kpl=(select KSE_KPL from V_PRD_PLPRF_MAT where NEST_ID=PNL.NEST_ID)) as STOCK2\nfrom\n(\nselect   \n    PEOID,\n    PART_CODE,\n    SYMMETRY,\n    PART_TYPE,\n    BLOCK_CODE,\n    NUM_EQ_PART,\n    PART_DESC,\n    ELEM_TYPE,\n    MATERIAL,\n    LENGTH,\n    WIDTH,\n    THICKNESS,\n    WEIGHT_UNIT,\n    TOTAL_WEIGHT,\n    NEST_ID,\n    NUM_PART_NEST,\n    NEST_LENGTH,\n    NEST_WIDTH,\n    NUM_EQ_NEST\nfrom \n(\n select      \n PE.OID as PEOID,\n P.CODE as PART_CODE,\n           DECODE (PE.SYMMETRY,  0,'P', 1,'S', 2,'C', 3,'') as SYMMETRY,\n           P.PART_TYPE,\n           SUBSTR (GET_BLOCK_CODE (P.BLOCK_OID), 1, 12) as BLOCK_CODE,\n           RPT_COPY_COUNT (P.OID) as NUM_EQ_PART,\n           GET_PART_DESC (P.OID, 1) as PART_DESC,\n           'PL' as ELEM_TYPE,\n           SUBSTR (GET_MATERIAL_CODE (PA.MATERIAL_OID, 1), 1, 12) as MATERIAL,\n           RPT_GET_SD_PLATE_DIM (P.OID, 0) as LENGTH,\n           RPT_GET_SD_PLATE_DIM (P.OID, 1) as WIDTH,\n           PA.THICKNESS,\n           RPT_GET_PART_WEIGHT (P.OID) as WEIGHT_UNIT,\n           RPT_GET_PART_WEIGHT (P.OID) * RPT_COPY_COUNT (P.OID) as TOTAL_WEIGHT,\n           SUBSTR (GET_NEST_ID (NP.NESTING_OID, NP.NESTING_BLOCK), 1, 15) as NEST_ID ,\n           NP.NUM_PART_NEST,\n           NP.NEST_LENGTH,\n           NP.NEST_WIDTH,\n           NP.NUM_EQ_NEST\n      FROM PRD_EXPL_PART PE,  PRD_PART P, V_RPT_SHDK_PLATE_ATT PA, V_RPT_NEST_PART_GROUP NP, PRD_NEST_PART PNP\n     WHERE     PA.PRD_PART_OID = P.OID AND PE.PRD_PART_OID =PA.PRD_PART_OID\n           AND PNP.PART_OID=P.OID AND PNP.SYMM_CODE=PE.SYMMETRY AND NP.NESTING_OID = PNP.NESTING_OID\n           AND P.PART_TYPE IN (9, 10)\n    UNION ALL\n    select    PE.OID as PEOID, P.CODE  as PART_CODE,\n     DECODE (PE.SYMMETRY,  0,'P', 1,'S', 2,'C', 3,'') as SYMMETRY,\n           P.PART_TYPE,\n           SUBSTR (GET_BLOCK_CODE (P.BLOCK_OID), 1, 12) as BLOCK_CODE,\n           RPT_COPY_COUNT (P.OID) as NUM_EQ_PART,\n           GET_PART_DESC (P.OID, 1) as PART_DESC,\n           SUBSTR (GET_SECT_TP (prf.std_profile_oid), 1, 2) as ELEM_TYPE,\n           SUBSTR (GET_MATERIAL_CODE (PRF.STD_PROFILE_OID, 2), 1, 12) as MATERIAL,\n           PRF.LENGTH * 1000 as LENGTH,\n           GET_PRF_W_HEIGHT (PRF.STD_PROFILE_OID) as WIDTH,\n           GET_PRF_W_THICK (PRF.STD_PROFILE_OID),\n           RPT_GET_PART_WEIGHT (P.OID) as WEIGHT_UNIT,\n           RPT_GET_PART_WEIGHT (P.OID) * RPT_COPY_COUNT (P.OID)  as TOTAL_WEIGHT,\n           SUBSTR (GET_NEST_ID (NP.NESTING_OID, NP.NESTING_BLOCK), 1, 15) as NEST_ID,\n           NP.NUM_PART_NEST,\n           NP.NEST_LENGTH,\n           NP.NEST_WIDTH,\n           NP.NUM_EQ_NEST\n      FROM PRD_EXPL_PART PE, PRD_PART P, PRD_PROFILE PRF, V_RPT_NEST_PART_GROUP NP, PRD_NEST_PART PNP\n     WHERE     PRF.PRD_PART_OID = P.OID AND PE.PRD_PART_OID=PRF.PRD_PART_OID\n           AND PNP.PART_OID=P.OID AND PNP.SYMM_CODE=PE.SYMMETRY AND NP.NESTING_OID = PNP.NESTING_OID\n           AND P.PART_TYPE IN (0,\n                               1,\n                               2,\n                               3,\n                               6)\n    UNION ALL\n    select   PE.OID as PEOID, P.CODE  as PART_CODE,\n     DECODE (PE.SYMMETRY,  0,'P', 1,'S', 2,'C', 3,'') as SYMMETRY,\n           P.PART_TYPE,\n           SUBSTR (GET_BLOCK_CODE (P.BLOCK_OID), 1, 12) as BLOCK_CODE,\n           RPT_COPY_COUNT (P.OID) as NUM_EQ_PART,\n           SUBSTR (GET_PART_DESC (P.OID, 1), 1, 200) as PART_DESC,\n           'PL' as ELEM_TYPE,\n           SUBSTR (GET_MATERIAL_CODE (PA.MATERIAL_OID, 1), 1, 12) as MATERIAL,\n           RPT_INP_GET_PLT_DIMENSIONS (P.OID, 0) * 1000 as LENGTH,\n           RPT_INP_GET_PLT_DIMENSIONS (P.OID, 1) * 1000 as WIDTH,\n           PA.THICKNESS * 1000,\n           RPT_GET_PART_WEIGHT (P.OID) as WEIGHT_UNIT,\n           RPT_GET_PART_WEIGHT (P.OID) * RPT_COPY_COUNT (P.OID) as TOTAL_WEIGHT,\n           SUBSTR (GET_NEST_ID (NP.NESTING_OID, NP.NESTING_BLOCK), 1, 15) as NEST_ID,\n           NP.NUM_PART_NEST,\n           NP.NEST_LENGTH,\n           NP.NEST_WIDTH,\n           NP.NUM_EQ_NEST\n      FROM PRD_EXPL_PART PE, PRD_PART P, INP_PLATE_ATT_DB PA, V_RPT_NEST_PART_GROUP NP, PRD_NEST_PART PNP\n     WHERE     PA.INP_PART_OID = P.OID AND PE.PRD_PART_OID=P.OID\n           AND PNP.PART_OID=P.OID AND PNP.SYMM_CODE=PE.SYMMETRY AND NP.NESTING_OID = PNP.NESTING_OID\n           AND P.PART_TYPE IN (14,\n                               15,\n                               18,\n                               20,\n                               22,\n                               23,\n                               25,\n                               26)\n    UNION ALL\n    select   PE.OID as PEOID, P.CODE  as PART_CODE,\n     DECODE (PE.SYMMETRY,  0,'P', 1,'S', 2,'C', 3,'') as SYMMETRY,\n           P.PART_TYPE,\n           SUBSTR (GET_BLOCK_CODE (P.BLOCK_OID), 1, 12) as BLOCK_CODE,\n           RPT_COPY_COUNT (P.OID) as NUM_EQ_PART,\n           SUBSTR (GET_PART_DESC (P.OID, 1), 1, 200) as PART_DESC,\n           SUBSTR (GET_SECT_TP (prf.std_profile_oid), 1, 2) as ELEM_TYPE,\n           SUBSTR (GET_MATERIAL_CODE (PRF.STD_PROFILE_OID, 2), 1, 12) as MATERIAL,\n           RPT_GET_PART_LENGTH (P.OID) * 1000 as LENGTH,\n           GET_PRF_W_HEIGHT (PRF.STD_PROFILE_OID) as WIDTH,\n           GET_PRF_W_THICK (PRF.STD_PROFILE_OID),\n           RPT_GET_PART_WEIGHT (P.OID) as WEIGHT_UNIT,\n           RPT_GET_PART_WEIGHT (P.OID) * RPT_COPY_COUNT (P.OID) as TOTAL_WEIGHT,\n           SUBSTR (GET_NEST_ID (NP.NESTING_OID, NP.NESTING_BLOCK), 1, 15)  as NEST_ID,\n           NP.NUM_PART_NEST,\n           NP.NEST_LENGTH,\n           NP.NEST_WIDTH,\n           NP.NUM_EQ_NEST\n      FROM PRD_EXPL_PART PE, PRD_PART P, INP_PROFILE_ATT_DB PRF, V_RPT_NEST_PART_GROUP NP, PRD_NEST_PART PNP\n     WHERE     PRF.INP_PART_OID = P.OID AND PE.PRD_PART_OID= P.OID\n           AND PNP.PART_OID=P.OID AND PNP.SYMM_CODE=PE.SYMMETRY AND NP.NESTING_OID = PNP.NESTING_OID\n           AND P.PART_TYPE IN (16,\n                               19,\n                               21,\n                               24)\n    UNION ALL\n    select   PE.OID as PEOID,  P.CODE  as PART_CODE,\n     DECODE (PE.SYMMETRY,  0,'P', 1,'S', 2,'C', 3,'') as SYMMETRY,\n           P.PART_TYPE,\n           SUBSTR (GET_BLOCK_CODE (P.BLOCK_OID), 1, 12) as BLOCK_CODE,\n           RPT_COPY_COUNT (P.OID) as NUM_EQ_PART,\n           SUBSTR (GET_PART_DESC (P.OID, 1), 1, 200) as PART_DESC,\n           SUBSTR (GET_SECT_TP (PRF.STD_SECTION_OID), 1, 2) as ELEM_TYPE,\n           SUBSTR (GET_MATERIAL_CODE (PRF.STD_SECTION_OID, 2), 1, 12) as MATERIAL,\n           RPT_GET_PART_LENGTH (P.OID) * 1000 as LENGTH,\n           GET_PRF_W_HEIGHT (PRF.STD_SECTION_OID) as WIDTH,\n           GET_PRF_W_THICK (PRF.STD_SECTION_OID),\n           RPT_GET_PART_WEIGHT (P.OID) as WEIGHT_UNIT,\n           RPT_GET_PART_WEIGHT (P.OID) * RPT_COPY_COUNT (P.OID) as TOTAL_WEIGHT,\n           SUBSTR (GET_NEST_ID (NP.NESTING_OID, NP.NESTING_BLOCK), 1, 15)  as NEST_ID,\n           NP.NUM_PART_NEST,\n           NP.NEST_LENGTH,\n           NP.NEST_WIDTH,\n           NP.NUM_EQ_NEST\n      FROM PRD_EXPL_PART PE, PRD_PART P, INP_LC_ATT_DB PRF, V_RPT_NEST_PART_GROUP NP, PRD_NEST_PART PNP\n     WHERE     PRF.INP_PART_OID = P.OID AND PE.PRD_PART_OID=  P.OID\n           AND PNP.PART_OID=P.OID AND PNP.SYMM_CODE=PE.SYMMETRY AND NP.NESTING_OID = PNP.NESTING_OID\n           AND P.PART_TYPE = 17\n    UNION ALL\n    select   PE.OID as PEOID, P.CODE  as PART_CODE,\n     DECODE (PE.SYMMETRY,  0,'P', 1,'S', 2,'C', 3,'') as SYMMETRY,\n           P.PART_TYPE,\n           SUBSTR (GET_BLOCK_CODE (P.BLOCK_OID), 1, 12) as BLOCK_CODE,\n           1 as NUM_EQ_PART,\n           GET_PART_DESC (P.OID, 1) as PART_DESC,\n           'PL' as ELEM_TYPE,\n           PA.MATQ as MATERIAL,\n           RPT_AS_GET_PLT_DIMENSIONS (P.OID, 0) * 1000 as LENGTH,\n           RPT_AS_GET_PLT_DIMENSIONS (P.OID, 1) * 1000 as WIDTH,\n           PA.THICKNESS,\n           PE.WEIGHT as WEIGHT_UNIT,\n           PE.WEIGHT as TOTAL_WEIGHT,\n           SUBSTR (GET_NEST_ID (NP.NESTING_OID, NP.NESTING_BLOCK), 1, 15)  as NEST_ID,\n           NP.NUM_PART_NEST,\n           NP.NEST_LENGTH,\n           NP.NEST_WIDTH,\n           NP.NUM_EQ_NEST\n      FROM PRD_PART               P,\n           AS_STD_PART_PLATE      PA,\n           V_RPT_NEST_PART_GROUP  NP,\n           PRD_EXPL_PART          PE , PRD_NEST_PART PNP\n     WHERE     PA.OID = P.OID\n           AND PNP.PART_OID=P.OID AND PNP.SYMM_CODE=PE.SYMMETRY AND NP.NESTING_OID = PNP.NESTING_OID\n           AND PE.PRD_PART_OID = P.OID\n           AND P.PART_TYPE = 12\n    UNION ALL\n    select   PE.OID as PEOID,  P.CODE  as PART_CODE,\n     DECODE (PE.SYMMETRY,  0,'P', 1,'S', 2,'C', 3,'') as SYMMETRY,\n           P.PART_TYPE,\n           SUBSTR (GET_BLOCK_CODE (P.BLOCK_OID), 1, 12) as BLOCK_CODE,\n           1 as NUM_EQ_PART,\n           GET_PART_DESC (P.OID, 1) as PART_DESC,\n           'PL' as ELEM_TYPE,\n           PA.MATQ as MATERIAL,\n           RPT_AS_GET_PLT_DIMENSIONS (P.OID, 0) * 1000 as LENGTH,\n           RPT_AS_GET_PLT_DIMENSIONS (P.OID, 1) * 1000 as WIDTH,\n           PA.THICKNESS,\n           PE.WEIGHT as WEIGHT_UNIT,\n           PE.WEIGHT as TOTAL_WEIGHT,\n           SUBSTR (GET_NEST_ID (NP.NESTING_OID, NP.NESTING_BLOCK), 1, 15)  as NEST_ID,\n           NP.NUM_PART_NEST,\n           NP.NEST_LENGTH,\n           NP.NEST_WIDTH,\n           NP.NUM_EQ_NEST\n      FROM PRD_PART               P,\n           AS_PART_CONT_PLATE     PA,\n           V_RPT_NEST_PART_GROUP  NP,\n           PRD_EXPL_PART          PE, PRD_NEST_PART PNP\n     WHERE     PA.OID = P.OID\n           AND PNP.PART_OID=P.OID AND PNP.SYMM_CODE=PE.SYMMETRY AND NP.NESTING_OID = PNP.NESTING_OID\n           AND PE.PRD_PART_OID = P.OID\n           AND P.PART_TYPE = 12\n    UNION ALL\n    select   PE.OID as PEOID,  P.CODE  as PART_CODE,\n     DECODE (PE.SYMMETRY,  0,'P', 1,'S', 2,'C', 3,'') as SYMMETRY,\n           P.PART_TYPE,\n           SUBSTR (GET_BLOCK_CODE (P.BLOCK_OID), 1, 12) as BLOCK_CODE,\n           1 as NUM_EQ_PART,\n           GET_PART_DESC (P.OID, 1) as PART_DESC,\n           DECODE (STD.SECTION,\n                   -1, '',\n                   0, 'FS',\n                   1, 'AS',\n                   2, 'IS',\n                   3, 'TS',\n                   4, 'US',\n                   5, 'BS',\n                   6, 'ST',\n                   7, 'AT',\n                   8, 'OS',\n                   9, 'PS',\n                   10, 'RS',\n                   11, 'MC',\n                   12, 'DB',\n                   13, 'SR',\n                   14, 'HR',\n                   15, 'LI',\n                   16, 'ZL',\n                   17, 'TL',\n                   '') as ELEM_TYPE,\n           SUBSTR (GET_MATERIAL_CODE (STD.MATERIAL_OID, 1), 1, 12) as MATERIAL,\n           PRF.LENGTH as LENGTH,\n           STD.WEB_HEIGHT as WIDTH,\n           STD.WEB_THICKNESS,\n           PE.WEIGHT as WEIGHT_UNIT,\n           PE.WEIGHT as TOTAL_WEIGHT,\n           SUBSTR (GET_NEST_ID (NP.NESTING_OID, NP.NESTING_BLOCK), 1, 15)  as NEST_ID,\n           NP.NUM_PART_NEST,\n           NP.NEST_LENGTH,\n           NP.NEST_WIDTH,\n           NP.NUM_EQ_NEST\n      FROM PRD_PART               P,\n           AS_STD_PART_PROF       PRF,\n           V_RPT_NEST_PART_GROUP  NP,\n           STD_PROFILE            STD,\n           PRD_EXPL_PART          PE, PRD_NEST_PART PNP\n     WHERE     PRF.OID = P.OID\n           AND PE.PRD_PART_OID = P.OID\n           AND STD.KSE = PRF.KSE\n           AND PNP.PART_OID=P.OID AND PNP.SYMM_CODE=PE.SYMMETRY AND NP.NESTING_OID = PNP.NESTING_OID\n           AND P.PART_TYPE = 7\n    UNION ALL\n    select   PE.OID as PEOID,  P.CODE  as PART_CODE,\n     DECODE (PE.SYMMETRY,  0,'P', 1,'S', 2,'C', 3,'') as SYMMETRY,\n           P.PART_TYPE,\n           SUBSTR (GET_BLOCK_CODE (P.BLOCK_OID), 1, 12) as BLOCK_CODE,\n           RPT_COPY_COUNT (P.OID) as NUM_EQ_PART,\n           GET_PART_DESC (P.OID, 1) as PART_DESC,\n           'PL' as ELEM_TYPE,\n           SUBSTR (GET_MATERIAL_CODE (PA.MATERIAL_OID, 1), 1, 12) as MATERIAL,\n           RPT_GET_SD_PLATE_DIM (P.OID, 0) as LENGTH,\n           RPT_GET_SD_PLATE_DIM (P.OID, 1) as WIDTH,\n           PA.THICKNESS,\n           RPT_GET_PART_WEIGHT (P.OID) as WEIGHT_UNIT,\n           RPT_GET_PART_WEIGHT (P.OID) * RPT_COPY_COUNT (P.OID) as TOTAL_WEIGHT,\n           NULL  as NEST_ID,\n           0,\n           0,\n           0,\n           0\n      FROM V_RPT_PART_NO_NESTING_SD P, V_RPT_SHDK_PLATE_ATT PA,PRD_EXPL_PART          PE\n     WHERE PA.PRD_PART_OID = P.OID AND PE.PRD_PART_OID=  P.OID\n    UNION ALL\n    select   PE.OID as PEOID,  P.CODE  as PART_CODE,\n     DECODE (PE.SYMMETRY,  0,'P', 1,'S', 2,'C', 3,'') as SYMMETRY,\n           P.PART_TYPE,\n           SUBSTR (GET_BLOCK_CODE (P.BLOCK_OID), 1, 12) as BLOCK_CODE,\n           RPT_COPY_COUNT (P.OID) as NUM_EQ_PART,\n           GET_PART_DESC (P.OID, 1) as PART_DESC,\n           SUBSTR (GET_SECT_TP (prf.std_profile_oid), 1, 2) as ELEM_TYPE,\n           SUBSTR (GET_MATERIAL_CODE (PRF.STD_PROFILE_OID, 2), 1, 12) as MATERIAL,\n           PRF.LENGTH * 1000 as LENGTH,\n           GET_PRF_W_HEIGHT (PRF.STD_PROFILE_OID) as WIDTH,\n           GET_PRF_W_THICK (PRF.STD_PROFILE_OID),\n           RPT_GET_PART_WEIGHT (P.OID) as WEIGHT_UNIT,\n           RPT_GET_PART_WEIGHT (P.OID) * RPT_COPY_COUNT (P.OID) as TOTAL_WEIGHT,\n           NULL  as NEST_ID,\n           0,\n           0,\n           0,\n           0\n      FROM PRD_EXPL_PART PE, V_PRD_PART_NO_NESTING P, PRD_PROFILE PRF\n     WHERE     PRF.PRD_PART_OID = P.OID AND PE.PRD_PART_OID=  P.OID\n           AND P.PART_TYPE IN (0,\n                               1,\n                               2,\n                               3,\n                               6)\n    UNION ALL\n    select   PE.OID as PEOID,  P.CODE  as PART_CODE,\n     DECODE (PE.SYMMETRY,  0,'P', 1,'S', 2,'C', 3,'') as SYMMETRY,\n           P.PART_TYPE,\n           SUBSTR (GET_BLOCK_CODE (P.BLOCK_OID), 1, 12) as BLOCK_CODE,\n           RPT_COPY_COUNT (P.OID) as NUM_EQ_PART,\n           SUBSTR (GET_PART_DESC (P.OID, 1), 1, 200) as PART_DESC,\n           'PL' as ELEM_TYPE,\n           SUBSTR (GET_MATERIAL_CODE (PA.MATERIAL_OID, 1), 1, 12) as MATERIAL,\n           RPT_INP_GET_PLT_DIMENSIONS (INP_PART_OID, 0) * 1000 as LENGTH,\n           RPT_INP_GET_PLT_DIMENSIONS (INP_PART_OID, 1) * 1000 as WIDTH,\n           PA.THICKNESS * 1000,\n           RPT_GET_PART_WEIGHT (P.OID) as WEIGHT_UNIT,\n           RPT_GET_PART_WEIGHT (P.OID) * RPT_COPY_COUNT (P.OID) as TOTAL_WEIGHT,\n           NULL  as NEST_ID,\n           0,\n           0,\n           0,\n           0\n      FROM PRD_EXPL_PART PE,V_PRD_PART_NO_NESTING P, INP_PLATE_ATT_DB PA\n     WHERE     PA.INP_PART_OID = P.OID AND PE.PRD_PART_OID=  P.OID\n           AND P.PART_TYPE IN (14,\n                               15,\n                               18,\n                               20,\n                               22,\n                               23,\n                               25,\n                               26)\n    UNION ALL\n    select   PE.OID as PEOID,  P.CODE  as PART_CODE,\n     DECODE (PE.SYMMETRY,  0,'P', 1,'S', 2,'C', 3,'') as SYMMETRY,\n           P.PART_TYPE,\n           SUBSTR (GET_BLOCK_CODE (P.BLOCK_OID), 1, 12) as BLOCK_CODE,\n           RPT_COPY_COUNT (P.OID) as NUM_EQ_PART,\n           SUBSTR (GET_PART_DESC (P.OID, 1), 1, 200) as PART_DESC,\n           SUBSTR (GET_SECT_TP (prf.std_profile_oid), 1, 2) as ELEM_TYPE,\n           SUBSTR (GET_MATERIAL_CODE (PRF.STD_PROFILE_OID, 2), 1, 12) as MATERIAL,\n           RPT_GET_PART_LENGTH (P.OID) * 1000 as LENGTH,\n           GET_PRF_W_HEIGHT (PRF.STD_PROFILE_OID) as WIDTH,\n           GET_PRF_W_THICK (PRF.STD_PROFILE_OID),\n           RPT_GET_PART_WEIGHT (P.OID) as WEIGHT_UNIT,\n           RPT_GET_PART_WEIGHT (P.OID) * RPT_COPY_COUNT (P.OID) as TOTAL_WEIGHT,\n           NULL  as NEST_ID,\n           0,\n           0,\n           0,\n           0\n      FROM PRD_EXPL_PART PE,V_PRD_PART_NO_NESTING P, INP_PROFILE_ATT_DB PRF\n     WHERE     PRF.INP_PART_OID = P.OID AND PE.PRD_PART_OID=  P.OID\n           AND P.PART_TYPE IN (16,\n                               19,\n                               21,\n                               24)\n    UNION ALL\n    select   PE.OID as PEOID,  P.CODE  as PART_CODE,\n     DECODE (PE.SYMMETRY,  0,'P', 1,'S', 2,'C', 3,'') as SYMMETRY,\n           P.PART_TYPE,\n           SUBSTR (GET_BLOCK_CODE (P.BLOCK_OID), 1, 12) as BLOCK_CODE,\n           RPT_COPY_COUNT (P.OID) as NUM_EQ_PART,\n           SUBSTR (GET_PART_DESC (P.OID, 1), 1, 200) as PART_DESC,\n           SUBSTR (GET_SECT_TP (PRF.STD_SECTION_OID), 1, 2) as ELEM_TYPE,\n           SUBSTR (GET_MATERIAL_CODE (PRF.STD_SECTION_OID, 2), 1, 12) as MATERIAL,\n           RPT_GET_PART_LENGTH (P.OID) * 1000 as LENGTH,\n           GET_PRF_W_HEIGHT (PRF.STD_SECTION_OID) as WIDTH,\n           GET_PRF_W_THICK (PRF.STD_SECTION_OID),\n           RPT_GET_PART_WEIGHT (P.OID) as WEIGHT_UNIT,\n           RPT_GET_PART_WEIGHT (P.OID) * RPT_COPY_COUNT (P.OID) as TOTAL_WEIGHT,\n           NULL  as NEST_ID,\n           0,\n           0,\n           0,\n           0\n      FROM PRD_EXPL_PART PE,V_PRD_PART_NO_NESTING P, INP_LC_ATT_DB PRF\n     WHERE PRF.INP_PART_OID = P.OID AND P.PART_TYPE = 17 AND PE.PRD_PART_OID=  P.OID\n    UNION ALL\n    select   PE.OID as PEOID,  P.CODE,\n     DECODE (PE.SYMMETRY,  0,'P', 1,'S', 2,'C', 3,'') as SYMMETRY,\n           P.PART_TYPE,\n           SUBSTR (GET_BLOCK_CODE (P.BLOCK_OID), 1, 12) as BLOCK_CODE,\n           1 as NUM_EQ_PART,\n           GET_PART_DESC (P.OID, 1) as PART_DESC,\n           'PL' as ELEM_TYPE,\n           PA.MATQ as MATERIAL,\n           RPT_AS_GET_PLT_DIMENSIONS (P.OID, 0) * 1000 as LENGTH,\n           RPT_AS_GET_PLT_DIMENSIONS (P.OID, 1) * 1000 as WIDTH,\n           PA.THICKNESS,\n           PE.WEIGHT as WEIGHT_UNIT,\n           PE.WEIGHT as TOTAL_WEIGHT,\n           NULL  as NEST_ID,\n           0,\n           0,\n           0,\n           0\n      FROM V_PRD_PART_NO_NESTING P, AS_STD_PART_PLATE PA, PRD_EXPL_PART PE\n     WHERE PA.OID = P.OID AND PE.PRD_PART_OID = P.OID AND P.PART_TYPE = 12\n    UNION ALL\n    select   PE.OID as PEOID,  P.CODE as PART_CODE,\n     DECODE (PE.SYMMETRY,  0,'P', 1,'S', 2,'C', 3,'') as SYMMETRY,\n           P.PART_TYPE,\n           SUBSTR (GET_BLOCK_CODE (P.BLOCK_OID), 1, 12),\n           1 as NUM_EQ_PART,\n           GET_PART_DESC (P.OID, 1) as PART_DESC,\n           'PL' as ELEM_TYPE,\n           PA.MATQ as MATERIAL,\n           RPT_AS_GET_PLT_DIMENSIONS (P.OID, 0) * 1000 as LENGTH,\n           RPT_AS_GET_PLT_DIMENSIONS (P.OID, 1) * 1000 as WIDTH,\n           PA.THICKNESS,\n           PE.WEIGHT as WEIGHT_UNIT,\n           PE.WEIGHT as TOTAL_WEIGHT,\n           NULL  as NEST_ID,\n           0,\n           0,\n           0,\n           0\n      FROM V_PRD_PART_NO_NESTING P, AS_PART_CONT_PLATE PA, PRD_EXPL_PART PE\n     WHERE PA.OID = P.OID AND PE.PRD_PART_OID = P.OID AND P.PART_TYPE = 12\n    UNION ALL\n    select   PE.OID as PEOID, P.CODE as PART_CODE,\n     DECODE (PE.SYMMETRY,  0,'P', 1,'S', 2,'C', 3,'') as SYMMETRY,\n           P.PART_TYPE,\n           SUBSTR (GET_BLOCK_CODE (P.BLOCK_OID), 1, 12) as BLOCK_CODE,\n           1 as NUM_EQ_PART,\n           GET_PART_DESC (P.OID, 1) as PART_DESC,\n           DECODE (STD.SECTION,\n                   -1, '',\n                   0, 'FS',\n                   1, 'AS',\n                   2, 'IS',\n                   3, 'TS',\n                   4, 'US',\n                   5, 'BS',\n                   6, 'ST',\n                   7, 'AT',\n                   8, 'OS',\n                   9, 'PS',\n                   10, 'RS',\n                   11, 'MC',\n                   12, 'DB',\n                   13, 'SR',\n                   14, 'HR',\n                   15, 'LI',\n                   16, 'ZL',\n                   17, 'TL',\n                   '') as ELEM_TYPE,\n           SUBSTR (GET_MATERIAL_CODE (STD.MATERIAL_OID, 1), 1, 12) as MATERIAL,\n           PRF.LENGTH as LENGTH,\n           STD.WEB_HEIGHT as WIDTH,\n           STD.WEB_THICKNESS,\n           PE.WEIGHT as WEIGHT_UNIT,\n           PE.WEIGHT as TOTAL_WEIGHT,\n           NULL  as NEST_ID,\n           0,\n           0,\n           0,\n           0\n      FROM V_PRD_PART_NO_NESTING  P,\n           AS_STD_PART_PROF       PRF,\n           STD_PROFILE            STD,\n           PRD_EXPL_PART          PE\n     WHERE     PRF.OID = P.OID\n           AND PE.PRD_PART_OID = P.OID\n           AND STD.KSE = PRF.KSE\n           AND P.PART_TYPE = 7\n\n)\n) PNL, BLOCK B\nwhere \nPNL.BLOCK_CODE=B.CODE AND\nB.DESCRIPTION like '%${drNum}%' AND PNL.PART_CODE='${partName}' \norder by PNL.PART_CODE,PNL.SYMMETRY"


  def ForanPartLabelByDrawingNumAndPartName(project: String, drNum: String, partName: String): List[PrdPart] = {
    ConnectionManager.connectionByProject(project) match {
      case Some(connection) => {
        try {
          connection.setAutoCommit(false)
          val stmt: Statement = connection.createStatement()
          val sql = partsByDrawingNumAndPartName(drNum,partName)
          val rs: ResultSet = stmt.executeQuery(sql)
          val ret = ListBuffer.empty[PrdPart]
          while (rs.next()) {
            ret += PrdPart(
              Option[Int](rs.getInt("PART_OID")).getOrElse(0),
              Option[Int](rs.getInt("EXPL_OID")).getOrElse(0),
              Option[String](rs.getString("PART_CODE")).getOrElse(""),
              Option[String](rs.getString("SYMMETRY")).getOrElse(""),
              Option[Int](rs.getInt("PART_TYPE")).getOrElse(0),
              Option[String](rs.getString("BLOCK_CODE")).getOrElse(""),
              Option[String](rs.getString("DESCRIPTION")).getOrElse(""),
              Option[Int](rs.getInt("NUM_EQ_PART")).getOrElse(0),
              Option[String](rs.getString("PART_DESC")).getOrElse(""),
              Option[String](rs.getString("ELEM_TYPE")).getOrElse(""),
              Option[String](rs.getString("MATERIAL")).getOrElse(""),
              Option[Double](rs.getDouble("LENGTH")).getOrElse(0.0),
              Option[Double](rs.getDouble("WIDTH")).getOrElse(0.0),
              Option[Double](rs.getDouble("THICKNESS")).getOrElse(0.0),
              Option[Double](rs.getDouble("WEIGHT_UNIT")).getOrElse(0.0),
              Option[Double](rs.getDouble("TOTAL_WEIGHT")).getOrElse(0.0),
              Option[String](rs.getString("NEST_ID")).getOrElse(""),
              Option[Double](rs.getDouble("NEST_LENGTH")).getOrElse(0.0),
              Option[Double](rs.getDouble("NEST_WIDTH")).getOrElse(0.0),
              Option[Int](rs.getInt("NUM_EQ_NEST")).getOrElse(0),
              Option[Int](rs.getInt("KSE_KPL")).getOrElse(0),
              {
                Option[String](rs.getString("STOCK1")) match {
                  case Some(value) =>
                    if (value.nonEmpty) {
                      value
                    }
                    else {
                      Option[String](rs.getString("STOCK2")) match {
                        case Some(value) => if (value.nonEmpty) value else ""
                        case None => ""
                      }
                    }
                  case None => Option[String](rs.getString("STOCK2")) match {
                    case Some(value) => if (value.nonEmpty) value else ""
                    case None => ""
                  }
                }
              }
            )
          }

          stmt.close()
          connection.close()
          ret.toList
        }
        catch {
          case _: Throwable => List.empty[PrdPart]
        }
      }
      case None => List.empty[PrdPart]
    }
  }


  def ForanPartsByDrawingNum(project: String, drNum: String): List[PrdPart] = {
    ConnectionManager.connectionByProject(project) match {
      case Some(connection) => {
        try {
          connection.setAutoCommit(false)
          val stmt: Statement = connection.createStatement()
          val sql = partsByDrawingNum(drNum)
          val rs: ResultSet = stmt.executeQuery(sql)
          val ret = ListBuffer.empty[PrdPart]
          while (rs.next()) {
            ret += PrdPart(
              Option[Int](rs.getInt("PART_OID")).getOrElse(0),
              Option[Int](rs.getInt("EXPL_OID")).getOrElse(0),
              Option[String](rs.getString("PART_CODE")).getOrElse(""),
              Option[String](rs.getString("SYMMETRY")).getOrElse(""),
              Option[Int](rs.getInt("PART_TYPE")).getOrElse(0),
              Option[String](rs.getString("BLOCK_CODE")).getOrElse(""),
              Option[String](rs.getString("DESCRIPTION")).getOrElse(""),
              Option[Int](rs.getInt("NUM_EQ_PART")).getOrElse(0),
              Option[String](rs.getString("PART_DESC")).getOrElse(""),
              Option[String](rs.getString("ELEM_TYPE")).getOrElse(""),
              Option[String](rs.getString("MATERIAL")).getOrElse(""),
              Option[Double](rs.getDouble("LENGTH")).getOrElse(0.0),
              Option[Double](rs.getDouble("WIDTH")).getOrElse(0.0),
              Option[Double](rs.getDouble("THICKNESS")).getOrElse(0.0),
              Option[Double](rs.getDouble("WEIGHT_UNIT")).getOrElse(0.0),
              Option[Double](rs.getDouble("TOTAL_WEIGHT")).getOrElse(0.0),
              Option[String](rs.getString("NEST_ID")).getOrElse(""),
              Option[Double](rs.getDouble("NEST_LENGTH")).getOrElse(0.0),
              Option[Double](rs.getDouble("NEST_WIDTH")).getOrElse(0.0),
              Option[Int](rs.getInt("NUM_EQ_NEST")).getOrElse(0),
              Option[Int](rs.getInt("KSE_KPL")).getOrElse(0),
              {
                Option[String](rs.getString("STOCK1")) match {
                  case Some(value) =>
                    if (value.nonEmpty) {
                      value
                    }
                    else {
                      Option[String](rs.getString("STOCK2")) match {
                        case Some(value) => if (value.nonEmpty) value else ""
                        case None => ""
                      }
                    }
                  case None => Option[String](rs.getString("STOCK2")) match {
                    case Some(value) => if (value.nonEmpty) value else ""
                    case None => ""
                  }
                }
              }
            )
          }

          stmt.close()
          connection.close()
          ret.toList
        }
        catch {
          case _: Throwable => List.empty[PrdPart]
        }
      }
      case None => List.empty[PrdPart]
    }
  }


}
